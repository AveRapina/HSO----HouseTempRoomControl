
main.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00002720  000027d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002720  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  0080018c  0080018c  00002860  2**0
                  ALLOC
  3 .eeprom       00000015  00810000  00810000  00002860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00002875  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b0  00000000  00000000  00002c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ef  00000000  00000000  000050b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f3  00000000  00000000  000058a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  00007194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab4  00000000  00000000  00007c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d66  00000000  00000000  0000870c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000a472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	af c0       	rjmp	.+350    	; 0x160 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__vector_1>
       6:	00 00       	nop
       8:	df c0       	rjmp	.+446    	; 0x1c8 <__vector_2>
       a:	00 00       	nop
       c:	e7 c0       	rjmp	.+462    	; 0x1dc <__vector_3>
       e:	00 00       	nop
      10:	ef c0       	rjmp	.+478    	; 0x1f0 <__vector_4>
      12:	00 00       	nop
      14:	f7 c0       	rjmp	.+494    	; 0x204 <__vector_5>
      16:	00 00       	nop
      18:	ff c0       	rjmp	.+510    	; 0x218 <__vector_6>
      1a:	00 00       	nop
      1c:	07 c1       	rjmp	.+526    	; 0x22c <__vector_7>
      1e:	00 00       	nop
      20:	0f c1       	rjmp	.+542    	; 0x240 <__vector_8>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__vector_9>
      26:	00 00       	nop
      28:	1f c1       	rjmp	.+574    	; 0x268 <__vector_10>
      2a:	00 00       	nop
      2c:	27 c1       	rjmp	.+590    	; 0x27c <__vector_11>
      2e:	00 00       	nop
      30:	2f c1       	rjmp	.+606    	; 0x290 <__vector_12>
      32:	00 00       	nop
      34:	37 c1       	rjmp	.+622    	; 0x2a4 <__vector_13>
      36:	00 00       	nop
      38:	3f c1       	rjmp	.+638    	; 0x2b8 <__vector_14>
      3a:	00 00       	nop
      3c:	47 c1       	rjmp	.+654    	; 0x2cc <__vector_15>
      3e:	00 00       	nop
      40:	95 c1       	rjmp	.+810    	; 0x36c <__vector_16>
      42:	00 00       	nop
      44:	9d c1       	rjmp	.+826    	; 0x380 <__vector_17>
      46:	00 00       	nop
      48:	a5 c1       	rjmp	.+842    	; 0x394 <__vector_18>
      4a:	00 00       	nop
      4c:	cb c1       	rjmp	.+918    	; 0x3e4 <__vector_19>
      4e:	00 00       	nop
      50:	d3 c1       	rjmp	.+934    	; 0x3f8 <__vector_20>
      52:	00 00       	nop
      54:	db c1       	rjmp	.+950    	; 0x40c <__vector_21>
      56:	00 00       	nop
      58:	e3 c1       	rjmp	.+966    	; 0x420 <__vector_22>
      5a:	00 00       	nop
      5c:	eb c1       	rjmp	.+982    	; 0x434 <__vector_23>
      5e:	00 00       	nop
      60:	f3 c1       	rjmp	.+998    	; 0x448 <__vector_24>
      62:	00 00       	nop
      64:	fb c1       	rjmp	.+1014   	; 0x45c <__vector_25>
      66:	00 00       	nop
      68:	03 c2       	rjmp	.+1030   	; 0x470 <__vector_26>
      6a:	00 00       	nop
      6c:	0b c2       	rjmp	.+1046   	; 0x484 <__vector_27>
      6e:	00 00       	nop
      70:	13 c2       	rjmp	.+1062   	; 0x498 <__vector_28>
      72:	00 00       	nop
      74:	1b c2       	rjmp	.+1078   	; 0x4ac <__vector_29>
      76:	00 00       	nop
      78:	23 c2       	rjmp	.+1094   	; 0x4c0 <__vector_30>
      7a:	00 00       	nop
      7c:	66 c2       	rjmp	.+1228   	; 0x54a <__vector_31>
      7e:	00 00       	nop
      80:	6e c2       	rjmp	.+1244   	; 0x55e <__vector_32>
      82:	00 00       	nop
      84:	76 c2       	rjmp	.+1260   	; 0x572 <__vector_33>
      86:	00 00       	nop
      88:	7e c2       	rjmp	.+1276   	; 0x586 <__vector_34>
      8a:	00 00       	nop
      8c:	65 08       	sbc	r6, r5
      8e:	71 08       	sbc	r7, r1
      90:	8d 08       	sbc	r8, r13
      92:	a4 08       	sbc	r10, r4
      94:	ba 08       	sbc	r11, r10
      96:	d0 08       	sbc	r13, r0
      98:	ee 08       	sbc	r14, r14
      9a:	ee 08       	sbc	r14, r14
      9c:	e6 08       	sbc	r14, r6
      9e:	07 63       	ori	r16, 0x37	; 55
      a0:	42 36       	cpi	r20, 0x62	; 98
      a2:	b7 9b       	sbis	0x16, 7	; 22
      a4:	d8 a7       	std	Y+40, r29	; 0x28
      a6:	1a 39       	cpi	r17, 0x9A	; 154
      a8:	68 56       	subi	r22, 0x68	; 104
      aa:	18 ae       	std	Y+56, r1	; 0x38
      ac:	ba ab       	std	Y+50, r27	; 0x32
      ae:	55 8c       	ldd	r5, Z+29	; 0x1d
      b0:	1d 3c       	cpi	r17, 0xCD	; 205
      b2:	b7 cc       	rjmp	.-1682   	; 0xfffffa22 <__eeprom_end+0xff7efa0d>
      b4:	57 63       	ori	r21, 0x37	; 55
      b6:	bd 6d       	ori	r27, 0xDD	; 221
      b8:	ed fd       	.word	0xfded	; ????
      ba:	75 3e       	cpi	r23, 0xE5	; 229
      bc:	f6 17       	cp	r31, r22
      be:	72 31       	cpi	r23, 0x12	; 18
      c0:	bf 00       	.word	0x00bf	; ????
      c2:	00 00       	nop
      c4:	80 3f       	cpi	r24, 0xF0	; 240
      c6:	08 00       	.word	0x0008	; ????
      c8:	00 00       	nop
      ca:	be 92       	st	-X, r11
      cc:	24 49       	sbci	r18, 0x94	; 148
      ce:	12 3e       	cpi	r17, 0xE2	; 226
      d0:	ab aa       	std	Y+51, r10	; 0x33
      d2:	aa 2a       	or	r10, r26
      d4:	be cd       	rjmp	.-1156   	; 0xfffffc52 <__eeprom_end+0xff7efc3d>
      d6:	cc cc       	rjmp	.-1640   	; 0xfffffa70 <__eeprom_end+0xff7efa5b>
      d8:	4c 3e       	cpi	r20, 0xEC	; 236
      da:	00 00       	nop
      dc:	00 80       	ld	r0, Z
      de:	be ab       	std	Y+54, r27	; 0x36
      e0:	aa aa       	std	Y+50, r10	; 0x32
      e2:	aa 3e       	cpi	r26, 0xEA	; 234
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	bf 00       	.word	0x00bf	; ????
      ea:	00 00       	nop
      ec:	80 3f       	cpi	r24, 0xF0	; 240
      ee:	00 00       	nop
      f0:	00 00       	nop
      f2:	00 08       	sbc	r0, r0
      f4:	41 78       	andi	r20, 0x81	; 129
      f6:	d3 bb       	out	0x13, r29	; 19
      f8:	43 87       	std	Z+11, r20	; 0x0b
      fa:	d1 13       	cpse	r29, r17
      fc:	3d 19       	sub	r19, r13
      fe:	0e 3c       	cpi	r16, 0xCE	; 206
     100:	c3 bd       	out	0x23, r28	; 35
     102:	42 82       	std	Z+2, r4	; 0x02
     104:	ad 2b       	or	r26, r29
     106:	3e 68       	ori	r19, 0x8E	; 142
     108:	ec 82       	std	Y+4, r14	; 0x04
     10a:	76 be       	out	0x36, r7	; 54
     10c:	d9 8f       	std	Y+25, r29	; 0x19
     10e:	e1 a9       	ldd	r30, Z+49	; 0x31
     110:	3e 4c       	sbci	r19, 0xCE	; 206
     112:	80 ef       	ldi	r24, 0xF0	; 240
     114:	ff be       	out	0x3f, r15	; 63
     116:	01 c4       	rjmp	.+2050   	; 0x91a <checkTempErrorPump1+0x22>
     118:	ff 7f       	andi	r31, 0xFF	; 255
     11a:	3f 00       	.word	0x003f	; ????
     11c:	00 00       	nop
	...

00000120 <LcdCustomChar>:
     120:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     130:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     140:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     150:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf ef       	ldi	r28, 0xFF	; 255
     166:	d0 e1       	ldi	r29, 0x10	; 16
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f7 e2       	ldi	r31, 0x27	; 39
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	0b bf       	out	0x3b, r16	; 59
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x14>
     17c:	07 90       	elpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	ac 38       	cpi	r26, 0x8C	; 140
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0x10>

00000186 <__do_clear_bss>:
     186:	22 e0       	ldi	r18, 0x02	; 2
     188:	ac e8       	ldi	r26, 0x8C	; 140
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	a9 30       	cpi	r26, 0x09	; 9
     192:	b2 07       	cpc	r27, r18
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>
     196:	0e 94 a2 0c 	call	0x1944	; 0x1944 <main>
     19a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <_exit>

0000019e <clearBuffer>:


/************************************************************************/
/* @Clear Buffer                                                        */
/************************************************************************/
void clearBuffer(void){
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0; i< USART_BUFFER_LENGHT; i++) usartBuffer[i]=0;
     1a2:	fc 01       	movw	r30, r24
     1a4:	e0 56       	subi	r30, 0x60	; 96
     1a6:	fe 4f       	sbci	r31, 0xFE	; 254
     1a8:	10 82       	st	Z, r1
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	82 33       	cpi	r24, 0x32	; 50
     1ae:	91 05       	cpc	r25, r1
     1b0:	c1 f7       	brne	.-16     	; 0x1a2 <clearBuffer+0x4>

}
     1b2:	08 95       	ret

000001b4 <__vector_1>:
/************************************************************************/

/************************************************************************/
/* handler External Interrupt Request 0                                                                     */
/************************************************************************/
ISR(INT0_vect){
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
	
}
     1be:	0f 90       	pop	r0
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	0f 90       	pop	r0
     1c4:	1f 90       	pop	r1
     1c6:	18 95       	reti

000001c8 <__vector_2>:


/************************************************************************/
/* handler External Interrupt Request 1                                                                   */
/************************************************************************/
ISR(INT1_vect){
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
	
}
     1d2:	0f 90       	pop	r0
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	0f 90       	pop	r0
     1d8:	1f 90       	pop	r1
     1da:	18 95       	reti

000001dc <__vector_3>:


/************************************************************************/
/* handler External Interrupt Request 2                                                                    */
/************************************************************************/
ISR(INT2_vect){
     1dc:	1f 92       	push	r1
     1de:	0f 92       	push	r0
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	0f 92       	push	r0
     1e4:	11 24       	eor	r1, r1
	
}
     1e6:	0f 90       	pop	r0
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	0f 90       	pop	r0
     1ec:	1f 90       	pop	r1
     1ee:	18 95       	reti

000001f0 <__vector_4>:


/************************************************************************/
/* handler External Interrupt Request 3                                                                    */
/************************************************************************/
ISR(INT3_vect){
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
	
}
     1fa:	0f 90       	pop	r0
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	0f 90       	pop	r0
     200:	1f 90       	pop	r1
     202:	18 95       	reti

00000204 <__vector_5>:


/************************************************************************/
/* handler External Interrupt Request 4                                                                   */
/************************************************************************/
ISR(INT4_vect){
     204:	1f 92       	push	r1
     206:	0f 92       	push	r0
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	0f 92       	push	r0
     20c:	11 24       	eor	r1, r1
	
}
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <__vector_6>:

/************************************************************************/
/* handler External Interrupt Request 5                                                                    */
/************************************************************************/
ISR(INT5_vect){
     218:	1f 92       	push	r1
     21a:	0f 92       	push	r0
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	0f 92       	push	r0
     220:	11 24       	eor	r1, r1
	
}
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti

0000022c <__vector_7>:


/************************************************************************/
/* handler External Interrupt Request 6                                                                  */
/************************************************************************/
ISR(INT6_vect){
     22c:	1f 92       	push	r1
     22e:	0f 92       	push	r0
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	0f 92       	push	r0
     234:	11 24       	eor	r1, r1
	
}
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_8>:


/************************************************************************/
/* handler External Interrupt Request 7                                                                   */
/************************************************************************/
ISR(INT7_vect){
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
	
}
     24a:	0f 90       	pop	r0
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	0f 90       	pop	r0
     250:	1f 90       	pop	r1
     252:	18 95       	reti

00000254 <__vector_9>:
/************************************************************************/

/************************************************************************/
/* handler Timer/Counter2 Compare Match                                                                  */
/************************************************************************/
ISR(TIMER2_COMP_vect){
     254:	1f 92       	push	r1
     256:	0f 92       	push	r0
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	0f 92       	push	r0
     25c:	11 24       	eor	r1, r1
	
}
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti

00000268 <__vector_10>:


/************************************************************************/
/* handler Timer/Counter2 Overflow                                                                 */
/************************************************************************/
ISR(TIMER2_OVF_vect){
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
	
	
	
}
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <__vector_11>:


/************************************************************************/
/* handler Timer/Counter1 Capture Event                                                               */
/************************************************************************/
ISR(TIMER1_CAPT_vect){
     27c:	1f 92       	push	r1
     27e:	0f 92       	push	r0
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
	
}
     286:	0f 90       	pop	r0
     288:	0f be       	out	0x3f, r0	; 63
     28a:	0f 90       	pop	r0
     28c:	1f 90       	pop	r1
     28e:	18 95       	reti

00000290 <__vector_12>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match A                                                              */
/************************************************************************/
ISR(TIMER1_COMPA_vect){
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
	
}
     29a:	0f 90       	pop	r0
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	0f 90       	pop	r0
     2a0:	1f 90       	pop	r1
     2a2:	18 95       	reti

000002a4 <__vector_13>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match B                                                             */
/************************************************************************/
ISR(TIMER1_COMPB_vect){
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
     2ac:	11 24       	eor	r1, r1
	
}
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <__vector_14>:


/************************************************************************/
/* handler Timer/Counter1 Overflow                                                            */
/************************************************************************/
ISR(TIMER1_OVF_vect){
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
	
}
     2c2:	0f 90       	pop	r0
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	0f 90       	pop	r0
     2c8:	1f 90       	pop	r1
     2ca:	18 95       	reti

000002cc <__vector_15>:


/************************************************************************/
/* handler Timer/Counter0 Compare Match                                                           */
/************************************************************************/
ISR(TIMER0_COMP_vect){
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	2f 93       	push	r18
     2d8:	3f 93       	push	r19
     2da:	5f 93       	push	r21
     2dc:	6f 93       	push	r22
     2de:	7f 93       	push	r23
     2e0:	8f 93       	push	r24
     2e2:	9f 93       	push	r25
     2e4:	af 93       	push	r26
     2e6:	bf 93       	push	r27
	
	static uint16_t tickCounter;
	// scheduling period
	// control enabled
	//TCNT0 = 200; // timer count reaload
	tickCounter++;
     2e8:	20 91 8c 01 	lds	r18, 0x018C
     2ec:	30 91 8d 01 	lds	r19, 0x018D
     2f0:	2f 5f       	subi	r18, 0xFF	; 255
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	30 93 8d 01 	sts	0x018D, r19
     2f8:	20 93 8c 01 	sts	0x018C, r18
	
	if(tickCounter % taskControlPeriod == 0) flagTaskControl++;
     2fc:	60 91 10 01 	lds	r22, 0x0110
     300:	70 91 11 01 	lds	r23, 0x0111
     304:	c9 01       	movw	r24, r18
     306:	0e 94 8c 10 	call	0x2118	; 0x2118 <__udivmodhi4>
     30a:	89 2b       	or	r24, r25
     30c:	29 f4       	brne	.+10     	; 0x318 <__vector_15+0x4c>
     30e:	80 91 9c 01 	lds	r24, 0x019C
     312:	8f 5f       	subi	r24, 0xFF	; 255
     314:	80 93 9c 01 	sts	0x019C, r24
	if(tickCounter % taskReadButtonsPeriod == 0) flagTaskReadButtons++;
     318:	60 91 14 01 	lds	r22, 0x0114
     31c:	70 91 15 01 	lds	r23, 0x0115
     320:	c9 01       	movw	r24, r18
     322:	0e 94 8c 10 	call	0x2118	; 0x2118 <__udivmodhi4>
     326:	89 2b       	or	r24, r25
     328:	29 f4       	brne	.+10     	; 0x334 <__vector_15+0x68>
     32a:	80 91 9e 01 	lds	r24, 0x019E
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	80 93 9e 01 	sts	0x019E, r24
	if(tickCounter % taskUpdateLCDPeriod == 0) flagTaskUpdateLcd++;
     334:	60 91 12 01 	lds	r22, 0x0112
     338:	70 91 13 01 	lds	r23, 0x0113
     33c:	c9 01       	movw	r24, r18
     33e:	0e 94 8c 10 	call	0x2118	; 0x2118 <__udivmodhi4>
     342:	89 2b       	or	r24, r25
     344:	29 f4       	brne	.+10     	; 0x350 <__vector_15+0x84>
     346:	80 91 9d 01 	lds	r24, 0x019D
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	80 93 9d 01 	sts	0x019D, r24
	
	
	
}
     350:	bf 91       	pop	r27
     352:	af 91       	pop	r26
     354:	9f 91       	pop	r25
     356:	8f 91       	pop	r24
     358:	7f 91       	pop	r23
     35a:	6f 91       	pop	r22
     35c:	5f 91       	pop	r21
     35e:	3f 91       	pop	r19
     360:	2f 91       	pop	r18
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti

0000036c <__vector_16>:


/************************************************************************/
/* handler Timer/Counter0 Overflow     CHECK                                                     */
/************************************************************************/
ISR(TIMER0_OVF_vect){
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
	
	
	
	
}
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <__vector_17>:
/************************************************************************/

/************************************************************************/
/* handler SPI Serial Transfer Complete                                                         */
/************************************************************************/
ISR(SPI_STC_vect){
     380:	1f 92       	push	r1
     382:	0f 92       	push	r0
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	0f 92       	push	r0
     388:	11 24       	eor	r1, r1
	
}
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_18>:


/************************************************************************/
/* handler USART0, Rx Complete                                                        */
/************************************************************************/
ISR(USART0_RX_vect){
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	0b b6       	in	r0, 0x3b	; 59
     3a0:	0f 92       	push	r0
     3a2:	2f 93       	push	r18
     3a4:	3f 93       	push	r19
     3a6:	4f 93       	push	r20
     3a8:	5f 93       	push	r21
     3aa:	6f 93       	push	r22
     3ac:	7f 93       	push	r23
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
     3b2:	af 93       	push	r26
     3b4:	bf 93       	push	r27
     3b6:	ef 93       	push	r30
     3b8:	ff 93       	push	r31
	char c;
	c =USART0_receiveChar();
     3ba:	31 d2       	rcall	.+1122   	; 0x81e <USART0_receiveChar>
	// manda caracter para usart 0
	USART1_sendChar(c);
     3bc:	f0 d1       	rcall	.+992    	; 0x79e <USART1_sendChar>
}
     3be:	ff 91       	pop	r31
     3c0:	ef 91       	pop	r30
     3c2:	bf 91       	pop	r27
     3c4:	af 91       	pop	r26
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	7f 91       	pop	r23
     3cc:	6f 91       	pop	r22
     3ce:	5f 91       	pop	r21
     3d0:	4f 91       	pop	r20
     3d2:	3f 91       	pop	r19
     3d4:	2f 91       	pop	r18
     3d6:	0f 90       	pop	r0
     3d8:	0b be       	out	0x3b, r0	; 59
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_19>:


/************************************************************************/
/* handler USART0 Data Register Empty                                                       */
/************************************************************************/
ISR(USART0_UDRE_vect){
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1

}
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <__vector_20>:


/************************************************************************/
/* handler USART0, Tx Complete                                                       */
/************************************************************************/
ISR(USART0_TX_vect){
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1

}
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_21>:
/************************************************************************/

/************************************************************************/
/* handler ADC Conversion Complete                                                    */
/************************************************************************/
ISR(ADC_vect){
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1

}
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_22>:
/************************************************************************/

/************************************************************************/
/* handler EEPROM Ready                                                   */
/************************************************************************/
ISR(EE_READY_vect){
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1

}
     42a:	0f 90       	pop	r0
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	0f 90       	pop	r0
     430:	1f 90       	pop	r1
     432:	18 95       	reti

00000434 <__vector_23>:
/************************************************************************/

/************************************************************************/
/* handler Analog Comparator                                                  */
/************************************************************************/
ISR(ANALOG_COMP_vect){
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1

}
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_24>:
/************************************************************************/

/************************************************************************/
/* handler  Timer/Counter1 Compare Match C                                               */
/************************************************************************/
ISR(TIMER1_COMPC_vect){
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1

}
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <__vector_25>:


/************************************************************************/
/* handler Timer/Counter3 Capture Event                                             */
/************************************************************************/
ISR(TIMER3_CAPT_vect){
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1

}
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <__vector_26>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match A                                             */
/************************************************************************/
ISR(TIMER3_COMPA_vect){
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1

}
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_27>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match B                                             */
/************************************************************************/
ISR(TIMER3_COMPB_vect){
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	11 24       	eor	r1, r1

}
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <__vector_28>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match C                                           */
/************************************************************************/
ISR(TIMER3_COMPC_vect){
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1

}
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <__vector_29>:


/************************************************************************/
/* handler Timer/Counter3 Overflow                                           */
/************************************************************************/
ISR(TIMER3_OVF_vect){
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1

}
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <__vector_30>:
/************************************************************************/

/************************************************************************/
/* handler USART1, Rx Complete                                                                    */
/************************************************************************/
ISR(USART1_RX_vect){
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	0b b6       	in	r0, 0x3b	; 59
     4cc:	0f 92       	push	r0
     4ce:	2f 93       	push	r18
     4d0:	3f 93       	push	r19
     4d2:	4f 93       	push	r20
     4d4:	5f 93       	push	r21
     4d6:	6f 93       	push	r22
     4d8:	7f 93       	push	r23
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	af 93       	push	r26
     4e0:	bf 93       	push	r27
     4e2:	cf 93       	push	r28
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
	char c;

	
	c =USART1_receiveChar();
     4e8:	8e d1       	rcall	.+796    	; 0x806 <USART1_receiveChar>
     4ea:	c8 2f       	mov	r28, r24
	USART0_sendChar(c); // reply with received char
     4ec:	94 d1       	rcall	.+808    	; 0x816 <USART0_sendChar>
	if(c== MSG_END_CARACTER){
     4ee:	cc 37       	cpi	r28, 0x7C	; 124
     4f0:	31 f4       	brne	.+12     	; 0x4fe <__vector_30+0x3e>
		nReceivedBytes=0;
     4f2:	10 92 d2 01 	sts	0x01D2, r1
		flagNewMessage=1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 9f 01 	sts	0x019F, r24
		return;
     4fc:	12 c0       	rjmp	.+36     	; 0x522 <__vector_30+0x62>
	}
	// save caracter to buffer
	usartBuffer[nReceivedBytes]=c;
     4fe:	e0 91 d2 01 	lds	r30, 0x01D2
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	e0 56       	subi	r30, 0x60	; 96
     506:	fe 4f       	sbci	r31, 0xFE	; 254
     508:	c0 83       	st	Z, r28
	nReceivedBytes++;
     50a:	80 91 d2 01 	lds	r24, 0x01D2
     50e:	8f 5f       	subi	r24, 0xFF	; 255
     510:	80 93 d2 01 	sts	0x01D2, r24

	// test if buffer underrun	
	if(nReceivedBytes> USART_BUFFER_LENGHT+1){
     514:	80 91 d2 01 	lds	r24, 0x01D2
     518:	84 33       	cpi	r24, 0x34	; 52
     51a:	18 f0       	brcs	.+6      	; 0x522 <__vector_30+0x62>
		nReceivedBytes=0;
     51c:	10 92 d2 01 	sts	0x01D2, r1
		clearBuffer();
     520:	3e de       	rcall	.-900    	; 0x19e <clearBuffer>
	}
}
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	cf 91       	pop	r28
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	0b be       	out	0x3b, r0	; 59
     540:	0f 90       	pop	r0
     542:	0f be       	out	0x3f, r0	; 63
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	18 95       	reti

0000054a <__vector_31>:


/************************************************************************/
/* handler USART1 Data Register Empty                                          */
/************************************************************************/
ISR(USART1_UDRE_vect){
     54a:	1f 92       	push	r1
     54c:	0f 92       	push	r0
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	0f 92       	push	r0
     552:	11 24       	eor	r1, r1

}
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <__vector_32>:


/************************************************************************/
/* handler USART1, Tx Complete                                         */
/************************************************************************/
ISR(USART1_TX_vect){
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1

}
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <__vector_33>:


/************************************************************************/
/* handler Two-wire Serial Interface                                       */
/************************************************************************/
ISR(TWI_vect){
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1

}
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_34>:


/************************************************************************/
/* handler Store Program Memory Ready                                       */
/************************************************************************/
ISR(SPM_READY_vect){
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1

}
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <LCD_sendChar>:
	LCD_gotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCD_sendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     59a:	98 2f       	mov	r25, r24
     59c:	90 7f       	andi	r25, 0xF0	; 240
     59e:	95 bb       	out	0x15, r25	; 21
     5a0:	a8 9a       	sbi	0x15, 0	; 21
     5a2:	aa 9a       	sbi	0x15, 2	; 21
     5a4:	e3 ef       	ldi	r30, 0xF3	; 243
     5a6:	f1 e0       	ldi	r31, 0x01	; 1
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCD_sendChar+0xe>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <LCD_sendChar+0x14>
     5ae:	00 00       	nop
     5b0:	aa 98       	cbi	0x15, 2	; 21
     5b2:	a8 98       	cbi	0x15, 0	; 21
     5b4:	e3 ef       	ldi	r30, 0xF3	; 243
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_sendChar+0x1e>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCD_sendChar+0x24>
     5be:	00 00       	nop
     5c0:	f0 e1       	ldi	r31, 0x10	; 16
     5c2:	8f 9f       	mul	r24, r31
     5c4:	c0 01       	movw	r24, r0
     5c6:	11 24       	eor	r1, r1
     5c8:	85 bb       	out	0x15, r24	; 21
     5ca:	a8 9a       	sbi	0x15, 0	; 21
     5cc:	aa 9a       	sbi	0x15, 2	; 21
     5ce:	83 ef       	ldi	r24, 0xF3	; 243
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_sendChar+0x38>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCD_sendChar+0x3e>
     5d8:	00 00       	nop
     5da:	aa 98       	cbi	0x15, 2	; 21
     5dc:	a8 98       	cbi	0x15, 0	; 21
     5de:	e3 ef       	ldi	r30, 0xF3	; 243
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LCD_sendChar+0x48>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <LCD_sendChar+0x4e>
     5e8:	00 00       	nop
     5ea:	08 95       	ret

000005ec <LCD_sendCommand>:
     5ec:	98 2f       	mov	r25, r24
     5ee:	90 7f       	andi	r25, 0xF0	; 240
     5f0:	95 bb       	out	0x15, r25	; 21
     5f2:	aa 9a       	sbi	0x15, 2	; 21
     5f4:	e3 ef       	ldi	r30, 0xF3	; 243
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_sendCommand+0xc>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_sendCommand+0x12>
     5fe:	00 00       	nop
     600:	aa 98       	cbi	0x15, 2	; 21
     602:	e3 ef       	ldi	r30, 0xF3	; 243
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	31 97       	sbiw	r30, 0x01	; 1
     608:	f1 f7       	brne	.-4      	; 0x606 <LCD_sendCommand+0x1a>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <LCD_sendCommand+0x20>
     60c:	00 00       	nop
     60e:	f0 e1       	ldi	r31, 0x10	; 16
     610:	8f 9f       	mul	r24, r31
     612:	c0 01       	movw	r24, r0
     614:	11 24       	eor	r1, r1
     616:	85 bb       	out	0x15, r24	; 21
     618:	aa 9a       	sbi	0x15, 2	; 21
     61a:	83 ef       	ldi	r24, 0xF3	; 243
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <LCD_sendCommand+0x32>
     622:	00 c0       	rjmp	.+0      	; 0x624 <LCD_sendCommand+0x38>
     624:	00 00       	nop
     626:	aa 98       	cbi	0x15, 2	; 21
     628:	e3 ef       	ldi	r30, 0xF3	; 243
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <LCD_sendCommand+0x40>
     630:	00 c0       	rjmp	.+0      	; 0x632 <LCD_sendCommand+0x46>
     632:	00 00       	nop
     634:	08 95       	ret

00000636 <LCD_clr>:
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	d9 df       	rcall	.-78     	; 0x5ec <LCD_sendCommand>
     63a:	84 e4       	ldi	r24, 0x44	; 68
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <LCD_clr+0x8>
     642:	00 c0       	rjmp	.+0      	; 0x644 <LCD_clr+0xe>
     644:	00 00       	nop
     646:	08 95       	ret

00000648 <LCD_sendString>:
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	fc 01       	movw	r30, r24
     652:	01 90       	ld	r0, Z+
     654:	00 20       	and	r0, r0
     656:	e9 f7       	brne	.-6      	; 0x652 <LCD_sendString+0xa>
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	1e 2f       	mov	r17, r30
     65c:	18 1b       	sub	r17, r24
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	59 f0       	breq	.+22     	; 0x678 <LCD_sendString+0x30>
     662:	11 23       	and	r17, r17
     664:	49 f0       	breq	.+18     	; 0x678 <LCD_sendString+0x30>
     666:	08 2f       	mov	r16, r24
     668:	c0 2f       	mov	r28, r16
     66a:	d9 2f       	mov	r29, r25
     66c:	89 91       	ld	r24, Y+
     66e:	95 df       	rcall	.-214    	; 0x59a <LCD_sendChar>
     670:	8c 2f       	mov	r24, r28
     672:	80 1b       	sub	r24, r16
     674:	81 17       	cp	r24, r17
     676:	d0 f3       	brcs	.-12     	; 0x66c <LCD_sendString+0x24>
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	08 95       	ret

00000682 <LCD_gotoXY>:
     682:	62 30       	cpi	r22, 0x02	; 2
     684:	31 f0       	breq	.+12     	; 0x692 <LCD_gotoXY+0x10>
     686:	63 30       	cpi	r22, 0x03	; 3
     688:	31 f0       	breq	.+12     	; 0x696 <LCD_gotoXY+0x14>
     68a:	61 30       	cpi	r22, 0x01	; 1
     68c:	29 f4       	brne	.+10     	; 0x698 <LCD_gotoXY+0x16>
     68e:	80 5c       	subi	r24, 0xC0	; 192
     690:	03 c0       	rjmp	.+6      	; 0x698 <LCD_gotoXY+0x16>
     692:	8c 5e       	subi	r24, 0xEC	; 236
     694:	01 c0       	rjmp	.+2      	; 0x698 <LCD_gotoXY+0x16>
     696:	8c 5a       	subi	r24, 0xAC	; 172
     698:	80 68       	ori	r24, 0x80	; 128
     69a:	a8 cf       	rjmp	.-176    	; 0x5ec <LCD_sendCommand>
     69c:	08 95       	ret

0000069e <LCD_defineChar>:


/************************************************************************/
/* @define char                                                                     */
/************************************************************************/
void LCD_defineChar(const uint8_t *pc,uint8_t char_code){
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     6ac:	66 0f       	add	r22, r22
     6ae:	66 0f       	add	r22, r22
     6b0:	66 0f       	add	r22, r22
     6b2:	60 64       	ori	r22, 0x40	; 64
     6b4:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
     6b6:	c0 e0       	ldi	r28, 0x00	; 0
     6b8:	d0 e0       	ldi	r29, 0x00	; 0
     6ba:	f8 01       	movw	r30, r16
     6bc:	ec 0f       	add	r30, r28
     6be:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
     6c0:	f4 90       	lpm	r15, Z
		LCD_sendCommand(a++);
     6c2:	8c 2f       	mov	r24, r28
     6c4:	8e 0d       	add	r24, r14
     6c6:	92 df       	rcall	.-220    	; 0x5ec <LCD_sendCommand>
		LCD_sendChar(pcc);
     6c8:	8f 2d       	mov	r24, r15
     6ca:	67 df       	rcall	.-306    	; 0x59a <LCD_sendChar>
/************************************************************************/
void LCD_defineChar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     6cc:	21 96       	adiw	r28, 0x01	; 1
     6ce:	c8 30       	cpi	r28, 0x08	; 8
     6d0:	d1 05       	cpc	r29, r1
     6d2:	99 f7       	brne	.-26     	; 0x6ba <LCD_defineChar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCD_sendCommand(a++);
		LCD_sendChar(pcc);
		}
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	08 95       	ret

000006e2 <LCD_init>:


/************************************************************************/
/* @init lcd                                                                     */
/************************************************************************/
void LCD_init(void){
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e8:	8b e4       	ldi	r24, 0x4B	; 75
     6ea:	9d e1       	ldi	r25, 0x1D	; 29
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_init+0xa>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <LCD_init+0x10>
     6f2:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     6f4:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
     6f6:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     6f8:	84 b3       	in	r24, 0x14	; 20
     6fa:	80 6f       	ori	r24, 0xF0	; 240
     6fc:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     6fe:	84 b3       	in	r24, 0x14	; 20
     700:	87 60       	ori	r24, 0x07	; 7
     702:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     704:	80 e3       	ldi	r24, 0x30	; 48
     706:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     708:	aa 9a       	sbi	0x15, 2	; 21
     70a:	83 ef       	ldi	r24, 0xF3	; 243
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <LCD_init+0x2c>
     712:	00 c0       	rjmp	.+0      	; 0x714 <LCD_init+0x32>
     714:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     716:	aa 98       	cbi	0x15, 2	; 21
     718:	83 ef       	ldi	r24, 0xF3	; 243
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <LCD_init+0x3a>
     720:	00 c0       	rjmp	.+0      	; 0x722 <LCD_init+0x40>
     722:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     724:	80 e3       	ldi	r24, 0x30	; 48
     726:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     728:	aa 9a       	sbi	0x15, 2	; 21
     72a:	83 ef       	ldi	r24, 0xF3	; 243
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <LCD_init+0x4c>
     732:	00 c0       	rjmp	.+0      	; 0x734 <LCD_init+0x52>
     734:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     736:	aa 98       	cbi	0x15, 2	; 21
     738:	83 ef       	ldi	r24, 0xF3	; 243
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <LCD_init+0x5a>
     740:	00 c0       	rjmp	.+0      	; 0x742 <LCD_init+0x60>
     742:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     744:	80 e2       	ldi	r24, 0x20	; 32
     746:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     748:	aa 9a       	sbi	0x15, 2	; 21
     74a:	83 ef       	ldi	r24, 0xF3	; 243
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <LCD_init+0x6c>
     752:	00 c0       	rjmp	.+0      	; 0x754 <LCD_init+0x72>
     754:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     756:	aa 98       	cbi	0x15, 2	; 21
     758:	83 ef       	ldi	r24, 0xF3	; 243
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <LCD_init+0x7a>
     760:	00 c0       	rjmp	.+0      	; 0x762 <LCD_init+0x80>
     762:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCD_sendCommand(0b00101000);
     764:	88 e2       	ldi	r24, 0x28	; 40
     766:	42 df       	rcall	.-380    	; 0x5ec <LCD_sendCommand>
   //-----increment address, invisible cursor shift------
	LCD_sendCommand(0b00001100);
     768:	8c e0       	ldi	r24, 0x0C	; 12
     76a:	40 df       	rcall	.-384    	; 0x5ec <LCD_sendCommand>
     76c:	c0 e2       	ldi	r28, 0x20	; 32
     76e:	d1 e0       	ldi	r29, 0x01	; 1
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     770:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCD_defineChar((LcdCustomChar+ch),chn++);
     772:	11 e0       	ldi	r17, 0x01	; 1
     774:	16 0f       	add	r17, r22
     776:	ce 01       	movw	r24, r28
     778:	92 df       	rcall	.-220    	; 0x69e <LCD_defineChar>
     77a:	28 96       	adiw	r28, 0x08	; 8
	LCD_sendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCD_sendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     77c:	18 30       	cpi	r17, 0x08	; 8
     77e:	11 f0       	breq	.+4      	; 0x784 <LCD_init+0xa2>
	{
		LCD_defineChar((LcdCustomChar+ch),chn++);
     780:	61 2f       	mov	r22, r17
     782:	f7 cf       	rjmp	.-18     	; 0x772 <LCD_init+0x90>
		LCD_defineChar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	08 95       	ret

0000078c <USART1_config>:
		{
			USART0_sendChar(*(data+i));	//CALL FUNCTION AND SEND CHAR IN THAT POSITION
		}
	}

}
     78c:	90 93 98 00 	sts	0x0098, r25
     790:	80 93 99 00 	sts	0x0099, r24
     794:	40 93 9a 00 	sts	0x009A, r20
     798:	60 93 9d 00 	sts	0x009D, r22
     79c:	08 95       	ret

0000079e <USART1_sendChar>:
     79e:	eb e9       	ldi	r30, 0x9B	; 155
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	90 81       	ld	r25, Z
     7a4:	95 ff       	sbrs	r25, 5
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <USART1_sendChar+0x4>
     7a8:	80 93 9c 00 	sts	0x009C, r24
     7ac:	08 95       	ret

000007ae <USART1_sendStr>:
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	fc 01       	movw	r30, r24
     7bc:	dc 01       	movw	r26, r24
     7be:	0d 90       	ld	r0, X+
     7c0:	00 20       	and	r0, r0
     7c2:	e9 f7       	brne	.-6      	; 0x7be <USART1_sendStr+0x10>
     7c4:	11 97       	sbiw	r26, 0x01	; 1
     7c6:	7d 01       	movw	r14, r26
     7c8:	e8 1a       	sub	r14, r24
     7ca:	f9 0a       	sbc	r15, r25
     7cc:	1e 14       	cp	r1, r14
     7ce:	1f 04       	cpc	r1, r15
     7d0:	9c f4       	brge	.+38     	; 0x7f8 <USART1_sendStr+0x4a>
     7d2:	80 81       	ld	r24, Z
     7d4:	88 23       	and	r24, r24
     7d6:	81 f0       	breq	.+32     	; 0x7f8 <USART1_sendStr+0x4a>
     7d8:	8f 01       	movw	r16, r30
     7da:	0f 5f       	subi	r16, 0xFF	; 255
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	c0 e0       	ldi	r28, 0x00	; 0
     7e0:	d0 e0       	ldi	r29, 0x00	; 0
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <USART1_sendStr+0x40>
     7e4:	f8 01       	movw	r30, r16
     7e6:	81 91       	ld	r24, Z+
     7e8:	8f 01       	movw	r16, r30
     7ea:	88 23       	and	r24, r24
     7ec:	29 f0       	breq	.+10     	; 0x7f8 <USART1_sendStr+0x4a>
     7ee:	d7 df       	rcall	.-82     	; 0x79e <USART1_sendChar>
     7f0:	21 96       	adiw	r28, 0x01	; 1
     7f2:	ec 16       	cp	r14, r28
     7f4:	fd 06       	cpc	r15, r29
     7f6:	b1 f7       	brne	.-20     	; 0x7e4 <USART1_sendStr+0x36>
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	08 95       	ret

00000806 <USART1_receiveChar>:
     806:	eb e9       	ldi	r30, 0x9B	; 155
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	88 23       	and	r24, r24
     80e:	ec f7       	brge	.-6      	; 0x80a <USART1_receiveChar+0x4>
     810:	80 91 9c 00 	lds	r24, 0x009C
     814:	08 95       	ret

00000816 <USART0_sendChar>:
     816:	5d 9b       	sbis	0x0b, 5	; 11
     818:	fe cf       	rjmp	.-4      	; 0x816 <USART0_sendChar>
     81a:	8c b9       	out	0x0c, r24	; 12
     81c:	08 95       	ret

0000081e <USART0_receiveChar>:
/************************************************************************/
/* USART RECEIVE CHAR                                                   */
/************************************************************************/
char USART0_receiveChar(void){
	//wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );	// do nothing
     81e:	5f 9b       	sbis	0x0b, 7	; 11
     820:	fe cf       	rjmp	.-4      	; 0x81e <USART0_receiveChar>
	
	return UDR0;
     822:	8c b1       	in	r24, 0x0c	; 12
}
     824:	08 95       	ret

00000826 <schedulerInit>:

uint8_t flagSaveParametersEeprom=0;

// @ setuo scheulder
void schedulerInit(void){
	TCCR0 |= SCHEDULER_PRESCALER;
     826:	83 b7       	in	r24, 0x33	; 51
     828:	85 60       	ori	r24, 0x05	; 5
     82a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_WAVEFORM_MODE_CTC;
     82c:	83 b7       	in	r24, 0x33	; 51
     82e:	88 60       	ori	r24, 0x08	; 8
     830:	83 bf       	out	0x33, r24	; 51
	OCR0  = SCHEDULER_RELOAD; // timer count reaload
     832:	8c e7       	ldi	r24, 0x7C	; 124
     834:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<< OCIE0); // Enable timer compare interrupt
     836:	87 b7       	in	r24, 0x37	; 55
     838:	82 60       	ori	r24, 0x02	; 2
     83a:	87 bf       	out	0x37, r24	; 55
     83c:	08 95       	ret

0000083e <decodeButton>:

/************************************************************************/
/* @decode Button                                                                     */
/************************************************************************/
uint8_t decodeButton(uint8_t button){
	button &=0x0F; // ensure
     83e:	8f 70       	andi	r24, 0x0F	; 15
	switch (button){
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	89 f0       	breq	.+34     	; 0x866 <decodeButton+0x28>
     844:	18 f4       	brcc	.+6      	; 0x84c <decodeButton+0xe>
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	31 f0       	breq	.+12     	; 0x856 <decodeButton+0x18>
     84a:	0b c0       	rjmp	.+22     	; 0x862 <decodeButton+0x24>
     84c:	84 30       	cpi	r24, 0x04	; 4
     84e:	29 f0       	breq	.+10     	; 0x85a <decodeButton+0x1c>
     850:	88 30       	cpi	r24, 0x08	; 8
     852:	29 f0       	breq	.+10     	; 0x85e <decodeButton+0x20>
     854:	06 c0       	rjmp	.+12     	; 0x862 <decodeButton+0x24>
		
		case 1: return BUTTON_ENTER;
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	08 95       	ret
		break;
		
		case 2: return BUTTON_UP;
		break;
		
		case 4: return BUTTON_DOWN;
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	08 95       	ret
		break;
		
		case 8: return BUTTON_ESC;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	08 95       	ret
		
		
		default: return 0;
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	08 95       	ret
	switch (button){
		
		case 1: return BUTTON_ENTER;
		break;
		
		case 2: return BUTTON_UP;
     866:	83 e0       	ldi	r24, 0x03	; 3
		
		
		default: return 0;
		break;
	}
}
     868:	08 95       	ret

0000086a <debounceKey>:

#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
     86a:	28 2f       	mov	r18, r24
	uint8_t key =0; // by default
	static codeOld;
	static keyCount;
	
	// ALREADY SOMETHIN PRESSED
	if(keyCount != 0){
     86c:	40 91 96 01 	lds	r20, 0x0196
     870:	50 91 97 01 	lds	r21, 0x0197
     874:	41 15       	cp	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	b9 f0       	breq	.+46     	; 0x8a8 <debounceKey+0x3e>
		
		// IF SAME KEY and inside debounce times save
		if(codeNew == codeOld && keyCount <N_DEBOUNCE){ // ONLY IF EQUAL AND DEBOUNCE AVAILABLE
     87a:	e8 2f       	mov	r30, r24
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	60 91 94 01 	lds	r22, 0x0194
     882:	70 91 95 01 	lds	r23, 0x0195
     886:	e6 17       	cp	r30, r22
     888:	f7 07       	cpc	r31, r23
     88a:	81 f5       	brne	.+96     	; 0x8ec <debounceKey+0x82>
     88c:	43 30       	cpi	r20, 0x03	; 3
     88e:	51 05       	cpc	r21, r1
     890:	7c f5       	brge	.+94     	; 0x8f0 <debounceKey+0x86>
			codeOld =codeNew;
			keyCount++;
     892:	4f 5f       	subi	r20, 0xFF	; 255
     894:	5f 4f       	sbci	r21, 0xFF	; 255
     896:	50 93 97 01 	sts	0x0197, r21
     89a:	40 93 96 01 	sts	0x0196, r20
			// Reached debounce value and valid key
			if (keyCount == N_DEBOUNCE){
     89e:	43 30       	cpi	r20, 0x03	; 3
     8a0:	51 05       	cpc	r21, r1
     8a2:	41 f1       	breq	.+80     	; 0x8f4 <debounceKey+0x8a>
		
	}

	
	// INITIAL CONDITION
	if (keyCount == 0){
     8a4:	45 2b       	or	r20, r21
     8a6:	71 f4       	brne	.+28     	; 0x8c4 <debounceKey+0x5a>
		codeOld = codeNew;
     8a8:	42 2f       	mov	r20, r18
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	50 93 95 01 	sts	0x0195, r21
     8b0:	40 93 94 01 	sts	0x0194, r20
		keyCount++;
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	50 93 97 01 	sts	0x0197, r21
     8bc:	40 93 96 01 	sts	0x0196, r20
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <debounceKey+0x5c>
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
     8c4:	80 e0       	ldi	r24, 0x00	; 0
		codeOld = codeNew;
		keyCount++;
	}
	
	// if pressed key different reset (user must release the key for new run)
	if(codeNew != codeOld){
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 91 94 01 	lds	r20, 0x0194
     8cc:	50 91 95 01 	lds	r21, 0x0195
     8d0:	24 17       	cp	r18, r20
     8d2:	35 07       	cpc	r19, r21
     8d4:	81 f0       	breq	.+32     	; 0x8f6 <debounceKey+0x8c>
		codeOld =codeNew;
     8d6:	30 93 95 01 	sts	0x0195, r19
     8da:	20 93 94 01 	sts	0x0194, r18
		keyCount =1;
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	30 93 97 01 	sts	0x0197, r19
     8e6:	20 93 96 01 	sts	0x0196, r18
     8ea:	08 95       	ret
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	eb cf       	rjmp	.-42     	; 0x8c6 <debounceKey+0x5c>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	e9 cf       	rjmp	.-46     	; 0x8c6 <debounceKey+0x5c>
     8f4:	e8 cf       	rjmp	.-48     	; 0x8c6 <debounceKey+0x5c>
	if(codeNew != codeOld){
		codeOld =codeNew;
		keyCount =1;
	}
	return key;
}
     8f6:	08 95       	ret

000008f8 <checkTempErrorPump1>:


/************************************************************************/
/* @check erros and return state                                                                     */
/************************************************************************/
uint8_t checkTempErrorPump1(void){
     8f8:	4f 92       	push	r4
     8fa:	5f 92       	push	r5
     8fc:	6f 92       	push	r6
     8fe:	7f 92       	push	r7
     900:	8f 92       	push	r8
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 d0       	rcall	.+0      	; 0x916 <checkTempErrorPump1+0x1e>
     916:	00 d0       	rcall	.+0      	; 0x918 <checkTempErrorPump1+0x20>
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t bombaRecAqsState;
	
	
	if(currentRec > (currentSetPointRecMin + currentSetPointDelta/2) && currentAqs < (currentSetPointAqsMax - currentSetPointDelta/2) && (currentRec > currentAqs + currentSetPointDelta/2) && currentAqs < (currentSetPointAqsMax-currentSetPointDelta/2) ) bombaRecAqsState=1;
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	5f e3       	ldi	r21, 0x3F	; 63
     924:	60 91 e5 01 	lds	r22, 0x01E5
     928:	70 91 e6 01 	lds	r23, 0x01E6
     92c:	80 91 e7 01 	lds	r24, 0x01E7
     930:	90 91 e8 01 	lds	r25, 0x01E8
     934:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__mulsf3>
     938:	6b 01       	movw	r12, r22
     93a:	7c 01       	movw	r14, r24
     93c:	40 90 eb 01 	lds	r4, 0x01EB
     940:	50 90 ec 01 	lds	r5, 0x01EC
     944:	60 90 ed 01 	lds	r6, 0x01ED
     948:	70 90 ee 01 	lds	r7, 0x01EE
     94c:	80 90 0c 01 	lds	r8, 0x010C
     950:	90 90 0d 01 	lds	r9, 0x010D
     954:	a0 90 0e 01 	lds	r10, 0x010E
     958:	b0 90 0f 01 	lds	r11, 0x010F
     95c:	a3 01       	movw	r20, r6
     95e:	92 01       	movw	r18, r4
     960:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__addsf3>
     964:	a5 01       	movw	r20, r10
     966:	94 01       	movw	r18, r8
     968:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__cmpsf2>
     96c:	88 23       	and	r24, r24
     96e:	9c f5       	brge	.+102    	; 0x9d6 <checkTempErrorPump1+0xde>
     970:	80 91 08 01 	lds	r24, 0x0108
     974:	90 91 09 01 	lds	r25, 0x0109
     978:	a0 91 0a 01 	lds	r26, 0x010A
     97c:	b0 91 0b 01 	lds	r27, 0x010B
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	9a 83       	std	Y+2, r25	; 0x02
     984:	ab 83       	std	Y+3, r26	; 0x03
     986:	bc 83       	std	Y+4, r27	; 0x04
     988:	a7 01       	movw	r20, r14
     98a:	96 01       	movw	r18, r12
     98c:	60 91 f0 01 	lds	r22, 0x01F0
     990:	70 91 f1 01 	lds	r23, 0x01F1
     994:	80 91 f2 01 	lds	r24, 0x01F2
     998:	90 91 f3 01 	lds	r25, 0x01F3
     99c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__subsf3>
     9a0:	29 81       	ldd	r18, Y+1	; 0x01
     9a2:	3a 81       	ldd	r19, Y+2	; 0x02
     9a4:	4b 81       	ldd	r20, Y+3	; 0x03
     9a6:	5c 81       	ldd	r21, Y+4	; 0x04
     9a8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     9ac:	18 16       	cp	r1, r24
     9ae:	9c f4       	brge	.+38     	; 0x9d6 <checkTempErrorPump1+0xde>
     9b0:	29 81       	ldd	r18, Y+1	; 0x01
     9b2:	3a 81       	ldd	r19, Y+2	; 0x02
     9b4:	4b 81       	ldd	r20, Y+3	; 0x03
     9b6:	5c 81       	ldd	r21, Y+4	; 0x04
     9b8:	c7 01       	movw	r24, r14
     9ba:	b6 01       	movw	r22, r12
     9bc:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	c5 01       	movw	r24, r10
     9c6:	b4 01       	movw	r22, r8
     9c8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     9cc:	18 16       	cp	r1, r24
     9ce:	1c f4       	brge	.+6      	; 0x9d6 <checkTempErrorPump1+0xde>
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	80 93 92 01 	sts	0x0192, r24
	
	if(currentRec < (currentSetPointRecMin - currentSetPointDelta/2) || currentRec <(currentAqs - currentSetPointDelta/2 ) || currentAqs >(currentSetPointAqsMax+currentSetPointDelta/2) )bombaRecAqsState=0;
     9d6:	a7 01       	movw	r20, r14
     9d8:	96 01       	movw	r18, r12
     9da:	c3 01       	movw	r24, r6
     9dc:	b2 01       	movw	r22, r4
     9de:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__subsf3>
     9e2:	9b 01       	movw	r18, r22
     9e4:	ac 01       	movw	r20, r24
     9e6:	c5 01       	movw	r24, r10
     9e8:	b4 01       	movw	r22, r8
     9ea:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__cmpsf2>
     9ee:	88 23       	and	r24, r24
     9f0:	4c f1       	brlt	.+82     	; 0xa44 <checkTempErrorPump1+0x14c>
     9f2:	40 90 08 01 	lds	r4, 0x0108
     9f6:	50 90 09 01 	lds	r5, 0x0109
     9fa:	60 90 0a 01 	lds	r6, 0x010A
     9fe:	70 90 0b 01 	lds	r7, 0x010B
     a02:	a7 01       	movw	r20, r14
     a04:	96 01       	movw	r18, r12
     a06:	c3 01       	movw	r24, r6
     a08:	b2 01       	movw	r22, r4
     a0a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__subsf3>
     a0e:	9b 01       	movw	r18, r22
     a10:	ac 01       	movw	r20, r24
     a12:	c5 01       	movw	r24, r10
     a14:	b4 01       	movw	r22, r8
     a16:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__cmpsf2>
     a1a:	88 23       	and	r24, r24
     a1c:	9c f0       	brlt	.+38     	; 0xa44 <checkTempErrorPump1+0x14c>
     a1e:	20 91 f0 01 	lds	r18, 0x01F0
     a22:	30 91 f1 01 	lds	r19, 0x01F1
     a26:	40 91 f2 01 	lds	r20, 0x01F2
     a2a:	50 91 f3 01 	lds	r21, 0x01F3
     a2e:	c7 01       	movw	r24, r14
     a30:	b6 01       	movw	r22, r12
     a32:	f3 d7       	rcall	.+4070   	; 0x1a1a <__addsf3>
     a34:	9b 01       	movw	r18, r22
     a36:	ac 01       	movw	r20, r24
     a38:	c3 01       	movw	r24, r6
     a3a:	b2 01       	movw	r22, r4
     a3c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     a40:	18 16       	cp	r1, r24
     a42:	14 f4       	brge	.+4      	; 0xa48 <checkTempErrorPump1+0x150>
     a44:	10 92 92 01 	sts	0x0192, r1
	
	return bombaRecAqsState;
}
     a48:	80 91 92 01 	lds	r24, 0x0192
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	af 90       	pop	r10
     a64:	9f 90       	pop	r9
     a66:	8f 90       	pop	r8
     a68:	7f 90       	pop	r7
     a6a:	6f 90       	pop	r6
     a6c:	5f 90       	pop	r5
     a6e:	4f 90       	pop	r4
     a70:	08 95       	ret

00000a72 <checkTempErrorPump2>:


/************************************************************************/
/* @check erros RAD and return state                                                                     */
/************************************************************************/
uint8_t checkTempErrorPump2(void){
     a72:	4f 92       	push	r4
     a74:	5f 92       	push	r5
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
	
	static uint8_t bombaRecRadState;
	
	
	if(currentRec >(currentSetPointRecMin + currentSetPointDelta/2) && (currentRec > currentSetPointRadMin - currentSetPointDelta/2)) bombaRecRadState=1;
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	60 91 e5 01 	lds	r22, 0x01E5
     a96:	70 91 e6 01 	lds	r23, 0x01E6
     a9a:	80 91 e7 01 	lds	r24, 0x01E7
     a9e:	90 91 e8 01 	lds	r25, 0x01E8
     aa2:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__mulsf3>
     aa6:	4b 01       	movw	r8, r22
     aa8:	5c 01       	movw	r10, r24
     aaa:	40 90 eb 01 	lds	r4, 0x01EB
     aae:	50 90 ec 01 	lds	r5, 0x01EC
     ab2:	60 90 ed 01 	lds	r6, 0x01ED
     ab6:	70 90 ee 01 	lds	r7, 0x01EE
     aba:	c0 90 0c 01 	lds	r12, 0x010C
     abe:	d0 90 0d 01 	lds	r13, 0x010D
     ac2:	e0 90 0e 01 	lds	r14, 0x010E
     ac6:	f0 90 0f 01 	lds	r15, 0x010F
     aca:	a3 01       	movw	r20, r6
     acc:	92 01       	movw	r18, r4
     ace:	a5 d7       	rcall	.+3914   	; 0x1a1a <__addsf3>
     ad0:	a7 01       	movw	r20, r14
     ad2:	96 01       	movw	r18, r12
     ad4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__cmpsf2>
     ad8:	88 23       	and	r24, r24
     ada:	b4 f4       	brge	.+44     	; 0xb08 <checkTempErrorPump2+0x96>
     adc:	a5 01       	movw	r20, r10
     ade:	94 01       	movw	r18, r8
     ae0:	60 91 e1 01 	lds	r22, 0x01E1
     ae4:	70 91 e2 01 	lds	r23, 0x01E2
     ae8:	80 91 e3 01 	lds	r24, 0x01E3
     aec:	90 91 e4 01 	lds	r25, 0x01E4
     af0:	93 d7       	rcall	.+3878   	; 0x1a18 <__subsf3>
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	c7 01       	movw	r24, r14
     af8:	b6 01       	movw	r22, r12
     afa:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     afe:	18 16       	cp	r1, r24
     b00:	1c f4       	brge	.+6      	; 0xb08 <checkTempErrorPump2+0x96>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 91 01 	sts	0x0191, r24
	
	if(currentRec < (currentSetPointRecMin - currentSetPointDelta/2) || currentRec <currentSetPointRadMin -currentSetPointDelta/2) bombaRecRadState=0;
     b08:	a5 01       	movw	r20, r10
     b0a:	94 01       	movw	r18, r8
     b0c:	c3 01       	movw	r24, r6
     b0e:	b2 01       	movw	r22, r4
     b10:	83 d7       	rcall	.+3846   	; 0x1a18 <__subsf3>
     b12:	9b 01       	movw	r18, r22
     b14:	ac 01       	movw	r20, r24
     b16:	c7 01       	movw	r24, r14
     b18:	b6 01       	movw	r22, r12
     b1a:	e3 d7       	rcall	.+4038   	; 0x1ae2 <__cmpsf2>
     b1c:	88 23       	and	r24, r24
     b1e:	94 f0       	brlt	.+36     	; 0xb44 <checkTempErrorPump2+0xd2>
     b20:	a5 01       	movw	r20, r10
     b22:	94 01       	movw	r18, r8
     b24:	60 91 e1 01 	lds	r22, 0x01E1
     b28:	70 91 e2 01 	lds	r23, 0x01E2
     b2c:	80 91 e3 01 	lds	r24, 0x01E3
     b30:	90 91 e4 01 	lds	r25, 0x01E4
     b34:	71 d7       	rcall	.+3810   	; 0x1a18 <__subsf3>
     b36:	9b 01       	movw	r18, r22
     b38:	ac 01       	movw	r20, r24
     b3a:	c7 01       	movw	r24, r14
     b3c:	b6 01       	movw	r22, r12
     b3e:	d1 d7       	rcall	.+4002   	; 0x1ae2 <__cmpsf2>
     b40:	88 23       	and	r24, r24
     b42:	14 f4       	brge	.+4      	; 0xb48 <checkTempErrorPump2+0xd6>
     b44:	10 92 91 01 	sts	0x0191, r1
	
	return bombaRecRadState;
}
     b48:	80 91 91 01 	lds	r24, 0x0191
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	9f 90       	pop	r9
     b5a:	8f 90       	pop	r8
     b5c:	7f 90       	pop	r7
     b5e:	6f 90       	pop	r6
     b60:	5f 90       	pop	r5
     b62:	4f 90       	pop	r4
     b64:	08 95       	ret

00000b66 <checkTempErrorPump3>:


/************************************************************************/
/* @check erros and return state                                                                     */
/************************************************************************/
uint8_t checkTempErrorPump3(void){
     b66:	4f 92       	push	r4
     b68:	5f 92       	push	r5
     b6a:	6f 92       	push	r6
     b6c:	7f 92       	push	r7
     b6e:	8f 92       	push	r8
     b70:	9f 92       	push	r9
     b72:	af 92       	push	r10
     b74:	bf 92       	push	r11
     b76:	cf 92       	push	r12
     b78:	df 92       	push	r13
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	00 d0       	rcall	.+0      	; 0xb84 <checkTempErrorPump3+0x1e>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <checkTempErrorPump3+0x20>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t bombaSolAqsState;
	
	
	if(currentSol >(currentSetPointSolMin + currentSetPointDelta/2) && (currentAqs < currentSetPointAqsMax - currentSetPointDelta/2) && currentSol > (currentAqs + currentSetPointDelta/2) && currentAqs < (currentSetPointAqsMax-currentSetPointDelta/2)) bombaSolAqsState=1;
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	5f e3       	ldi	r21, 0x3F	; 63
     b92:	60 91 e5 01 	lds	r22, 0x01E5
     b96:	70 91 e6 01 	lds	r23, 0x01E6
     b9a:	80 91 e7 01 	lds	r24, 0x01E7
     b9e:	90 91 e8 01 	lds	r25, 0x01E8
     ba2:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__mulsf3>
     ba6:	6b 01       	movw	r12, r22
     ba8:	7c 01       	movw	r14, r24
     baa:	40 90 d3 01 	lds	r4, 0x01D3
     bae:	50 90 d4 01 	lds	r5, 0x01D4
     bb2:	60 90 d5 01 	lds	r6, 0x01D5
     bb6:	70 90 d6 01 	lds	r7, 0x01D6
     bba:	80 90 00 01 	lds	r8, 0x0100
     bbe:	90 90 01 01 	lds	r9, 0x0101
     bc2:	a0 90 02 01 	lds	r10, 0x0102
     bc6:	b0 90 03 01 	lds	r11, 0x0103
     bca:	a3 01       	movw	r20, r6
     bcc:	92 01       	movw	r18, r4
     bce:	25 d7       	rcall	.+3658   	; 0x1a1a <__addsf3>
     bd0:	a5 01       	movw	r20, r10
     bd2:	94 01       	movw	r18, r8
     bd4:	86 d7       	rcall	.+3852   	; 0x1ae2 <__cmpsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	8c f5       	brge	.+98     	; 0xc3c <checkTempErrorPump3+0xd6>
     bda:	80 91 08 01 	lds	r24, 0x0108
     bde:	90 91 09 01 	lds	r25, 0x0109
     be2:	a0 91 0a 01 	lds	r26, 0x010A
     be6:	b0 91 0b 01 	lds	r27, 0x010B
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	ab 83       	std	Y+3, r26	; 0x03
     bf0:	bc 83       	std	Y+4, r27	; 0x04
     bf2:	a7 01       	movw	r20, r14
     bf4:	96 01       	movw	r18, r12
     bf6:	60 91 f0 01 	lds	r22, 0x01F0
     bfa:	70 91 f1 01 	lds	r23, 0x01F1
     bfe:	80 91 f2 01 	lds	r24, 0x01F2
     c02:	90 91 f3 01 	lds	r25, 0x01F3
     c06:	08 d7       	rcall	.+3600   	; 0x1a18 <__subsf3>
     c08:	29 81       	ldd	r18, Y+1	; 0x01
     c0a:	3a 81       	ldd	r19, Y+2	; 0x02
     c0c:	4b 81       	ldd	r20, Y+3	; 0x03
     c0e:	5c 81       	ldd	r21, Y+4	; 0x04
     c10:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     c14:	18 16       	cp	r1, r24
     c16:	94 f4       	brge	.+36     	; 0xc3c <checkTempErrorPump3+0xd6>
     c18:	29 81       	ldd	r18, Y+1	; 0x01
     c1a:	3a 81       	ldd	r19, Y+2	; 0x02
     c1c:	4b 81       	ldd	r20, Y+3	; 0x03
     c1e:	5c 81       	ldd	r21, Y+4	; 0x04
     c20:	c7 01       	movw	r24, r14
     c22:	b6 01       	movw	r22, r12
     c24:	fa d6       	rcall	.+3572   	; 0x1a1a <__addsf3>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	c5 01       	movw	r24, r10
     c2c:	b4 01       	movw	r22, r8
     c2e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     c32:	18 16       	cp	r1, r24
     c34:	1c f4       	brge	.+6      	; 0xc3c <checkTempErrorPump3+0xd6>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 90 01 	sts	0x0190, r24
	
	if(currentSol < (currentSetPointSolMin - currentSetPointDelta/2) || currentSol <(currentAqs - currentSetPointDelta/2 ) || currentAqs >(currentSetPointAqsMax+currentSetPointDelta/2) )bombaSolAqsState=0;
     c3c:	a7 01       	movw	r20, r14
     c3e:	96 01       	movw	r18, r12
     c40:	c3 01       	movw	r24, r6
     c42:	b2 01       	movw	r22, r4
     c44:	e9 d6       	rcall	.+3538   	; 0x1a18 <__subsf3>
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	c5 01       	movw	r24, r10
     c4c:	b4 01       	movw	r22, r8
     c4e:	49 d7       	rcall	.+3730   	; 0x1ae2 <__cmpsf2>
     c50:	88 23       	and	r24, r24
     c52:	3c f1       	brlt	.+78     	; 0xca2 <checkTempErrorPump3+0x13c>
     c54:	40 90 08 01 	lds	r4, 0x0108
     c58:	50 90 09 01 	lds	r5, 0x0109
     c5c:	60 90 0a 01 	lds	r6, 0x010A
     c60:	70 90 0b 01 	lds	r7, 0x010B
     c64:	a7 01       	movw	r20, r14
     c66:	96 01       	movw	r18, r12
     c68:	c3 01       	movw	r24, r6
     c6a:	b2 01       	movw	r22, r4
     c6c:	d5 d6       	rcall	.+3498   	; 0x1a18 <__subsf3>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	c5 01       	movw	r24, r10
     c74:	b4 01       	movw	r22, r8
     c76:	35 d7       	rcall	.+3690   	; 0x1ae2 <__cmpsf2>
     c78:	88 23       	and	r24, r24
     c7a:	9c f0       	brlt	.+38     	; 0xca2 <checkTempErrorPump3+0x13c>
     c7c:	20 91 f0 01 	lds	r18, 0x01F0
     c80:	30 91 f1 01 	lds	r19, 0x01F1
     c84:	40 91 f2 01 	lds	r20, 0x01F2
     c88:	50 91 f3 01 	lds	r21, 0x01F3
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	c4 d6       	rcall	.+3464   	; 0x1a1a <__addsf3>
     c92:	9b 01       	movw	r18, r22
     c94:	ac 01       	movw	r20, r24
     c96:	c3 01       	movw	r24, r6
     c98:	b2 01       	movw	r22, r4
     c9a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     c9e:	18 16       	cp	r1, r24
     ca0:	14 f4       	brge	.+4      	; 0xca6 <checkTempErrorPump3+0x140>
     ca2:	10 92 90 01 	sts	0x0190, r1
	
	return bombaSolAqsState;
}
     ca6:	80 91 90 01 	lds	r24, 0x0190
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	7f 90       	pop	r7
     cc8:	6f 90       	pop	r6
     cca:	5f 90       	pop	r5
     ccc:	4f 90       	pop	r4
     cce:	08 95       	ret

00000cd0 <setRecMinTemp>:


/************************************************************************/
/* @set rec val                                                                     */
/************************************************************************/
void setRecMinTemp(uint8_t val){
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
	
	if(val)	currentSetPointRecMin +=1.0;
     cd8:	88 23       	and	r24, r24
     cda:	b1 f0       	breq	.+44     	; 0xd08 <setRecMinTemp+0x38>
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e8       	ldi	r20, 0x80	; 128
     ce2:	5f e3       	ldi	r21, 0x3F	; 63
     ce4:	60 91 eb 01 	lds	r22, 0x01EB
     ce8:	70 91 ec 01 	lds	r23, 0x01EC
     cec:	80 91 ed 01 	lds	r24, 0x01ED
     cf0:	90 91 ee 01 	lds	r25, 0x01EE
     cf4:	92 d6       	rcall	.+3364   	; 0x1a1a <__addsf3>
     cf6:	60 93 eb 01 	sts	0x01EB, r22
     cfa:	70 93 ec 01 	sts	0x01EC, r23
     cfe:	80 93 ed 01 	sts	0x01ED, r24
     d02:	90 93 ee 01 	sts	0x01EE, r25
     d06:	15 c0       	rjmp	.+42     	; 0xd32 <setRecMinTemp+0x62>
	else currentSetPointRecMin-=1.0;
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e8       	ldi	r20, 0x80	; 128
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	60 91 eb 01 	lds	r22, 0x01EB
     d14:	70 91 ec 01 	lds	r23, 0x01EC
     d18:	80 91 ed 01 	lds	r24, 0x01ED
     d1c:	90 91 ee 01 	lds	r25, 0x01EE
     d20:	7b d6       	rcall	.+3318   	; 0x1a18 <__subsf3>
     d22:	60 93 eb 01 	sts	0x01EB, r22
     d26:	70 93 ec 01 	sts	0x01EC, r23
     d2a:	80 93 ed 01 	sts	0x01ED, r24
     d2e:	90 93 ee 01 	sts	0x01EE, r25
	if(currentSetPointRecMin >TEMP_UP_LIMIT) currentSetPointRecMin=TEMP_UP_LIMIT;
     d32:	c0 90 eb 01 	lds	r12, 0x01EB
     d36:	d0 90 ec 01 	lds	r13, 0x01EC
     d3a:	e0 90 ed 01 	lds	r14, 0x01ED
     d3e:	f0 90 ee 01 	lds	r15, 0x01EE
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	48 e4       	ldi	r20, 0x48	; 72
     d48:	53 e4       	ldi	r21, 0x43	; 67
     d4a:	c7 01       	movw	r24, r14
     d4c:	b6 01       	movw	r22, r12
     d4e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     d52:	18 16       	cp	r1, r24
     d54:	6c f4       	brge	.+26     	; 0xd70 <setRecMinTemp+0xa0>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a8 e4       	ldi	r26, 0x48	; 72
     d5c:	b3 e4       	ldi	r27, 0x43	; 67
     d5e:	80 93 eb 01 	sts	0x01EB, r24
     d62:	90 93 ec 01 	sts	0x01EC, r25
     d66:	a0 93 ed 01 	sts	0x01ED, r26
     d6a:	b0 93 ee 01 	sts	0x01EE, r27
     d6e:	15 c0       	rjmp	.+42     	; 0xd9a <setRecMinTemp+0xca>
	if(currentSetPointRecMin <TEMP_LOW_LIMIT)currentSetPointRecMin=TEMP_LOW_LIMIT;
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	48 e4       	ldi	r20, 0x48	; 72
     d76:	53 ec       	ldi	r21, 0xC3	; 195
     d78:	c7 01       	movw	r24, r14
     d7a:	b6 01       	movw	r22, r12
     d7c:	b2 d6       	rcall	.+3428   	; 0x1ae2 <__cmpsf2>
     d7e:	88 23       	and	r24, r24
     d80:	64 f4       	brge	.+24     	; 0xd9a <setRecMinTemp+0xca>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a8 e4       	ldi	r26, 0x48	; 72
     d88:	b3 ec       	ldi	r27, 0xC3	; 195
     d8a:	80 93 eb 01 	sts	0x01EB, r24
     d8e:	90 93 ec 01 	sts	0x01EC, r25
     d92:	a0 93 ed 01 	sts	0x01ED, r26
     d96:	b0 93 ee 01 	sts	0x01EE, r27
	
	
}
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	08 95       	ret

00000da4 <setAqsMaxTemp>:

/************************************************************************/
/* @set aqs max temp                                                                     */
/************************************************************************/
void setAqsMaxTemp(uint8_t val){
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
	
	if(val)	currentSetPointAqsMax +=TEMP_STEP;
     dac:	88 23       	and	r24, r24
     dae:	b1 f0       	breq	.+44     	; 0xddc <setAqsMaxTemp+0x38>
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e8       	ldi	r20, 0x80	; 128
     db6:	5f e3       	ldi	r21, 0x3F	; 63
     db8:	60 91 f0 01 	lds	r22, 0x01F0
     dbc:	70 91 f1 01 	lds	r23, 0x01F1
     dc0:	80 91 f2 01 	lds	r24, 0x01F2
     dc4:	90 91 f3 01 	lds	r25, 0x01F3
     dc8:	28 d6       	rcall	.+3152   	; 0x1a1a <__addsf3>
     dca:	60 93 f0 01 	sts	0x01F0, r22
     dce:	70 93 f1 01 	sts	0x01F1, r23
     dd2:	80 93 f2 01 	sts	0x01F2, r24
     dd6:	90 93 f3 01 	sts	0x01F3, r25
     dda:	15 c0       	rjmp	.+42     	; 0xe06 <setAqsMaxTemp+0x62>
	else currentSetPointAqsMax-=TEMP_STEP;
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e8       	ldi	r20, 0x80	; 128
     de2:	5f e3       	ldi	r21, 0x3F	; 63
     de4:	60 91 f0 01 	lds	r22, 0x01F0
     de8:	70 91 f1 01 	lds	r23, 0x01F1
     dec:	80 91 f2 01 	lds	r24, 0x01F2
     df0:	90 91 f3 01 	lds	r25, 0x01F3
     df4:	11 d6       	rcall	.+3106   	; 0x1a18 <__subsf3>
     df6:	60 93 f0 01 	sts	0x01F0, r22
     dfa:	70 93 f1 01 	sts	0x01F1, r23
     dfe:	80 93 f2 01 	sts	0x01F2, r24
     e02:	90 93 f3 01 	sts	0x01F3, r25
	if(currentSetPointAqsMax >TEMP_UP_LIMIT) currentSetPointAqsMax=TEMP_UP_LIMIT;
     e06:	c0 90 f0 01 	lds	r12, 0x01F0
     e0a:	d0 90 f1 01 	lds	r13, 0x01F1
     e0e:	e0 90 f2 01 	lds	r14, 0x01F2
     e12:	f0 90 f3 01 	lds	r15, 0x01F3
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	48 e4       	ldi	r20, 0x48	; 72
     e1c:	53 e4       	ldi	r21, 0x43	; 67
     e1e:	c7 01       	movw	r24, r14
     e20:	b6 01       	movw	r22, r12
     e22:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__gesf2>
     e26:	18 16       	cp	r1, r24
     e28:	6c f4       	brge	.+26     	; 0xe44 <setAqsMaxTemp+0xa0>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a8 e4       	ldi	r26, 0x48	; 72
     e30:	b3 e4       	ldi	r27, 0x43	; 67
     e32:	80 93 f0 01 	sts	0x01F0, r24
     e36:	90 93 f1 01 	sts	0x01F1, r25
     e3a:	a0 93 f2 01 	sts	0x01F2, r26
     e3e:	b0 93 f3 01 	sts	0x01F3, r27
     e42:	15 c0       	rjmp	.+42     	; 0xe6e <setAqsMaxTemp+0xca>
	if(currentSetPointAqsMax <TEMP_LOW_LIMIT)currentSetPointAqsMax=TEMP_LOW_LIMIT;
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	48 e4       	ldi	r20, 0x48	; 72
     e4a:	53 ec       	ldi	r21, 0xC3	; 195
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	48 d6       	rcall	.+3216   	; 0x1ae2 <__cmpsf2>
     e52:	88 23       	and	r24, r24
     e54:	64 f4       	brge	.+24     	; 0xe6e <setAqsMaxTemp+0xca>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a8 e4       	ldi	r26, 0x48	; 72
     e5c:	b3 ec       	ldi	r27, 0xC3	; 195
     e5e:	80 93 f0 01 	sts	0x01F0, r24
     e62:	90 93 f1 01 	sts	0x01F1, r25
     e66:	a0 93 f2 01 	sts	0x01F2, r26
     e6a:	b0 93 f3 01 	sts	0x01F3, r27
	
}
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	08 95       	ret

00000e78 <setRadMinTemp>:

/************************************************************************/
/* @set rad max temp                                                                     */
/************************************************************************/
void setRadMinTemp(uint8_t val){
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
	
	if(val)	currentSetPointRadMin +=TEMP_STEP;
     e80:	88 23       	and	r24, r24
     e82:	b1 f0       	breq	.+44     	; 0xeb0 <setRadMinTemp+0x38>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	60 91 e1 01 	lds	r22, 0x01E1
     e90:	70 91 e2 01 	lds	r23, 0x01E2
     e94:	80 91 e3 01 	lds	r24, 0x01E3
     e98:	90 91 e4 01 	lds	r25, 0x01E4
     e9c:	be d5       	rcall	.+2940   	; 0x1a1a <__addsf3>
     e9e:	60 93 e1 01 	sts	0x01E1, r22
     ea2:	70 93 e2 01 	sts	0x01E2, r23
     ea6:	80 93 e3 01 	sts	0x01E3, r24
     eaa:	90 93 e4 01 	sts	0x01E4, r25
     eae:	15 c0       	rjmp	.+42     	; 0xeda <setRadMinTemp+0x62>
	else currentSetPointRadMin-=TEMP_STEP;
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	60 91 e1 01 	lds	r22, 0x01E1
     ebc:	70 91 e2 01 	lds	r23, 0x01E2
     ec0:	80 91 e3 01 	lds	r24, 0x01E3
     ec4:	90 91 e4 01 	lds	r25, 0x01E4
     ec8:	a7 d5       	rcall	.+2894   	; 0x1a18 <__subsf3>
     eca:	60 93 e1 01 	sts	0x01E1, r22
     ece:	70 93 e2 01 	sts	0x01E2, r23
     ed2:	80 93 e3 01 	sts	0x01E3, r24
     ed6:	90 93 e4 01 	sts	0x01E4, r25
	if(currentSetPointRadMin >TEMP_UP_LIMIT) currentSetPointRadMin=TEMP_UP_LIMIT;
     eda:	c0 90 e1 01 	lds	r12, 0x01E1
     ede:	d0 90 e2 01 	lds	r13, 0x01E2
     ee2:	e0 90 e3 01 	lds	r14, 0x01E3
     ee6:	f0 90 e4 01 	lds	r15, 0x01E4
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	48 e4       	ldi	r20, 0x48	; 72
     ef0:	53 e4       	ldi	r21, 0x43	; 67
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	9a d7       	rcall	.+3892   	; 0x1e2c <__gesf2>
     ef8:	18 16       	cp	r1, r24
     efa:	6c f4       	brge	.+26     	; 0xf16 <setRadMinTemp+0x9e>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a8 e4       	ldi	r26, 0x48	; 72
     f02:	b3 e4       	ldi	r27, 0x43	; 67
     f04:	80 93 e1 01 	sts	0x01E1, r24
     f08:	90 93 e2 01 	sts	0x01E2, r25
     f0c:	a0 93 e3 01 	sts	0x01E3, r26
     f10:	b0 93 e4 01 	sts	0x01E4, r27
     f14:	15 c0       	rjmp	.+42     	; 0xf40 <setRadMinTemp+0xc8>
	if(currentSetPointRadMin <TEMP_LOW_LIMIT)currentSetPointRadMin=TEMP_LOW_LIMIT;
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	48 e4       	ldi	r20, 0x48	; 72
     f1c:	53 ec       	ldi	r21, 0xC3	; 195
     f1e:	c7 01       	movw	r24, r14
     f20:	b6 01       	movw	r22, r12
     f22:	df d5       	rcall	.+3006   	; 0x1ae2 <__cmpsf2>
     f24:	88 23       	and	r24, r24
     f26:	64 f4       	brge	.+24     	; 0xf40 <setRadMinTemp+0xc8>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a8 e4       	ldi	r26, 0x48	; 72
     f2e:	b3 ec       	ldi	r27, 0xC3	; 195
     f30:	80 93 e1 01 	sts	0x01E1, r24
     f34:	90 93 e2 01 	sts	0x01E2, r25
     f38:	a0 93 e3 01 	sts	0x01E3, r26
     f3c:	b0 93 e4 01 	sts	0x01E4, r27
	
	
}
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	08 95       	ret

00000f4a <setSolMinTemp>:

/************************************************************************/
/* @set Sol max temp                                                                     */
/************************************************************************/
void setSolMinTemp(uint8_t val){
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
	
	if(val)	currentSetPointSolMin +=TEMP_STEP;
     f52:	88 23       	and	r24, r24
     f54:	b1 f0       	breq	.+44     	; 0xf82 <setSolMinTemp+0x38>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	60 91 d3 01 	lds	r22, 0x01D3
     f62:	70 91 d4 01 	lds	r23, 0x01D4
     f66:	80 91 d5 01 	lds	r24, 0x01D5
     f6a:	90 91 d6 01 	lds	r25, 0x01D6
     f6e:	55 d5       	rcall	.+2730   	; 0x1a1a <__addsf3>
     f70:	60 93 d3 01 	sts	0x01D3, r22
     f74:	70 93 d4 01 	sts	0x01D4, r23
     f78:	80 93 d5 01 	sts	0x01D5, r24
     f7c:	90 93 d6 01 	sts	0x01D6, r25
     f80:	15 c0       	rjmp	.+42     	; 0xfac <setSolMinTemp+0x62>
	else currentSetPointSolMin-=TEMP_STEP;
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e8       	ldi	r20, 0x80	; 128
     f88:	5f e3       	ldi	r21, 0x3F	; 63
     f8a:	60 91 d3 01 	lds	r22, 0x01D3
     f8e:	70 91 d4 01 	lds	r23, 0x01D4
     f92:	80 91 d5 01 	lds	r24, 0x01D5
     f96:	90 91 d6 01 	lds	r25, 0x01D6
     f9a:	3e d5       	rcall	.+2684   	; 0x1a18 <__subsf3>
     f9c:	60 93 d3 01 	sts	0x01D3, r22
     fa0:	70 93 d4 01 	sts	0x01D4, r23
     fa4:	80 93 d5 01 	sts	0x01D5, r24
     fa8:	90 93 d6 01 	sts	0x01D6, r25
	if(currentSetPointSolMin >TEMP_UP_LIMIT) currentSetPointSolMin=TEMP_UP_LIMIT;
     fac:	c0 90 d3 01 	lds	r12, 0x01D3
     fb0:	d0 90 d4 01 	lds	r13, 0x01D4
     fb4:	e0 90 d5 01 	lds	r14, 0x01D5
     fb8:	f0 90 d6 01 	lds	r15, 0x01D6
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	48 e4       	ldi	r20, 0x48	; 72
     fc2:	53 e4       	ldi	r21, 0x43	; 67
     fc4:	c7 01       	movw	r24, r14
     fc6:	b6 01       	movw	r22, r12
     fc8:	31 d7       	rcall	.+3682   	; 0x1e2c <__gesf2>
     fca:	18 16       	cp	r1, r24
     fcc:	6c f4       	brge	.+26     	; 0xfe8 <setSolMinTemp+0x9e>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a8 e4       	ldi	r26, 0x48	; 72
     fd4:	b3 e4       	ldi	r27, 0x43	; 67
     fd6:	80 93 d3 01 	sts	0x01D3, r24
     fda:	90 93 d4 01 	sts	0x01D4, r25
     fde:	a0 93 d5 01 	sts	0x01D5, r26
     fe2:	b0 93 d6 01 	sts	0x01D6, r27
     fe6:	15 c0       	rjmp	.+42     	; 0x1012 <setSolMinTemp+0xc8>
	if(currentSetPointSolMin <TEMP_LOW_LIMIT)currentSetPointSolMin=TEMP_LOW_LIMIT;
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	48 e4       	ldi	r20, 0x48	; 72
     fee:	53 ec       	ldi	r21, 0xC3	; 195
     ff0:	c7 01       	movw	r24, r14
     ff2:	b6 01       	movw	r22, r12
     ff4:	76 d5       	rcall	.+2796   	; 0x1ae2 <__cmpsf2>
     ff6:	88 23       	and	r24, r24
     ff8:	64 f4       	brge	.+24     	; 0x1012 <setSolMinTemp+0xc8>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a8 e4       	ldi	r26, 0x48	; 72
    1000:	b3 ec       	ldi	r27, 0xC3	; 195
    1002:	80 93 d3 01 	sts	0x01D3, r24
    1006:	90 93 d4 01 	sts	0x01D4, r25
    100a:	a0 93 d5 01 	sts	0x01D5, r26
    100e:	b0 93 d6 01 	sts	0x01D6, r27
	
	
}
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	08 95       	ret

0000101c <setDeltaMinTemp>:
/************************************************************************/
/* @set Sol max temp                                                                     */
/************************************************************************/
void setDeltaMinTemp(uint8_t val){
	
	if(val)	currentSetPointDelta +=DELTA_STEP;
    101c:	88 23       	and	r24, r24
    101e:	b1 f0       	breq	.+44     	; 0x104c <setDeltaMinTemp+0x30>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	60 91 e5 01 	lds	r22, 0x01E5
    102c:	70 91 e6 01 	lds	r23, 0x01E6
    1030:	80 91 e7 01 	lds	r24, 0x01E7
    1034:	90 91 e8 01 	lds	r25, 0x01E8
    1038:	f0 d4       	rcall	.+2528   	; 0x1a1a <__addsf3>
    103a:	60 93 e5 01 	sts	0x01E5, r22
    103e:	70 93 e6 01 	sts	0x01E6, r23
    1042:	80 93 e7 01 	sts	0x01E7, r24
    1046:	90 93 e8 01 	sts	0x01E8, r25
    104a:	15 c0       	rjmp	.+42     	; 0x1076 <setDeltaMinTemp+0x5a>
	else currentSetPointDelta-=DELTA_STEP;
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e8       	ldi	r20, 0x80	; 128
    1052:	5f e3       	ldi	r21, 0x3F	; 63
    1054:	60 91 e5 01 	lds	r22, 0x01E5
    1058:	70 91 e6 01 	lds	r23, 0x01E6
    105c:	80 91 e7 01 	lds	r24, 0x01E7
    1060:	90 91 e8 01 	lds	r25, 0x01E8
    1064:	d9 d4       	rcall	.+2482   	; 0x1a18 <__subsf3>
    1066:	60 93 e5 01 	sts	0x01E5, r22
    106a:	70 93 e6 01 	sts	0x01E6, r23
    106e:	80 93 e7 01 	sts	0x01E7, r24
    1072:	90 93 e8 01 	sts	0x01E8, r25
	if(currentSetPointDelta<0.5) currentSetPointDelta=DELTA_STEP; // ensure always positive
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	60 91 e5 01 	lds	r22, 0x01E5
    1082:	70 91 e6 01 	lds	r23, 0x01E6
    1086:	80 91 e7 01 	lds	r24, 0x01E7
    108a:	90 91 e8 01 	lds	r25, 0x01E8
    108e:	29 d5       	rcall	.+2642   	; 0x1ae2 <__cmpsf2>
    1090:	88 23       	and	r24, r24
    1092:	64 f4       	brge	.+24     	; 0x10ac <setDeltaMinTemp+0x90>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 e8       	ldi	r26, 0x80	; 128
    109a:	bf e3       	ldi	r27, 0x3F	; 63
    109c:	80 93 e5 01 	sts	0x01E5, r24
    10a0:	90 93 e6 01 	sts	0x01E6, r25
    10a4:	a0 93 e7 01 	sts	0x01E7, r26
    10a8:	b0 93 e8 01 	sts	0x01E8, r27
    10ac:	08 95       	ret

000010ae <stateMachine>:


/************************************************************************/
/* @sate machine                                                                     */
/************************************************************************/
void stateMachine(uint8_t inCode){
    10ae:	cf 93       	push	r28
    10b0:	c8 2f       	mov	r28, r24
	//inCode &= 0x07; // ensure clean
	
	
	
	// Switch to the state
	switch (state){
    10b2:	40 91 93 01 	lds	r20, 0x0193
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	49 30       	cpi	r20, 0x09	; 9
    10ba:	51 05       	cpc	r21, r1
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <stateMachine+0x12>
    10be:	8e c0       	rjmp	.+284    	; 0x11dc <__stack+0xdd>
    10c0:	fa 01       	movw	r30, r20
    10c2:	ea 5b       	subi	r30, 0xBA	; 186
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__tablejump2__>
		
		case STATE_IDLE:
			#ifdef MAIN_DEBUG
			USART1_sendStr("IDLE\n\r");
			#endif
			LED_PROG_OFF;
    10ca:	e2 e6       	ldi	r30, 0x62	; 98
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	80 83       	st	Z, r24
			if(inCode == BUTTON_ENTER) state = STATE_PROGRAM_SETPOINT_REC;
    10d4:	c2 30       	cpi	r28, 0x02	; 2
    10d6:	09 f0       	breq	.+2      	; 0x10da <stateMachine+0x2c>
    10d8:	83 c0       	rjmp	.+262    	; 0x11e0 <__stack+0xe1>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 93 01 	sts	0x0193, r24
    10e0:	7f c0       	rjmp	.+254    	; 0x11e0 <__stack+0xe1>
		
		case STATE_PROGRAM_SETPOINT_REC:
			#ifdef MAIN_DEBUG
			USART1_sendStr("SETPOINT_REC\n\r");
			#endif
			LED_PROG_ON;
    10e2:	e2 e6       	ldi	r30, 0x62	; 98
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8d 7f       	andi	r24, 0xFD	; 253
    10ea:	80 83       	st	Z, r24
			if(inCode==BUTTON_UP)setRecMinTemp(1);
    10ec:	c3 30       	cpi	r28, 0x03	; 3
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <stateMachine+0x48>
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	ee dd       	rcall	.-1060   	; 0xcd0 <setRecMinTemp>
    10f4:	0b c0       	rjmp	.+22     	; 0x110c <__stack+0xd>
			if(inCode==BUTTON_DOWN)setRecMinTemp(0);
    10f6:	c4 30       	cpi	r28, 0x04	; 4
    10f8:	19 f4       	brne	.+6      	; 0x1100 <__stack+0x1>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	e9 dd       	rcall	.-1070   	; 0xcd0 <setRecMinTemp>
    10fe:	70 c0       	rjmp	.+224    	; 0x11e0 <__stack+0xe1>
			if(inCode==BUTTON_ENTER)state=STATE_PROGRAM_SETPOINT_AQS;
    1100:	c2 30       	cpi	r28, 0x02	; 2
    1102:	21 f4       	brne	.+8      	; 0x110c <__stack+0xd>
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	80 93 93 01 	sts	0x0193, r24
    110a:	6a c0       	rjmp	.+212    	; 0x11e0 <__stack+0xe1>
			if(inCode== BUTTON_ESC)state=STATE_SAVE;
    110c:	c1 30       	cpi	r28, 0x01	; 1
    110e:	09 f0       	breq	.+2      	; 0x1112 <__stack+0x13>
    1110:	67 c0       	rjmp	.+206    	; 0x11e0 <__stack+0xe1>
    1112:	88 e0       	ldi	r24, 0x08	; 8
    1114:	80 93 93 01 	sts	0x0193, r24
    1118:	63 c0       	rjmp	.+198    	; 0x11e0 <__stack+0xe1>
		
		case STATE_PROGRAM_SETPOINT_AQS:
			#ifdef MAIN_DEBUG
			USART1_sendStr("SETPOINT_AQS\n\r");
			#endif
			if(inCode==BUTTON_UP)setAqsMaxTemp(1);
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	19 f4       	brne	.+6      	; 0x1124 <__stack+0x25>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	41 de       	rcall	.-894    	; 0xda4 <setAqsMaxTemp>
    1122:	0b c0       	rjmp	.+22     	; 0x113a <__stack+0x3b>
			if(inCode==BUTTON_DOWN)setAqsMaxTemp(0);
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	19 f4       	brne	.+6      	; 0x112e <__stack+0x2f>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	3c de       	rcall	.-904    	; 0xda4 <setAqsMaxTemp>
    112c:	59 c0       	rjmp	.+178    	; 0x11e0 <__stack+0xe1>
			if(inCode==BUTTON_ENTER)state=STATE_PROGRAM_SETPOINT_RAD;
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	21 f4       	brne	.+8      	; 0x113a <__stack+0x3b>
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	80 93 93 01 	sts	0x0193, r24
    1138:	53 c0       	rjmp	.+166    	; 0x11e0 <__stack+0xe1>
			if(inCode== BUTTON_ESC)state=STATE_SAVE;
    113a:	c1 30       	cpi	r28, 0x01	; 1
    113c:	09 f0       	breq	.+2      	; 0x1140 <__stack+0x41>
    113e:	50 c0       	rjmp	.+160    	; 0x11e0 <__stack+0xe1>
    1140:	88 e0       	ldi	r24, 0x08	; 8
    1142:	80 93 93 01 	sts	0x0193, r24
    1146:	4c c0       	rjmp	.+152    	; 0x11e0 <__stack+0xe1>
		
		case STATE_PROGRAM_SETPOINT_RAD:
			#ifdef MAIN_DEBUG
			USART1_sendStr("SETPOINT_RAD\n\r");
			#endif
			if(inCode==BUTTON_UP)setRadMinTemp(1);
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	19 f4       	brne	.+6      	; 0x1152 <__stack+0x53>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	94 de       	rcall	.-728    	; 0xe78 <setRadMinTemp>
    1150:	0b c0       	rjmp	.+22     	; 0x1168 <__stack+0x69>
			if(inCode==BUTTON_DOWN)setRadMinTemp(0);
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	19 f4       	brne	.+6      	; 0x115c <__stack+0x5d>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	8f de       	rcall	.-738    	; 0xe78 <setRadMinTemp>
    115a:	42 c0       	rjmp	.+132    	; 0x11e0 <__stack+0xe1>
			if(inCode==BUTTON_ENTER)state=STATE_PROGRAM_SETPOINT_SOL;
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	21 f4       	brne	.+8      	; 0x1168 <__stack+0x69>
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	80 93 93 01 	sts	0x0193, r24
    1166:	3c c0       	rjmp	.+120    	; 0x11e0 <__stack+0xe1>
			if(inCode== BUTTON_ESC)state=STATE_SAVE;
    1168:	c1 30       	cpi	r28, 0x01	; 1
    116a:	d1 f5       	brne	.+116    	; 0x11e0 <__stack+0xe1>
    116c:	88 e0       	ldi	r24, 0x08	; 8
    116e:	80 93 93 01 	sts	0x0193, r24
    1172:	36 c0       	rjmp	.+108    	; 0x11e0 <__stack+0xe1>
		
		case STATE_PROGRAM_SETPOINT_SOL:
			#ifdef MAIN_DEBUG
			USART1_sendStr("SETPOINT_SOL\n\r");
			#endif
			if(inCode==BUTTON_UP)setSolMinTemp(1);
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	19 f4       	brne	.+6      	; 0x117e <__stack+0x7f>
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	e7 de       	rcall	.-562    	; 0xf4a <setSolMinTemp>
    117c:	0b c0       	rjmp	.+22     	; 0x1194 <__stack+0x95>
			if(inCode==BUTTON_DOWN)setSolMinTemp(0);
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	19 f4       	brne	.+6      	; 0x1188 <__stack+0x89>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	e2 de       	rcall	.-572    	; 0xf4a <setSolMinTemp>
    1186:	2c c0       	rjmp	.+88     	; 0x11e0 <__stack+0xe1>
			if(inCode==BUTTON_ENTER)state=STATE_SAVE;//STATE_PROGRAM_SETPOINT_DELTA;
    1188:	82 30       	cpi	r24, 0x02	; 2
    118a:	21 f4       	brne	.+8      	; 0x1194 <__stack+0x95>
    118c:	88 e0       	ldi	r24, 0x08	; 8
    118e:	80 93 93 01 	sts	0x0193, r24
    1192:	26 c0       	rjmp	.+76     	; 0x11e0 <__stack+0xe1>
			if(inCode== BUTTON_ESC)state=STATE_SAVE;
    1194:	c1 30       	cpi	r28, 0x01	; 1
    1196:	21 f5       	brne	.+72     	; 0x11e0 <__stack+0xe1>
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	80 93 93 01 	sts	0x0193, r24
    119e:	20 c0       	rjmp	.+64     	; 0x11e0 <__stack+0xe1>
		
		case STATE_PROGRAM_SETPOINT_DELTA:
			#ifdef MAIN_DEBUG
			USART1_sendStr("SETPOINT_SOL\n\r");
			#endif
			if(inCode==BUTTON_UP)setDeltaMinTemp(1);
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	19 f4       	brne	.+6      	; 0x11aa <__stack+0xab>
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	3a df       	rcall	.-396    	; 0x101c <setDeltaMinTemp>
    11a8:	0b c0       	rjmp	.+22     	; 0x11c0 <__stack+0xc1>
			if(inCode==BUTTON_DOWN)setDeltaMinTemp(0);
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <__stack+0xb5>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	35 df       	rcall	.-406    	; 0x101c <setDeltaMinTemp>
    11b2:	16 c0       	rjmp	.+44     	; 0x11e0 <__stack+0xe1>
			if(inCode==BUTTON_ENTER)state=STATE_SAVE;
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <__stack+0xc1>
    11b8:	88 e0       	ldi	r24, 0x08	; 8
    11ba:	80 93 93 01 	sts	0x0193, r24
    11be:	10 c0       	rjmp	.+32     	; 0x11e0 <__stack+0xe1>
			if(inCode== BUTTON_ESC)state=STATE_SAVE;
    11c0:	c1 30       	cpi	r28, 0x01	; 1
    11c2:	71 f4       	brne	.+28     	; 0x11e0 <__stack+0xe1>
    11c4:	88 e0       	ldi	r24, 0x08	; 8
    11c6:	80 93 93 01 	sts	0x0193, r24
    11ca:	0a c0       	rjmp	.+20     	; 0x11e0 <__stack+0xe1>
		
		case STATE_SAVE:
			#ifdef MAIN_DEBUG
			USART1_sendStr("SAVE\n\r");
			#endif
			flagSaveParametersEeprom++;
    11cc:	80 91 9b 01 	lds	r24, 0x019B
    11d0:	8f 5f       	subi	r24, 0xFF	; 255
    11d2:	80 93 9b 01 	sts	0x019B, r24
			//wait to be saved and exit
			state=STATE_IDLE;
    11d6:	10 92 93 01 	sts	0x0193, r1
		break;
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <__stack+0xe1>
		
		default:
		state=STATE_IDLE;
    11dc:	10 92 93 01 	sts	0x0193, r1
		break;
	}
}
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <readButtons>:
/************************************************************************/
/* @read the buttons and complement and clean                                                                     */
/************************************************************************/
uint8_t readButtons(void){

	return (~PINA) &0x0F; // read the low nibble
    11e4:	89 b3       	in	r24, 0x19	; 25
    11e6:	80 95       	com	r24
}
    11e8:	8f 70       	andi	r24, 0x0F	; 15
    11ea:	08 95       	ret

000011ec <decodeSwitchesStatus>:

#define PUMP1_CODE 1
#define PUMP2_CODE 2
#define PUMP3_CODE 4
void decodeSwitchesStatus(uint8_t val, uint8_t *pump1, uint8_t *pump2, uint8_t *pump3){
	if((val &PUMP1_CODE)>0)*pump1=1;
    11ec:	80 ff       	sbrs	r24, 0
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <decodeSwitchesStatus+0xc>
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	fb 01       	movw	r30, r22
    11f4:	90 83       	st	Z, r25
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <decodeSwitchesStatus+0x10>
	else *pump1=0;
    11f8:	fb 01       	movw	r30, r22
    11fa:	10 82       	st	Z, r1
	
	if((val & PUMP2_CODE)>0)*pump2=1;
    11fc:	81 ff       	sbrs	r24, 1
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <decodeSwitchesStatus+0x1c>
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	fa 01       	movw	r30, r20
    1204:	90 83       	st	Z, r25
    1206:	02 c0       	rjmp	.+4      	; 0x120c <decodeSwitchesStatus+0x20>
	else *pump2=0;
    1208:	fa 01       	movw	r30, r20
    120a:	10 82       	st	Z, r1
	
	if((val & PUMP3_CODE)>0)*pump3=1;
    120c:	82 ff       	sbrs	r24, 2
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <decodeSwitchesStatus+0x2c>
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	f9 01       	movw	r30, r18
    1214:	80 83       	st	Z, r24
    1216:	08 95       	ret
	else *pump3=0;
    1218:	f9 01       	movw	r30, r18
    121a:	10 82       	st	Z, r1
    121c:	08 95       	ret

0000121e <readSwitches>:
/************************************************************************/
/* @read the enable swichches                                                                     */
/************************************************************************/
uint8_t readSwitches(void){
	
	return ((~PINA) & 0xF0)>>4;
    121e:	89 b3       	in	r24, 0x19	; 25
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	80 95       	com	r24
    1224:	90 95       	com	r25
    1226:	80 7f       	andi	r24, 0xF0	; 240
    1228:	99 27       	eor	r25, r25
    122a:	95 95       	asr	r25
    122c:	87 95       	ror	r24
    122e:	95 95       	asr	r25
    1230:	87 95       	ror	r24
    1232:	95 95       	asr	r25
    1234:	87 95       	ror	r24
    1236:	95 95       	asr	r25
    1238:	87 95       	ror	r24
}
    123a:	08 95       	ret

0000123c <setOutputRelay>:
/* @set the output relay                                                                     */
/************************************************************************/
void setOutputRelay(uint8_t currentStatusPump1,uint8_t currentStatusPump2,uint8_t currentStatusPump3){
	
	// pump 1
	if(currentStatusPump1){
    123c:	88 23       	and	r24, r24
    123e:	49 f0       	breq	.+18     	; 0x1252 <setOutputRelay+0x16>
		RELAY_PUMP1_ON;
    1240:	e2 e6       	ldi	r30, 0x62	; 98
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 62       	ori	r24, 0x20	; 32
    1248:	80 83       	st	Z, r24
		LED_PUMP1_ON;
    124a:	80 81       	ld	r24, Z
    124c:	8b 7f       	andi	r24, 0xFB	; 251
    124e:	80 83       	st	Z, r24
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <setOutputRelay+0x26>
	}else{
		RELAY_PUMP1_OFF;
    1252:	e2 e6       	ldi	r30, 0x62	; 98
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8f 7d       	andi	r24, 0xDF	; 223
    125a:	80 83       	st	Z, r24
		LED_PUMP1_OFF;
    125c:	80 81       	ld	r24, Z
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	80 83       	st	Z, r24
	}
	
	// pump2
	if(currentStatusPump2){
    1262:	66 23       	and	r22, r22
    1264:	49 f0       	breq	.+18     	; 0x1278 <setOutputRelay+0x3c>
		RELAY_PUMP2_ON;
    1266:	e2 e6       	ldi	r30, 0x62	; 98
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 64       	ori	r24, 0x40	; 64
    126e:	80 83       	st	Z, r24
		LED_PUMP2_ON;
    1270:	80 81       	ld	r24, Z
    1272:	87 7f       	andi	r24, 0xF7	; 247
    1274:	80 83       	st	Z, r24
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <setOutputRelay+0x48>
		}else{
		RELAY_PUMP2_OFF;
    1278:	c6 98       	cbi	0x18, 6	; 24
		LED_PUMP2_OFF;
    127a:	e2 e6       	ldi	r30, 0x62	; 98
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	88 60       	ori	r24, 0x08	; 8
    1282:	80 83       	st	Z, r24
	}
	
	
	// pump2
	if(currentStatusPump3){
    1284:	44 23       	and	r20, r20
    1286:	49 f0       	breq	.+18     	; 0x129a <setOutputRelay+0x5e>
		RELAY_PUMP3_ON;
    1288:	e2 e6       	ldi	r30, 0x62	; 98
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 68       	ori	r24, 0x80	; 128
    1290:	80 83       	st	Z, r24
		LED_PUMP3_ON;
    1292:	80 81       	ld	r24, Z
    1294:	8f 7e       	andi	r24, 0xEF	; 239
    1296:	80 83       	st	Z, r24
    1298:	08 95       	ret
		}else{
		RELAY_PUMP3_OFF;
    129a:	e2 e6       	ldi	r30, 0x62	; 98
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8f 77       	andi	r24, 0x7F	; 127
    12a2:	80 83       	st	Z, r24
		LED_PUMP3_OFF;
    12a4:	80 81       	ld	r24, Z
    12a6:	80 61       	ori	r24, 0x10	; 16
    12a8:	80 83       	st	Z, r24
    12aa:	08 95       	ret

000012ac <initGPIO>:

/************************************************************************/
/* @init the gpio                                                                     */
/************************************************************************/
void initGPIO(void){
	DDRA = 0x00;
    12ac:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // enable pulls ups
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	8b bb       	out	0x1b, r24	; 27
	
	DDRF = 0b11111111;
    12b2:	80 93 61 00 	sts	0x0061, r24
	PORTF = 0x00;
    12b6:	10 92 62 00 	sts	0x0062, r1
    12ba:	08 95       	ret

000012bc <paramLoadDefaultParameters>:

/************************************************************************/
/* @load hardcodded default values                                                                     */
/************************************************************************/
void paramLoadDefaultParameters(void){
	currentSetPointRecMin = TEMP_REC_SET_MIN_DEFAULT;
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a0 e2       	ldi	r26, 0x20	; 32
    12c2:	b2 e4       	ldi	r27, 0x42	; 66
    12c4:	80 93 eb 01 	sts	0x01EB, r24
    12c8:	90 93 ec 01 	sts	0x01EC, r25
    12cc:	a0 93 ed 01 	sts	0x01ED, r26
    12d0:	b0 93 ee 01 	sts	0x01EE, r27
	currentSetPointAqsMax = TEMP_AQS_SET_MAX_DEFAULT;
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	64 eb       	ldi	r22, 0xB4	; 180
    12da:	72 e4       	ldi	r23, 0x42	; 66
    12dc:	40 93 f0 01 	sts	0x01F0, r20
    12e0:	50 93 f1 01 	sts	0x01F1, r21
    12e4:	60 93 f2 01 	sts	0x01F2, r22
    12e8:	70 93 f3 01 	sts	0x01F3, r23
	currentSetPointRadMin = TEMP_RADIATOR_MIN_DEFAULT;
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	68 e4       	ldi	r22, 0x48	; 72
    12f2:	72 e4       	ldi	r23, 0x42	; 66
    12f4:	40 93 e1 01 	sts	0x01E1, r20
    12f8:	50 93 e2 01 	sts	0x01E2, r21
    12fc:	60 93 e3 01 	sts	0x01E3, r22
    1300:	70 93 e4 01 	sts	0x01E4, r23
	currentSetPointSolMin = TEMP_SOLAR_SET_MIN_DEFAULT;
    1304:	80 93 d3 01 	sts	0x01D3, r24
    1308:	90 93 d4 01 	sts	0x01D4, r25
    130c:	a0 93 d5 01 	sts	0x01D5, r26
    1310:	b0 93 d6 01 	sts	0x01D6, r27
	
	currentSetPointDelta = TEMP_DELTA_DEFAULT; // equal for all
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e4       	ldi	r26, 0x40	; 64
    131a:	b0 e4       	ldi	r27, 0x40	; 64
    131c:	80 93 e5 01 	sts	0x01E5, r24
    1320:	90 93 e6 01 	sts	0x01E6, r25
    1324:	a0 93 e7 01 	sts	0x01E7, r26
    1328:	b0 93 e8 01 	sts	0x01E8, r27
    132c:	08 95       	ret

0000132e <eepromSetDefaultParameters>:

/************************************************************************/
/* @ set initial values to eeprom  if nothin there yet                                                                   */
/************************************************************************/
void eepromSetDefaultParameters(void){
	eestruct_var.initEeprom=1; // emprom init
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	80 93 f4 01 	sts	0x01F4, r24
	
	eestruct_var.setPointRecMinTemp = TEMP_REC_SET_MIN_DEFAULT;
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	60 e2       	ldi	r22, 0x20	; 32
    133a:	72 e4       	ldi	r23, 0x42	; 66
    133c:	40 93 f5 01 	sts	0x01F5, r20
    1340:	50 93 f6 01 	sts	0x01F6, r21
    1344:	60 93 f7 01 	sts	0x01F7, r22
    1348:	70 93 f8 01 	sts	0x01F8, r23
	eestruct_var.setPointAqsMaxTemp = TEMP_AQS_SET_MAX_DEFAULT;
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a4 eb       	ldi	r26, 0xB4	; 180
    1352:	b2 e4       	ldi	r27, 0x42	; 66
    1354:	80 93 f9 01 	sts	0x01F9, r24
    1358:	90 93 fa 01 	sts	0x01FA, r25
    135c:	a0 93 fb 01 	sts	0x01FB, r26
    1360:	b0 93 fc 01 	sts	0x01FC, r27
	eestruct_var.setPointRadMinTemp = TEMP_REC_SET_MIN_DEFAULT;
    1364:	40 93 fd 01 	sts	0x01FD, r20
    1368:	50 93 fe 01 	sts	0x01FE, r21
    136c:	60 93 ff 01 	sts	0x01FF, r22
    1370:	70 93 00 02 	sts	0x0200, r23
	eestruct_var.setPointSolarMinTemp = TEMP_AQS_SET_MAX_DEFAULT;
    1374:	80 93 01 02 	sts	0x0201, r24
    1378:	90 93 02 02 	sts	0x0202, r25
    137c:	a0 93 03 02 	sts	0x0203, r26
    1380:	b0 93 04 02 	sts	0x0204, r27
	
	eestruct_var.setPointDeltaTemp = TEMP_DELTA_DEFAULT;
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e4       	ldi	r26, 0x40	; 64
    138a:	b0 e4       	ldi	r27, 0x40	; 64
    138c:	80 93 05 02 	sts	0x0205, r24
    1390:	90 93 06 02 	sts	0x0206, r25
    1394:	a0 93 07 02 	sts	0x0207, r26
    1398:	b0 93 08 02 	sts	0x0208, r27
		
	
	
	eeprom_write_block((const void*)&eestruct_var,(void*)&eestruct_eemem,sizeof(eestruct_t));
    139c:	45 e1       	ldi	r20, 0x15	; 21
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	84 ef       	ldi	r24, 0xF4	; 244
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__eewr_block_m128>
    13ac:	08 95       	ret

000013ae <paramLoadFromEeprom>:
/* @ load eeprom saved values                                                                     */
/************************************************************************/
void paramLoadFromEeprom(void){
	//uint8_t temp=0;
	// read from emprom
	eeprom_read_block((void*)&eestruct_var, (const void*)&eestruct_eemem,sizeof(eestruct_t));
    13ae:	45 e1       	ldi	r20, 0x15	; 21
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	84 ef       	ldi	r24, 0xF4	; 244
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 c2 12 	call	0x2584	; 0x2584 <__eerd_block_m128>
	
	// test the fits field to check if it was written else use default and load
	if((eestruct_var.initEeprom &0xFF) ==0xFF){
    13be:	80 91 f4 01 	lds	r24, 0x01F4
    13c2:	8f 3f       	cpi	r24, 0xFF	; 255
    13c4:	19 f4       	brne	.+6      	; 0x13cc <paramLoadFromEeprom+0x1e>
		eepromSetDefaultParameters();
    13c6:	b3 df       	rcall	.-154    	; 0x132e <eepromSetDefaultParameters>
		paramLoadDefaultParameters();
    13c8:	79 cf       	rjmp	.-270    	; 0x12bc <paramLoadDefaultParameters>
    13ca:	08 95       	ret
		
	}
	else{
		// write to the global variables
		currentSetPointRecMin = eestruct_var.setPointRecMinTemp;
    13cc:	80 91 f5 01 	lds	r24, 0x01F5
    13d0:	90 91 f6 01 	lds	r25, 0x01F6
    13d4:	a0 91 f7 01 	lds	r26, 0x01F7
    13d8:	b0 91 f8 01 	lds	r27, 0x01F8
    13dc:	80 93 eb 01 	sts	0x01EB, r24
    13e0:	90 93 ec 01 	sts	0x01EC, r25
    13e4:	a0 93 ed 01 	sts	0x01ED, r26
    13e8:	b0 93 ee 01 	sts	0x01EE, r27
		currentSetPointAqsMax = eestruct_var.setPointAqsMaxTemp;
    13ec:	80 91 f9 01 	lds	r24, 0x01F9
    13f0:	90 91 fa 01 	lds	r25, 0x01FA
    13f4:	a0 91 fb 01 	lds	r26, 0x01FB
    13f8:	b0 91 fc 01 	lds	r27, 0x01FC
    13fc:	80 93 f0 01 	sts	0x01F0, r24
    1400:	90 93 f1 01 	sts	0x01F1, r25
    1404:	a0 93 f2 01 	sts	0x01F2, r26
    1408:	b0 93 f3 01 	sts	0x01F3, r27
		currentSetPointRadMin = eestruct_var.setPointRadMinTemp;
    140c:	80 91 fd 01 	lds	r24, 0x01FD
    1410:	90 91 fe 01 	lds	r25, 0x01FE
    1414:	a0 91 ff 01 	lds	r26, 0x01FF
    1418:	b0 91 00 02 	lds	r27, 0x0200
    141c:	80 93 e1 01 	sts	0x01E1, r24
    1420:	90 93 e2 01 	sts	0x01E2, r25
    1424:	a0 93 e3 01 	sts	0x01E3, r26
    1428:	b0 93 e4 01 	sts	0x01E4, r27
		currentSetPointSolMin = eestruct_var.setPointSolarMinTemp;
    142c:	80 91 01 02 	lds	r24, 0x0201
    1430:	90 91 02 02 	lds	r25, 0x0202
    1434:	a0 91 03 02 	lds	r26, 0x0203
    1438:	b0 91 04 02 	lds	r27, 0x0204
    143c:	80 93 d3 01 	sts	0x01D3, r24
    1440:	90 93 d4 01 	sts	0x01D4, r25
    1444:	a0 93 d5 01 	sts	0x01D5, r26
    1448:	b0 93 d6 01 	sts	0x01D6, r27
		

		currentSetPointDelta = eestruct_var.setPointDeltaTemp; // equal for all
    144c:	80 91 05 02 	lds	r24, 0x0205
    1450:	90 91 06 02 	lds	r25, 0x0206
    1454:	a0 91 07 02 	lds	r26, 0x0207
    1458:	b0 91 08 02 	lds	r27, 0x0208
    145c:	80 93 e5 01 	sts	0x01E5, r24
    1460:	90 93 e6 01 	sts	0x01E6, r25
    1464:	a0 93 e7 01 	sts	0x01E7, r26
    1468:	b0 93 e8 01 	sts	0x01E8, r27
    146c:	08 95       	ret

0000146e <paramSavetoEeprom>:
/************************************************************************/
/* @save current values to eerprom                                                                     */
/************************************************************************/
void paramSavetoEeprom(void){
	// save paramenetrs on the run
	eestruct_var.initEeprom=1; // emprom init
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	80 93 f4 01 	sts	0x01F4, r24
	
	eestruct_var.setPointRecMinTemp = currentSetPointRecMin;
    1474:	80 91 eb 01 	lds	r24, 0x01EB
    1478:	90 91 ec 01 	lds	r25, 0x01EC
    147c:	a0 91 ed 01 	lds	r26, 0x01ED
    1480:	b0 91 ee 01 	lds	r27, 0x01EE
    1484:	80 93 f5 01 	sts	0x01F5, r24
    1488:	90 93 f6 01 	sts	0x01F6, r25
    148c:	a0 93 f7 01 	sts	0x01F7, r26
    1490:	b0 93 f8 01 	sts	0x01F8, r27
	eestruct_var.setPointAqsMaxTemp = currentSetPointAqsMax;
    1494:	80 91 f0 01 	lds	r24, 0x01F0
    1498:	90 91 f1 01 	lds	r25, 0x01F1
    149c:	a0 91 f2 01 	lds	r26, 0x01F2
    14a0:	b0 91 f3 01 	lds	r27, 0x01F3
    14a4:	80 93 f9 01 	sts	0x01F9, r24
    14a8:	90 93 fa 01 	sts	0x01FA, r25
    14ac:	a0 93 fb 01 	sts	0x01FB, r26
    14b0:	b0 93 fc 01 	sts	0x01FC, r27
	eestruct_var.setPointRadMinTemp = currentSetPointRadMin;
    14b4:	80 91 e1 01 	lds	r24, 0x01E1
    14b8:	90 91 e2 01 	lds	r25, 0x01E2
    14bc:	a0 91 e3 01 	lds	r26, 0x01E3
    14c0:	b0 91 e4 01 	lds	r27, 0x01E4
    14c4:	80 93 fd 01 	sts	0x01FD, r24
    14c8:	90 93 fe 01 	sts	0x01FE, r25
    14cc:	a0 93 ff 01 	sts	0x01FF, r26
    14d0:	b0 93 00 02 	sts	0x0200, r27
	eestruct_var.setPointSolarMinTemp = currentSetPointSolMin;
    14d4:	80 91 d3 01 	lds	r24, 0x01D3
    14d8:	90 91 d4 01 	lds	r25, 0x01D4
    14dc:	a0 91 d5 01 	lds	r26, 0x01D5
    14e0:	b0 91 d6 01 	lds	r27, 0x01D6
    14e4:	80 93 01 02 	sts	0x0201, r24
    14e8:	90 93 02 02 	sts	0x0202, r25
    14ec:	a0 93 03 02 	sts	0x0203, r26
    14f0:	b0 93 04 02 	sts	0x0204, r27
	
	eestruct_var.setPointDeltaTemp = currentSetPointDelta;
    14f4:	80 91 e5 01 	lds	r24, 0x01E5
    14f8:	90 91 e6 01 	lds	r25, 0x01E6
    14fc:	a0 91 e7 01 	lds	r26, 0x01E7
    1500:	b0 91 e8 01 	lds	r27, 0x01E8
    1504:	80 93 05 02 	sts	0x0205, r24
    1508:	90 93 06 02 	sts	0x0206, r25
    150c:	a0 93 07 02 	sts	0x0207, r26
    1510:	b0 93 08 02 	sts	0x0208, r27
	
	// save block
	eeprom_write_block((const void*)&eestruct_var,(void*)&eestruct_eemem,sizeof(eestruct_t));
    1514:	45 e1       	ldi	r20, 0x15	; 21
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	84 ef       	ldi	r24, 0xF4	; 244
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__eewr_block_m128>
    1524:	08 95       	ret

00001526 <showLcdSplash>:
/************************************************************************/
/* @show initial splash                                                                     */
/************************************************************************/
void showLcdSplash(void){
	
	LCD_gotoXY(4,0);
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	ab d8       	rcall	.-3754   	; 0x682 <LCD_gotoXY>
	LCD_sendString("Room Control");
    152c:	86 e1       	ldi	r24, 0x16	; 22
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	8b d8       	rcall	.-3818   	; 0x648 <LCD_sendString>
	LCD_gotoXY(3,1);
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	a5 d8       	rcall	.-3766   	; 0x682 <LCD_gotoXY>
	LCD_sendString("Serafim Cunha");
    1538:	83 e2       	ldi	r24, 0x23	; 35
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	85 d8       	rcall	.-3830   	; 0x648 <LCD_sendString>
    153e:	2f ef       	ldi	r18, 0xFF	; 255
    1540:	87 ea       	ldi	r24, 0xA7	; 167
    1542:	91 e6       	ldi	r25, 0x61	; 97
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	80 40       	sbci	r24, 0x00	; 0
    1548:	90 40       	sbci	r25, 0x00	; 0
    154a:	e1 f7       	brne	.-8      	; 0x1544 <showLcdSplash+0x1e>
    154c:	00 c0       	rjmp	.+0      	; 0x154e <showLcdSplash+0x28>
    154e:	00 00       	nop
	_delay_ms(2000);
	LCD_clr();
    1550:	72 c8       	rjmp	.-3868   	; 0x636 <LCD_clr>
    1552:	08 95       	ret

00001554 <setLcdInitialFields>:
/************************************************************************/
/* @set lcd initail fields                                                                     */
/************************************************************************/
void setLcdInitialFields(void){

	LCD_clr();
    1554:	70 d8       	rcall	.-3872   	; 0x636 <LCD_clr>
	LCD_gotoXY(2,0);
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	93 d8       	rcall	.-3802   	; 0x682 <LCD_gotoXY>
	LCD_sendString("REC");
    155c:	81 e3       	ldi	r24, 0x31	; 49
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	73 d8       	rcall	.-3866   	; 0x648 <LCD_sendString>
	LCD_gotoXY(6,0);
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	86 e0       	ldi	r24, 0x06	; 6
    1566:	8d d8       	rcall	.-3814   	; 0x682 <LCD_gotoXY>
	LCD_sendString("AQS");
    1568:	85 e3       	ldi	r24, 0x35	; 53
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	6d d8       	rcall	.-3878   	; 0x648 <LCD_sendString>
	LCD_gotoXY(11,0);
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	8b e0       	ldi	r24, 0x0B	; 11
    1572:	87 d8       	rcall	.-3826   	; 0x682 <LCD_gotoXY>
	LCD_sendString("RAD");
    1574:	89 e3       	ldi	r24, 0x39	; 57
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	67 d8       	rcall	.-3890   	; 0x648 <LCD_sendString>
	LCD_gotoXY(16,0);
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	80 e1       	ldi	r24, 0x10	; 16
    157e:	81 d8       	rcall	.-3838   	; 0x682 <LCD_gotoXY>
	LCD_sendString("SOL");
    1580:	8d e3       	ldi	r24, 0x3D	; 61
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	61 d8       	rcall	.-3902   	; 0x648 <LCD_sendString>
	
	// 4 field filds
	LCD_gotoXY(0,3);
    1586:	63 e0       	ldi	r22, 0x03	; 3
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	7b d8       	rcall	.-3850   	; 0x682 <LCD_gotoXY>
	LCD_sendString("ST");
    158c:	81 e4       	ldi	r24, 0x41	; 65
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	5b d8       	rcall	.-3914   	; 0x648 <LCD_sendString>
	
	LCD_gotoXY(3,3);
    1592:	63 e0       	ldi	r22, 0x03	; 3
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	75 d8       	rcall	.-3862   	; 0x682 <LCD_gotoXY>
	LCD_sendString("1:");
    1598:	84 e4       	ldi	r24, 0x44	; 68
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	55 d8       	rcall	.-3926   	; 0x648 <LCD_sendString>
	LCD_gotoXY(9,3);
    159e:	63 e0       	ldi	r22, 0x03	; 3
    15a0:	89 e0       	ldi	r24, 0x09	; 9
    15a2:	6f d8       	rcall	.-3874   	; 0x682 <LCD_gotoXY>
	LCD_sendString("2:");
    15a4:	87 e4       	ldi	r24, 0x47	; 71
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	4f d8       	rcall	.-3938   	; 0x648 <LCD_sendString>
	
	LCD_gotoXY(15,3);
    15aa:	63 e0       	ldi	r22, 0x03	; 3
    15ac:	8f e0       	ldi	r24, 0x0F	; 15
    15ae:	69 d8       	rcall	.-3886   	; 0x682 <LCD_gotoXY>
	LCD_sendString("3:");
    15b0:	8a e4       	ldi	r24, 0x4A	; 74
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	49 c8       	rjmp	.-3950   	; 0x648 <LCD_sendString>
    15b6:	08 95       	ret

000015b8 <showLcdSavedMessage>:
/************************************************************************/
/* @show saved messsage on lcd                                                                      */
/************************************************************************/
void showLcdSavedMessage(void){
	
	LCD_clr();
    15b8:	3e d8       	rcall	.-3972   	; 0x636 <LCD_clr>
	LCD_gotoXY(7,0);
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	87 e0       	ldi	r24, 0x07	; 7
    15be:	61 d8       	rcall	.-3902   	; 0x682 <LCD_gotoXY>
	LCD_sendString("SAVED");
    15c0:	8d e4       	ldi	r24, 0x4D	; 77
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	41 d8       	rcall	.-3966   	; 0x648 <LCD_sendString>
	
	LCD_gotoXY(7,1);
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	87 e0       	ldi	r24, 0x07	; 7
    15ca:	5b d8       	rcall	.-3914   	; 0x682 <LCD_gotoXY>
	LCD_sendString("PARAMETERS");
    15cc:	83 e5       	ldi	r24, 0x53	; 83
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	3b d8       	rcall	.-3978   	; 0x648 <LCD_sendString>
    15d2:	2f ef       	ldi	r18, 0xFF	; 255
    15d4:	89 e6       	ldi	r24, 0x69	; 105
    15d6:	98 e1       	ldi	r25, 0x18	; 24
    15d8:	21 50       	subi	r18, 0x01	; 1
    15da:	80 40       	sbci	r24, 0x00	; 0
    15dc:	90 40       	sbci	r25, 0x00	; 0
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <showLcdSavedMessage+0x20>
    15e0:	00 c0       	rjmp	.+0      	; 0x15e2 <showLcdSavedMessage+0x2a>
    15e2:	00 00       	nop
    15e4:	08 95       	ret

000015e6 <splitDouble>:
}

/************************************************************************/
/* @ convert double two parts to print                                                                     */
/************************************************************************/
void splitDouble(double *d, int precision, int *intPart, int *decPart ){
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	ec 01       	movw	r28, r24
    1600:	7b 01       	movw	r14, r22
    1602:	6a 01       	movw	r12, r20
    1604:	89 01       	movw	r16, r18
	*intPart = (int)*d;
    1606:	68 81       	ld	r22, Y
    1608:	79 81       	ldd	r23, Y+1	; 0x01
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	9b 81       	ldd	r25, Y+3	; 0x03
    160e:	06 d3       	rcall	.+1548   	; 0x1c1c <__fixsfsi>
    1610:	4b 01       	movw	r8, r22
    1612:	5c 01       	movw	r10, r24
    1614:	f6 01       	movw	r30, r12
    1616:	71 83       	std	Z+1, r23	; 0x01
    1618:	60 83       	st	Z, r22
	*decPart = (int)( (*d - *intPart) *pow(10, precision) + 0.5);
    161a:	b7 01       	movw	r22, r14
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	2e d3       	rcall	.+1628   	; 0x1c82 <__floatsisf>
    1626:	9b 01       	movw	r18, r22
    1628:	ac 01       	movw	r20, r24
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e2       	ldi	r24, 0x20	; 32
    1630:	91 e4       	ldi	r25, 0x41	; 65
    1632:	18 d5       	rcall	.+2608   	; 0x2064 <pow>
    1634:	6b 01       	movw	r12, r22
    1636:	7c 01       	movw	r14, r24
    1638:	b4 01       	movw	r22, r8
    163a:	88 27       	eor	r24, r24
    163c:	77 fd       	sbrc	r23, 7
    163e:	80 95       	com	r24
    1640:	98 2f       	mov	r25, r24
    1642:	1f d3       	rcall	.+1598   	; 0x1c82 <__floatsisf>
    1644:	9b 01       	movw	r18, r22
    1646:	ac 01       	movw	r20, r24
    1648:	68 81       	ld	r22, Y
    164a:	79 81       	ldd	r23, Y+1	; 0x01
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	9b 81       	ldd	r25, Y+3	; 0x03
    1650:	e3 d1       	rcall	.+966    	; 0x1a18 <__subsf3>
    1652:	a7 01       	movw	r20, r14
    1654:	96 01       	movw	r18, r12
    1656:	a3 d4       	rcall	.+2374   	; 0x1f9e <__mulsf3>
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	dc d1       	rcall	.+952    	; 0x1a1a <__addsf3>
    1662:	dc d2       	rcall	.+1464   	; 0x1c1c <__fixsfsi>
    1664:	f8 01       	movw	r30, r16
    1666:	71 83       	std	Z+1, r23	; 0x01
    1668:	60 83       	st	Z, r22
	
}
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	bf 90       	pop	r11
    167c:	af 90       	pop	r10
    167e:	9f 90       	pop	r9
    1680:	8f 90       	pop	r8
    1682:	08 95       	ret

00001684 <updateLcd>:

/************************************************************************/
/* @update lcd with current vars                                                                     */
/************************************************************************/
void updateLcd(void){
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	a4 97       	sbiw	r28, 0x24	; 36
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	int integerPart[4];
	int decimalPart[4];
	// RELAY
	LCD_gotoXY(5,3);
    16a0:	63 e0       	ldi	r22, 0x03	; 3
    16a2:	85 e0       	ldi	r24, 0x05	; 5
    16a4:	0e 94 41 03 	call	0x682	; 0x682 <LCD_gotoXY>
	if(pump1En)LCD_sendString("ON ");
    16a8:	80 91 ef 01 	lds	r24, 0x01EF
    16ac:	88 23       	and	r24, r24
    16ae:	29 f0       	breq	.+10     	; 0x16ba <updateLcd+0x36>
    16b0:	8e e5       	ldi	r24, 0x5E	; 94
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	0e 94 24 03 	call	0x648	; 0x648 <LCD_sendString>
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <updateLcd+0x3e>
	else LCD_sendString("OFF");
    16ba:	82 e6       	ldi	r24, 0x62	; 98
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	0e 94 24 03 	call	0x648	; 0x648 <LCD_sendString>
	
	LCD_gotoXY(11,3);
    16c2:	63 e0       	ldi	r22, 0x03	; 3
    16c4:	8b e0       	ldi	r24, 0x0B	; 11
    16c6:	0e 94 41 03 	call	0x682	; 0x682 <LCD_gotoXY>
	if(pump2En)LCD_sendString("ON ");
    16ca:	80 91 e9 01 	lds	r24, 0x01E9
    16ce:	88 23       	and	r24, r24
    16d0:	29 f0       	breq	.+10     	; 0x16dc <updateLcd+0x58>
    16d2:	8e e5       	ldi	r24, 0x5E	; 94
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 24 03 	call	0x648	; 0x648 <LCD_sendString>
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <updateLcd+0x60>
	else LCD_sendString("OFF");
    16dc:	82 e6       	ldi	r24, 0x62	; 98
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	0e 94 24 03 	call	0x648	; 0x648 <LCD_sendString>
	
	LCD_gotoXY(17,3);
    16e4:	63 e0       	ldi	r22, 0x03	; 3
    16e6:	81 e1       	ldi	r24, 0x11	; 17
    16e8:	0e 94 41 03 	call	0x682	; 0x682 <LCD_gotoXY>
	if(pump3En)LCD_sendString("ON ");
    16ec:	80 91 ea 01 	lds	r24, 0x01EA
    16f0:	88 23       	and	r24, r24
    16f2:	29 f0       	breq	.+10     	; 0x16fe <updateLcd+0x7a>
    16f4:	8e e5       	ldi	r24, 0x5E	; 94
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	0e 94 24 03 	call	0x648	; 0x648 <LCD_sendString>
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <updateLcd+0x82>
	else LCD_sendString("OFF");
    16fe:	82 e6       	ldi	r24, 0x62	; 98
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	0e 94 24 03 	call	0x648	; 0x648 <LCD_sendString>
	
	
	// current temp
	LCD_gotoXY(0,1);
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	0e 94 41 03 	call	0x682	; 0x682 <LCD_gotoXY>
	splitDouble(&currentRec,1,&integerPart[0],&decimalPart[0]);
    170e:	9e 01       	movw	r18, r28
    1710:	23 5e       	subi	r18, 0xE3	; 227
    1712:	3f 4f       	sbci	r19, 0xFF	; 255
    1714:	ae 01       	movw	r20, r28
    1716:	4b 5e       	subi	r20, 0xEB	; 235
    1718:	5f 4f       	sbci	r21, 0xFF	; 255
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	8c e0       	ldi	r24, 0x0C	; 12
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	61 df       	rcall	.-318    	; 0x15e6 <splitDouble>
	splitDouble(&currentAqs,1,&integerPart[1],&decimalPart[1]);		
    1724:	9e 01       	movw	r18, r28
    1726:	21 5e       	subi	r18, 0xE1	; 225
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
    172a:	ae 01       	movw	r20, r28
    172c:	49 5e       	subi	r20, 0xE9	; 233
    172e:	5f 4f       	sbci	r21, 0xFF	; 255
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	88 e0       	ldi	r24, 0x08	; 8
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	56 df       	rcall	.-340    	; 0x15e6 <splitDouble>
	splitDouble(&currentRad,1,&integerPart[2],&decimalPart[2]);
    173a:	9e 01       	movw	r18, r28
    173c:	2f 5d       	subi	r18, 0xDF	; 223
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	ae 01       	movw	r20, r28
    1742:	47 5e       	subi	r20, 0xE7	; 231
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	84 e0       	ldi	r24, 0x04	; 4
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	4b df       	rcall	.-362    	; 0x15e6 <splitDouble>
	splitDouble(&currentSol,1,&integerPart[3],&decimalPart[3]);
    1750:	9e 01       	movw	r18, r28
    1752:	2d 5d       	subi	r18, 0xDD	; 221
    1754:	3f 4f       	sbci	r19, 0xFF	; 255
    1756:	ae 01       	movw	r20, r28
    1758:	45 5e       	subi	r20, 0xE5	; 229
    175a:	5f 4f       	sbci	r21, 0xFF	; 255
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	40 df       	rcall	.-384    	; 0x15e6 <splitDouble>
	
	sprintf(buffer,"%2d.%1d %2d.%1d %2d.%1d %2d.%1d",integerPart[0], decimalPart[0],integerPart[1], decimalPart[1],integerPart[2], decimalPart[2],integerPart[3], decimalPart[3]);
    1766:	8c a1       	ldd	r24, Y+36	; 0x24
    1768:	8f 93       	push	r24
    176a:	8b a1       	ldd	r24, Y+35	; 0x23
    176c:	8f 93       	push	r24
    176e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1770:	8f 93       	push	r24
    1772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1774:	8f 93       	push	r24
    1776:	8a a1       	ldd	r24, Y+34	; 0x22
    1778:	8f 93       	push	r24
    177a:	89 a1       	ldd	r24, Y+33	; 0x21
    177c:	8f 93       	push	r24
    177e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1780:	8f 93       	push	r24
    1782:	89 8d       	ldd	r24, Y+25	; 0x19
    1784:	8f 93       	push	r24
    1786:	88 a1       	ldd	r24, Y+32	; 0x20
    1788:	8f 93       	push	r24
    178a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    178c:	8f 93       	push	r24
    178e:	88 8d       	ldd	r24, Y+24	; 0x18
    1790:	8f 93       	push	r24
    1792:	8f 89       	ldd	r24, Y+23	; 0x17
    1794:	8f 93       	push	r24
    1796:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1798:	8f 93       	push	r24
    179a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179c:	8f 93       	push	r24
    179e:	8e 89       	ldd	r24, Y+22	; 0x16
    17a0:	8f 93       	push	r24
    17a2:	8d 89       	ldd	r24, Y+21	; 0x15
    17a4:	8f 93       	push	r24
    17a6:	0f 2e       	mov	r0, r31
    17a8:	f6 e6       	ldi	r31, 0x66	; 102
    17aa:	ef 2e       	mov	r14, r31
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
    17ae:	ff 2e       	mov	r15, r31
    17b0:	f0 2d       	mov	r31, r0
    17b2:	ff 92       	push	r15
    17b4:	ef 92       	push	r14
    17b6:	8e 01       	movw	r16, r28
    17b8:	0f 5f       	subi	r16, 0xFF	; 255
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	1f 93       	push	r17
    17be:	0f 93       	push	r16
    17c0:	c5 d4       	rcall	.+2442   	; 0x214c <sprintf>
	LCD_sendString(buffer);
    17c2:	c8 01       	movw	r24, r16
    17c4:	0e 94 24 03 	call	0x648	; 0x648 <LCD_sendString>
	
	
	// setpoints
	LCD_gotoXY(0,2);
    17c8:	62 e0       	ldi	r22, 0x02	; 2
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	0e 94 41 03 	call	0x682	; 0x682 <LCD_gotoXY>
	splitDouble(&currentSetPointRecMin,1,&integerPart[0],&decimalPart[0]);
    17d0:	9e 01       	movw	r18, r28
    17d2:	23 5e       	subi	r18, 0xE3	; 227
    17d4:	3f 4f       	sbci	r19, 0xFF	; 255
    17d6:	ae 01       	movw	r20, r28
    17d8:	4b 5e       	subi	r20, 0xEB	; 235
    17da:	5f 4f       	sbci	r21, 0xFF	; 255
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	8b ee       	ldi	r24, 0xEB	; 235
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	00 df       	rcall	.-512    	; 0x15e6 <splitDouble>
	splitDouble(&currentSetPointAqsMax,1,&integerPart[1],&decimalPart[1]);
    17e6:	9e 01       	movw	r18, r28
    17e8:	21 5e       	subi	r18, 0xE1	; 225
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	ae 01       	movw	r20, r28
    17ee:	49 5e       	subi	r20, 0xE9	; 233
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	80 ef       	ldi	r24, 0xF0	; 240
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	f5 de       	rcall	.-534    	; 0x15e6 <splitDouble>
	splitDouble(&currentSetPointRadMin,1,&integerPart[2],&decimalPart[2]);
    17fc:	9e 01       	movw	r18, r28
    17fe:	2f 5d       	subi	r18, 0xDF	; 223
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	ae 01       	movw	r20, r28
    1804:	47 5e       	subi	r20, 0xE7	; 231
    1806:	5f 4f       	sbci	r21, 0xFF	; 255
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	81 ee       	ldi	r24, 0xE1	; 225
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	ea de       	rcall	.-556    	; 0x15e6 <splitDouble>
	splitDouble(&currentSetPointSolMin,1,&integerPart[3],&decimalPart[3]);
    1812:	9e 01       	movw	r18, r28
    1814:	2d 5d       	subi	r18, 0xDD	; 221
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	ae 01       	movw	r20, r28
    181a:	45 5e       	subi	r20, 0xE5	; 229
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	83 ed       	ldi	r24, 0xD3	; 211
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	df de       	rcall	.-578    	; 0x15e6 <splitDouble>
	
	sprintf(buffer,"%2d.%1d %2d.%1d %2d.%1d %2d.%1d",integerPart[0], decimalPart[0],integerPart[1], decimalPart[1],integerPart[2], decimalPart[2],integerPart[3], decimalPart[3]);
    1828:	8c a1       	ldd	r24, Y+36	; 0x24
    182a:	8f 93       	push	r24
    182c:	8b a1       	ldd	r24, Y+35	; 0x23
    182e:	8f 93       	push	r24
    1830:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1832:	8f 93       	push	r24
    1834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1836:	8f 93       	push	r24
    1838:	8a a1       	ldd	r24, Y+34	; 0x22
    183a:	8f 93       	push	r24
    183c:	89 a1       	ldd	r24, Y+33	; 0x21
    183e:	8f 93       	push	r24
    1840:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1842:	8f 93       	push	r24
    1844:	89 8d       	ldd	r24, Y+25	; 0x19
    1846:	8f 93       	push	r24
    1848:	88 a1       	ldd	r24, Y+32	; 0x20
    184a:	8f 93       	push	r24
    184c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    184e:	8f 93       	push	r24
    1850:	88 8d       	ldd	r24, Y+24	; 0x18
    1852:	8f 93       	push	r24
    1854:	8f 89       	ldd	r24, Y+23	; 0x17
    1856:	8f 93       	push	r24
    1858:	8e 8d       	ldd	r24, Y+30	; 0x1e
    185a:	8f 93       	push	r24
    185c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185e:	8f 93       	push	r24
    1860:	8e 89       	ldd	r24, Y+22	; 0x16
    1862:	8f 93       	push	r24
    1864:	8d 89       	ldd	r24, Y+21	; 0x15
    1866:	8f 93       	push	r24
    1868:	ff 92       	push	r15
    186a:	ef 92       	push	r14
    186c:	1f 93       	push	r17
    186e:	0f 93       	push	r16
    1870:	6d d4       	rcall	.+2266   	; 0x214c <sprintf>
	LCD_sendString(buffer);
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	c8 01       	movw	r24, r16
    187e:	0e 94 24 03 	call	0x648	; 0x648 <LCD_sendString>
	
	

}
    1882:	a4 96       	adiw	r28, 0x24	; 36
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	ff 90       	pop	r15
    1898:	ef 90       	pop	r14
    189a:	08 95       	ret

0000189c <readTemperatures>:

/************************************************************************/
/* @read temperatures                                                                     */
/************************************************************************/
void readTemperatures(void){
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
	static aqs;
	if(currentAqs <40.0){
    18a4:	c0 90 08 01 	lds	r12, 0x0108
    18a8:	d0 90 09 01 	lds	r13, 0x0109
    18ac:	e0 90 0a 01 	lds	r14, 0x010A
    18b0:	f0 90 0b 01 	lds	r15, 0x010B
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e2       	ldi	r20, 0x20	; 32
    18ba:	52 e4       	ldi	r21, 0x42	; 66
    18bc:	c7 01       	movw	r24, r14
    18be:	b6 01       	movw	r22, r12
    18c0:	10 d1       	rcall	.+544    	; 0x1ae2 <__cmpsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	3c f4       	brge	.+14     	; 0x18d4 <readTemperatures+0x38>
		aqs =1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	90 93 8f 01 	sts	0x018F, r25
    18ce:	80 93 8e 01 	sts	0x018E, r24
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <readTemperatures+0x60>
	}else if(currentAqs>95.0) aqs=0;
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4e eb       	ldi	r20, 0xBE	; 190
    18da:	52 e4       	ldi	r21, 0x42	; 66
    18dc:	c7 01       	movw	r24, r14
    18de:	b6 01       	movw	r22, r12
    18e0:	a5 d2       	rcall	.+1354   	; 0x1e2c <__gesf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <readTemperatures+0x54>
    18e6:	10 92 8f 01 	sts	0x018F, r1
    18ea:	10 92 8e 01 	sts	0x018E, r1
    18ee:	16 c0       	rjmp	.+44     	; 0x191c <readTemperatures+0x80>
	
	if(aqs)currentAqs+=1.0;
    18f0:	80 91 8e 01 	lds	r24, 0x018E
    18f4:	90 91 8f 01 	lds	r25, 0x018F
    18f8:	89 2b       	or	r24, r25
    18fa:	81 f0       	breq	.+32     	; 0x191c <readTemperatures+0x80>
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	c7 01       	movw	r24, r14
    1906:	b6 01       	movw	r22, r12
    1908:	88 d0       	rcall	.+272    	; 0x1a1a <__addsf3>
    190a:	60 93 08 01 	sts	0x0108, r22
    190e:	70 93 09 01 	sts	0x0109, r23
    1912:	80 93 0a 01 	sts	0x010A, r24
    1916:	90 93 0b 01 	sts	0x010B, r25
    191a:	0f c0       	rjmp	.+30     	; 0x193a <readTemperatures+0x9e>
	else currentAqs -=1.0;
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	c7 01       	movw	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	77 d0       	rcall	.+238    	; 0x1a18 <__subsf3>
    192a:	60 93 08 01 	sts	0x0108, r22
    192e:	70 93 09 01 	sts	0x0109, r23
    1932:	80 93 0a 01 	sts	0x010A, r24
    1936:	90 93 0b 01 	sts	0x010B, r25
	}else if(currentSol>80.0) sol=0;
	
	if(aqs)currentSol+=1.0;
	else currentSol -=1.0;
	*/
}
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	08 95       	ret

00001944 <main>:


int main(void){
    
	initGPIO();
    1944:	b3 dc       	rcall	.-1690   	; 0x12ac <initGPIO>
	LCD_init();
    1946:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_init>
	
	showLcdSplash();
    194a:	ed dd       	rcall	.-1062   	; 0x1526 <showLcdSplash>
	setLcdInitialFields();
    194c:	03 de       	rcall	.-1018   	; 0x1554 <setLcdInitialFields>
	paramLoadFromEeprom();
    194e:	2f dd       	rcall	.-1442   	; 0x13ae <paramLoadFromEeprom>
	
	USART1_config(USART1_MY_UBBRN,USART_DATA_FORMAT_8BITS|USART_STOP_BITS_1,USART_TRANSMIT_ENABLE|USART_RECEIVE_ENABLE| USART_INTERRUPT_ENABLE);
    1950:	48 e9       	ldi	r20, 0x98	; 152
    1952:	66 e0       	ldi	r22, 0x06	; 6
    1954:	80 e1       	ldi	r24, 0x10	; 16
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 c6 03 	call	0x78c	; 0x78c <USART1_config>
	
	USART1_sendStr("Hello");
    195c:	86 e8       	ldi	r24, 0x86	; 134
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	0e 94 d7 03 	call	0x7ae	; 0x7ae <USART1_sendStr>
	
	schedulerInit();
    1964:	0e 94 13 04 	call	0x826	; 0x826 <schedulerInit>
	
	// check for the default values
	
	sei(); //enable interrups
    1968:	78 94       	sei
		
		
		// cintrol zone
		if(flagTaskControl){
			
			LED_RUN_ON;
    196a:	c2 e6       	ldi	r28, 0x62	; 98
    196c:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1){
		
		
		// cintrol zone
		if(flagTaskControl){
    196e:	80 91 9c 01 	lds	r24, 0x019C
    1972:	88 23       	and	r24, r24
    1974:	91 f1       	breq	.+100    	; 0x19da <main+0x96>
			
			LED_RUN_ON;
    1976:	88 81       	ld	r24, Y
    1978:	8e 7f       	andi	r24, 0xFE	; 254
    197a:	88 83       	st	Y, r24
			readTemperatures();
    197c:	8f df       	rcall	.-226    	; 0x189c <readTemperatures>
    197e:	2f ef       	ldi	r18, 0xFF	; 255
    1980:	80 e7       	ldi	r24, 0x70	; 112
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	21 50       	subi	r18, 0x01	; 1
    1986:	80 40       	sbci	r24, 0x00	; 0
    1988:	90 40       	sbci	r25, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <main+0x40>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <main+0x4a>
    198e:	00 00       	nop
			//currentTemp -=1.0;
			_delay_ms(50);
			LED_RUN_OFF;
    1990:	88 81       	ld	r24, Y
    1992:	81 60       	ori	r24, 0x01	; 1
    1994:	88 83       	st	Y, r24
			
			
			
			uint8_t switchesVal = readSwitches();
    1996:	43 dc       	rcall	.-1914   	; 0x121e <readSwitches>
			
			
			decodeSwitchesStatus(switchesVal, &pump1En, &pump2En, &pump3En);
    1998:	2a ee       	ldi	r18, 0xEA	; 234
    199a:	31 e0       	ldi	r19, 0x01	; 1
    199c:	49 ee       	ldi	r20, 0xE9	; 233
    199e:	51 e0       	ldi	r21, 0x01	; 1
    19a0:	6f ee       	ldi	r22, 0xEF	; 239
    19a2:	71 e0       	ldi	r23, 0x01	; 1
    19a4:	23 dc       	rcall	.-1978   	; 0x11ec <decodeSwitchesStatus>
			
			currentStatusPump1 = checkTempErrorPump1()&pump1En; // chec the out
    19a6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <checkTempErrorPump1>
    19aa:	90 91 ef 01 	lds	r25, 0x01EF
    19ae:	89 23       	and	r24, r25
    19b0:	80 93 9a 01 	sts	0x019A, r24
			currentStatusPump2 = checkTempErrorPump2()&pump2En;
    19b4:	5e d8       	rcall	.-3908   	; 0xa72 <checkTempErrorPump2>
    19b6:	90 91 e9 01 	lds	r25, 0x01E9
    19ba:	89 23       	and	r24, r25
    19bc:	80 93 99 01 	sts	0x0199, r24
			currentStatusPump3 = checkTempErrorPump3()&pump3En;
    19c0:	d2 d8       	rcall	.-3676   	; 0xb66 <checkTempErrorPump3>
    19c2:	40 91 ea 01 	lds	r20, 0x01EA
    19c6:	48 23       	and	r20, r24
    19c8:	40 93 98 01 	sts	0x0198, r20
			
			
			setOutputRelay(currentStatusPump1,currentStatusPump2,currentStatusPump3);
    19cc:	60 91 99 01 	lds	r22, 0x0199
    19d0:	80 91 9a 01 	lds	r24, 0x019A
    19d4:	33 dc       	rcall	.-1946   	; 0x123c <setOutputRelay>
			flagTaskControl=0;
    19d6:	10 92 9c 01 	sts	0x019C, r1
		}
		
		// user bottons area
		if(flagTaskReadButtons){
    19da:	80 91 9e 01 	lds	r24, 0x019E
    19de:	88 23       	and	r24, r24
    19e0:	41 f0       	breq	.+16     	; 0x19f2 <main+0xae>
			uint8_t portVal = readButtons();
    19e2:	00 dc       	rcall	.-2048   	; 0x11e4 <readButtons>
			uint8_t code = decodeButton(portVal);
    19e4:	0e 94 1f 04 	call	0x83e	; 0x83e <decodeButton>
			code = debounceKey(code);
    19e8:	0e 94 35 04 	call	0x86a	; 0x86a <debounceKey>
			#ifdef MAIN_DEBUG
			sprintf(debugBuffer,"Key %d",code);
			USART1_sendStr(debugBuffer);
			#endif
			
			stateMachine(code); // go to machine
    19ec:	60 db       	rcall	.-2368   	; 0x10ae <stateMachine>
			
			flagTaskReadButtons=0;
    19ee:	10 92 9e 01 	sts	0x019E, r1
		}
		
		
		// lcd update area
		if(flagTaskUpdateLcd){
    19f2:	80 91 9d 01 	lds	r24, 0x019D
    19f6:	88 23       	and	r24, r24
    19f8:	19 f0       	breq	.+6      	; 0x1a00 <main+0xbc>
			
			//showLcdSavedMessage();
			updateLcd(); // update the lcd
    19fa:	44 de       	rcall	.-888    	; 0x1684 <updateLcd>
			
			flagTaskUpdateLcd=0;
    19fc:	10 92 9d 01 	sts	0x019D, r1
		}
		
		// save to eeprom
		if(flagSaveParametersEeprom){
    1a00:	80 91 9b 01 	lds	r24, 0x019B
    1a04:	88 23       	and	r24, r24
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <main+0xc6>
    1a08:	b2 cf       	rjmp	.-156    	; 0x196e <main+0x2a>
			
			paramSavetoEeprom(); // save value sto eeprom
    1a0a:	31 dd       	rcall	.-1438   	; 0x146e <paramSavetoEeprom>
			showLcdSavedMessage();
    1a0c:	d5 dd       	rcall	.-1110   	; 0x15b8 <showLcdSavedMessage>
			setLcdInitialFields();
    1a0e:	a2 dd       	rcall	.-1212   	; 0x1554 <setLcdInitialFields>
			updateLcd();
    1a10:	39 de       	rcall	.-910    	; 0x1684 <updateLcd>
			flagSaveParametersEeprom=0;
    1a12:	10 92 9b 01 	sts	0x019B, r1
    1a16:	ab cf       	rjmp	.-170    	; 0x196e <main+0x2a>

00001a18 <__subsf3>:
    1a18:	50 58       	subi	r21, 0x80	; 128

00001a1a <__addsf3>:
    1a1a:	bb 27       	eor	r27, r27
    1a1c:	aa 27       	eor	r26, r26
    1a1e:	0e d0       	rcall	.+28     	; 0x1a3c <__addsf3x>
    1a20:	cb c1       	rjmp	.+918    	; 0x1db8 <__fp_round>
    1a22:	bc d1       	rcall	.+888    	; 0x1d9c <__fp_pscA>
    1a24:	30 f0       	brcs	.+12     	; 0x1a32 <__addsf3+0x18>
    1a26:	c1 d1       	rcall	.+898    	; 0x1daa <__fp_pscB>
    1a28:	20 f0       	brcs	.+8      	; 0x1a32 <__addsf3+0x18>
    1a2a:	31 f4       	brne	.+12     	; 0x1a38 <__addsf3+0x1e>
    1a2c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a2e:	11 f4       	brne	.+4      	; 0x1a34 <__addsf3+0x1a>
    1a30:	1e f4       	brtc	.+6      	; 0x1a38 <__addsf3+0x1e>
    1a32:	8c c1       	rjmp	.+792    	; 0x1d4c <__fp_nan>
    1a34:	0e f4       	brtc	.+2      	; 0x1a38 <__addsf3+0x1e>
    1a36:	e0 95       	com	r30
    1a38:	e7 fb       	bst	r30, 7
    1a3a:	82 c1       	rjmp	.+772    	; 0x1d40 <__fp_inf>

00001a3c <__addsf3x>:
    1a3c:	e9 2f       	mov	r30, r25
    1a3e:	cd d1       	rcall	.+922    	; 0x1dda <__fp_split3>
    1a40:	80 f3       	brcs	.-32     	; 0x1a22 <__addsf3+0x8>
    1a42:	ba 17       	cp	r27, r26
    1a44:	62 07       	cpc	r22, r18
    1a46:	73 07       	cpc	r23, r19
    1a48:	84 07       	cpc	r24, r20
    1a4a:	95 07       	cpc	r25, r21
    1a4c:	18 f0       	brcs	.+6      	; 0x1a54 <__addsf3x+0x18>
    1a4e:	71 f4       	brne	.+28     	; 0x1a6c <__addsf3x+0x30>
    1a50:	9e f5       	brtc	.+102    	; 0x1ab8 <__addsf3x+0x7c>
    1a52:	e5 c1       	rjmp	.+970    	; 0x1e1e <__fp_zero>
    1a54:	0e f4       	brtc	.+2      	; 0x1a58 <__addsf3x+0x1c>
    1a56:	e0 95       	com	r30
    1a58:	0b 2e       	mov	r0, r27
    1a5a:	ba 2f       	mov	r27, r26
    1a5c:	a0 2d       	mov	r26, r0
    1a5e:	0b 01       	movw	r0, r22
    1a60:	b9 01       	movw	r22, r18
    1a62:	90 01       	movw	r18, r0
    1a64:	0c 01       	movw	r0, r24
    1a66:	ca 01       	movw	r24, r20
    1a68:	a0 01       	movw	r20, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	ff 27       	eor	r31, r31
    1a6e:	59 1b       	sub	r21, r25
    1a70:	99 f0       	breq	.+38     	; 0x1a98 <__addsf3x+0x5c>
    1a72:	59 3f       	cpi	r21, 0xF9	; 249
    1a74:	50 f4       	brcc	.+20     	; 0x1a8a <__addsf3x+0x4e>
    1a76:	50 3e       	cpi	r21, 0xE0	; 224
    1a78:	68 f1       	brcs	.+90     	; 0x1ad4 <__addsf3x+0x98>
    1a7a:	1a 16       	cp	r1, r26
    1a7c:	f0 40       	sbci	r31, 0x00	; 0
    1a7e:	a2 2f       	mov	r26, r18
    1a80:	23 2f       	mov	r18, r19
    1a82:	34 2f       	mov	r19, r20
    1a84:	44 27       	eor	r20, r20
    1a86:	58 5f       	subi	r21, 0xF8	; 248
    1a88:	f3 cf       	rjmp	.-26     	; 0x1a70 <__addsf3x+0x34>
    1a8a:	46 95       	lsr	r20
    1a8c:	37 95       	ror	r19
    1a8e:	27 95       	ror	r18
    1a90:	a7 95       	ror	r26
    1a92:	f0 40       	sbci	r31, 0x00	; 0
    1a94:	53 95       	inc	r21
    1a96:	c9 f7       	brne	.-14     	; 0x1a8a <__addsf3x+0x4e>
    1a98:	7e f4       	brtc	.+30     	; 0x1ab8 <__addsf3x+0x7c>
    1a9a:	1f 16       	cp	r1, r31
    1a9c:	ba 0b       	sbc	r27, r26
    1a9e:	62 0b       	sbc	r22, r18
    1aa0:	73 0b       	sbc	r23, r19
    1aa2:	84 0b       	sbc	r24, r20
    1aa4:	ba f0       	brmi	.+46     	; 0x1ad4 <__addsf3x+0x98>
    1aa6:	91 50       	subi	r25, 0x01	; 1
    1aa8:	a1 f0       	breq	.+40     	; 0x1ad2 <__addsf3x+0x96>
    1aaa:	ff 0f       	add	r31, r31
    1aac:	bb 1f       	adc	r27, r27
    1aae:	66 1f       	adc	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	88 1f       	adc	r24, r24
    1ab4:	c2 f7       	brpl	.-16     	; 0x1aa6 <__addsf3x+0x6a>
    1ab6:	0e c0       	rjmp	.+28     	; 0x1ad4 <__addsf3x+0x98>
    1ab8:	ba 0f       	add	r27, r26
    1aba:	62 1f       	adc	r22, r18
    1abc:	73 1f       	adc	r23, r19
    1abe:	84 1f       	adc	r24, r20
    1ac0:	48 f4       	brcc	.+18     	; 0x1ad4 <__addsf3x+0x98>
    1ac2:	87 95       	ror	r24
    1ac4:	77 95       	ror	r23
    1ac6:	67 95       	ror	r22
    1ac8:	b7 95       	ror	r27
    1aca:	f7 95       	ror	r31
    1acc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ace:	08 f0       	brcs	.+2      	; 0x1ad2 <__addsf3x+0x96>
    1ad0:	b3 cf       	rjmp	.-154    	; 0x1a38 <__addsf3+0x1e>
    1ad2:	93 95       	inc	r25
    1ad4:	88 0f       	add	r24, r24
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <__addsf3x+0x9e>
    1ad8:	99 27       	eor	r25, r25
    1ada:	ee 0f       	add	r30, r30
    1adc:	97 95       	ror	r25
    1ade:	87 95       	ror	r24
    1ae0:	08 95       	ret

00001ae2 <__cmpsf2>:
    1ae2:	0a d1       	rcall	.+532    	; 0x1cf8 <__fp_cmp>
    1ae4:	08 f4       	brcc	.+2      	; 0x1ae8 <__cmpsf2+0x6>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	08 95       	ret

00001aea <__divsf3>:
    1aea:	0c d0       	rcall	.+24     	; 0x1b04 <__divsf3x>
    1aec:	65 c1       	rjmp	.+714    	; 0x1db8 <__fp_round>
    1aee:	5d d1       	rcall	.+698    	; 0x1daa <__fp_pscB>
    1af0:	40 f0       	brcs	.+16     	; 0x1b02 <__divsf3+0x18>
    1af2:	54 d1       	rcall	.+680    	; 0x1d9c <__fp_pscA>
    1af4:	30 f0       	brcs	.+12     	; 0x1b02 <__divsf3+0x18>
    1af6:	21 f4       	brne	.+8      	; 0x1b00 <__divsf3+0x16>
    1af8:	5f 3f       	cpi	r21, 0xFF	; 255
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <__divsf3+0x18>
    1afc:	21 c1       	rjmp	.+578    	; 0x1d40 <__fp_inf>
    1afe:	51 11       	cpse	r21, r1
    1b00:	8f c1       	rjmp	.+798    	; 0x1e20 <__fp_szero>
    1b02:	24 c1       	rjmp	.+584    	; 0x1d4c <__fp_nan>

00001b04 <__divsf3x>:
    1b04:	6a d1       	rcall	.+724    	; 0x1dda <__fp_split3>
    1b06:	98 f3       	brcs	.-26     	; 0x1aee <__divsf3+0x4>

00001b08 <__divsf3_pse>:
    1b08:	99 23       	and	r25, r25
    1b0a:	c9 f3       	breq	.-14     	; 0x1afe <__divsf3+0x14>
    1b0c:	55 23       	and	r21, r21
    1b0e:	b1 f3       	breq	.-20     	; 0x1afc <__divsf3+0x12>
    1b10:	95 1b       	sub	r25, r21
    1b12:	55 0b       	sbc	r21, r21
    1b14:	bb 27       	eor	r27, r27
    1b16:	aa 27       	eor	r26, r26
    1b18:	62 17       	cp	r22, r18
    1b1a:	73 07       	cpc	r23, r19
    1b1c:	84 07       	cpc	r24, r20
    1b1e:	38 f0       	brcs	.+14     	; 0x1b2e <__divsf3_pse+0x26>
    1b20:	9f 5f       	subi	r25, 0xFF	; 255
    1b22:	5f 4f       	sbci	r21, 0xFF	; 255
    1b24:	22 0f       	add	r18, r18
    1b26:	33 1f       	adc	r19, r19
    1b28:	44 1f       	adc	r20, r20
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	a9 f3       	breq	.-22     	; 0x1b18 <__divsf3_pse+0x10>
    1b2e:	33 d0       	rcall	.+102    	; 0x1b96 <__divsf3_pse+0x8e>
    1b30:	0e 2e       	mov	r0, r30
    1b32:	3a f0       	brmi	.+14     	; 0x1b42 <__divsf3_pse+0x3a>
    1b34:	e0 e8       	ldi	r30, 0x80	; 128
    1b36:	30 d0       	rcall	.+96     	; 0x1b98 <__divsf3_pse+0x90>
    1b38:	91 50       	subi	r25, 0x01	; 1
    1b3a:	50 40       	sbci	r21, 0x00	; 0
    1b3c:	e6 95       	lsr	r30
    1b3e:	00 1c       	adc	r0, r0
    1b40:	ca f7       	brpl	.-14     	; 0x1b34 <__divsf3_pse+0x2c>
    1b42:	29 d0       	rcall	.+82     	; 0x1b96 <__divsf3_pse+0x8e>
    1b44:	fe 2f       	mov	r31, r30
    1b46:	27 d0       	rcall	.+78     	; 0x1b96 <__divsf3_pse+0x8e>
    1b48:	66 0f       	add	r22, r22
    1b4a:	77 1f       	adc	r23, r23
    1b4c:	88 1f       	adc	r24, r24
    1b4e:	bb 1f       	adc	r27, r27
    1b50:	26 17       	cp	r18, r22
    1b52:	37 07       	cpc	r19, r23
    1b54:	48 07       	cpc	r20, r24
    1b56:	ab 07       	cpc	r26, r27
    1b58:	b0 e8       	ldi	r27, 0x80	; 128
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <__divsf3_pse+0x56>
    1b5c:	bb 0b       	sbc	r27, r27
    1b5e:	80 2d       	mov	r24, r0
    1b60:	bf 01       	movw	r22, r30
    1b62:	ff 27       	eor	r31, r31
    1b64:	93 58       	subi	r25, 0x83	; 131
    1b66:	5f 4f       	sbci	r21, 0xFF	; 255
    1b68:	2a f0       	brmi	.+10     	; 0x1b74 <__divsf3_pse+0x6c>
    1b6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b6c:	51 05       	cpc	r21, r1
    1b6e:	68 f0       	brcs	.+26     	; 0x1b8a <__divsf3_pse+0x82>
    1b70:	e7 c0       	rjmp	.+462    	; 0x1d40 <__fp_inf>
    1b72:	56 c1       	rjmp	.+684    	; 0x1e20 <__fp_szero>
    1b74:	5f 3f       	cpi	r21, 0xFF	; 255
    1b76:	ec f3       	brlt	.-6      	; 0x1b72 <__divsf3_pse+0x6a>
    1b78:	98 3e       	cpi	r25, 0xE8	; 232
    1b7a:	dc f3       	brlt	.-10     	; 0x1b72 <__divsf3_pse+0x6a>
    1b7c:	86 95       	lsr	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	b7 95       	ror	r27
    1b84:	f7 95       	ror	r31
    1b86:	9f 5f       	subi	r25, 0xFF	; 255
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <__divsf3_pse+0x74>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	91 1d       	adc	r25, r1
    1b8e:	96 95       	lsr	r25
    1b90:	87 95       	ror	r24
    1b92:	97 f9       	bld	r25, 7
    1b94:	08 95       	ret
    1b96:	e1 e0       	ldi	r30, 0x01	; 1
    1b98:	66 0f       	add	r22, r22
    1b9a:	77 1f       	adc	r23, r23
    1b9c:	88 1f       	adc	r24, r24
    1b9e:	bb 1f       	adc	r27, r27
    1ba0:	62 17       	cp	r22, r18
    1ba2:	73 07       	cpc	r23, r19
    1ba4:	84 07       	cpc	r24, r20
    1ba6:	ba 07       	cpc	r27, r26
    1ba8:	20 f0       	brcs	.+8      	; 0x1bb2 <__divsf3_pse+0xaa>
    1baa:	62 1b       	sub	r22, r18
    1bac:	73 0b       	sbc	r23, r19
    1bae:	84 0b       	sbc	r24, r20
    1bb0:	ba 0b       	sbc	r27, r26
    1bb2:	ee 1f       	adc	r30, r30
    1bb4:	88 f7       	brcc	.-30     	; 0x1b98 <__divsf3_pse+0x90>
    1bb6:	e0 95       	com	r30
    1bb8:	08 95       	ret
    1bba:	19 f4       	brne	.+6      	; 0x1bc2 <__divsf3_pse+0xba>
    1bbc:	0e f0       	brts	.+2      	; 0x1bc0 <__divsf3_pse+0xb8>
    1bbe:	c0 c0       	rjmp	.+384    	; 0x1d40 <__fp_inf>
    1bc0:	2e c1       	rjmp	.+604    	; 0x1e1e <__fp_zero>
    1bc2:	c4 c0       	rjmp	.+392    	; 0x1d4c <__fp_nan>

00001bc4 <exp>:
    1bc4:	12 d1       	rcall	.+548    	; 0x1dea <__fp_splitA>
    1bc6:	c8 f3       	brcs	.-14     	; 0x1bba <__divsf3_pse+0xb2>
    1bc8:	96 38       	cpi	r25, 0x86	; 134
    1bca:	c0 f7       	brcc	.-16     	; 0x1bbc <__divsf3_pse+0xb4>
    1bcc:	07 f8       	bld	r0, 7
    1bce:	0f 92       	push	r0
    1bd0:	e8 94       	clt
    1bd2:	2b e3       	ldi	r18, 0x3B	; 59
    1bd4:	3a ea       	ldi	r19, 0xAA	; 170
    1bd6:	48 eb       	ldi	r20, 0xB8	; 184
    1bd8:	5f e7       	ldi	r21, 0x7F	; 127
    1bda:	ef d1       	rcall	.+990    	; 0x1fba <__mulsf3_pse>
    1bdc:	0f 92       	push	r0
    1bde:	0f 92       	push	r0
    1be0:	0f 92       	push	r0
    1be2:	4d b7       	in	r20, 0x3d	; 61
    1be4:	5e b7       	in	r21, 0x3e	; 62
    1be6:	0f 92       	push	r0
    1be8:	a7 d1       	rcall	.+846    	; 0x1f38 <modf>
    1bea:	ee e9       	ldi	r30, 0x9E	; 158
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	b1 d0       	rcall	.+354    	; 0x1d52 <__fp_powser>
    1bf0:	4f 91       	pop	r20
    1bf2:	5f 91       	pop	r21
    1bf4:	ef 91       	pop	r30
    1bf6:	ff 91       	pop	r31
    1bf8:	e5 95       	asr	r30
    1bfa:	ee 1f       	adc	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	49 f0       	breq	.+18     	; 0x1c12 <exp+0x4e>
    1c00:	fe 57       	subi	r31, 0x7E	; 126
    1c02:	e0 68       	ori	r30, 0x80	; 128
    1c04:	44 27       	eor	r20, r20
    1c06:	ee 0f       	add	r30, r30
    1c08:	44 1f       	adc	r20, r20
    1c0a:	fa 95       	dec	r31
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <exp+0x42>
    1c0e:	41 95       	neg	r20
    1c10:	55 0b       	sbc	r21, r21
    1c12:	19 d1       	rcall	.+562    	; 0x1e46 <ldexp>
    1c14:	0f 90       	pop	r0
    1c16:	07 fe       	sbrs	r0, 7
    1c18:	0d c1       	rjmp	.+538    	; 0x1e34 <inverse>
    1c1a:	08 95       	ret

00001c1c <__fixsfsi>:
    1c1c:	04 d0       	rcall	.+8      	; 0x1c26 <__fixunssfsi>
    1c1e:	68 94       	set
    1c20:	b1 11       	cpse	r27, r1
    1c22:	fe c0       	rjmp	.+508    	; 0x1e20 <__fp_szero>
    1c24:	08 95       	ret

00001c26 <__fixunssfsi>:
    1c26:	e1 d0       	rcall	.+450    	; 0x1dea <__fp_splitA>
    1c28:	88 f0       	brcs	.+34     	; 0x1c4c <__fixunssfsi+0x26>
    1c2a:	9f 57       	subi	r25, 0x7F	; 127
    1c2c:	90 f0       	brcs	.+36     	; 0x1c52 <__fixunssfsi+0x2c>
    1c2e:	b9 2f       	mov	r27, r25
    1c30:	99 27       	eor	r25, r25
    1c32:	b7 51       	subi	r27, 0x17	; 23
    1c34:	a0 f0       	brcs	.+40     	; 0x1c5e <__fixunssfsi+0x38>
    1c36:	d1 f0       	breq	.+52     	; 0x1c6c <__fixunssfsi+0x46>
    1c38:	66 0f       	add	r22, r22
    1c3a:	77 1f       	adc	r23, r23
    1c3c:	88 1f       	adc	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	1a f0       	brmi	.+6      	; 0x1c48 <__fixunssfsi+0x22>
    1c42:	ba 95       	dec	r27
    1c44:	c9 f7       	brne	.-14     	; 0x1c38 <__fixunssfsi+0x12>
    1c46:	12 c0       	rjmp	.+36     	; 0x1c6c <__fixunssfsi+0x46>
    1c48:	b1 30       	cpi	r27, 0x01	; 1
    1c4a:	81 f0       	breq	.+32     	; 0x1c6c <__fixunssfsi+0x46>
    1c4c:	e8 d0       	rcall	.+464    	; 0x1e1e <__fp_zero>
    1c4e:	b1 e0       	ldi	r27, 0x01	; 1
    1c50:	08 95       	ret
    1c52:	e5 c0       	rjmp	.+458    	; 0x1e1e <__fp_zero>
    1c54:	67 2f       	mov	r22, r23
    1c56:	78 2f       	mov	r23, r24
    1c58:	88 27       	eor	r24, r24
    1c5a:	b8 5f       	subi	r27, 0xF8	; 248
    1c5c:	39 f0       	breq	.+14     	; 0x1c6c <__fixunssfsi+0x46>
    1c5e:	b9 3f       	cpi	r27, 0xF9	; 249
    1c60:	cc f3       	brlt	.-14     	; 0x1c54 <__fixunssfsi+0x2e>
    1c62:	86 95       	lsr	r24
    1c64:	77 95       	ror	r23
    1c66:	67 95       	ror	r22
    1c68:	b3 95       	inc	r27
    1c6a:	d9 f7       	brne	.-10     	; 0x1c62 <__fixunssfsi+0x3c>
    1c6c:	3e f4       	brtc	.+14     	; 0x1c7c <__fixunssfsi+0x56>
    1c6e:	90 95       	com	r25
    1c70:	80 95       	com	r24
    1c72:	70 95       	com	r23
    1c74:	61 95       	neg	r22
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	08 95       	ret

00001c7e <__floatunsisf>:
    1c7e:	e8 94       	clt
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <__floatsisf+0x12>

00001c82 <__floatsisf>:
    1c82:	97 fb       	bst	r25, 7
    1c84:	3e f4       	brtc	.+14     	; 0x1c94 <__floatsisf+0x12>
    1c86:	90 95       	com	r25
    1c88:	80 95       	com	r24
    1c8a:	70 95       	com	r23
    1c8c:	61 95       	neg	r22
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	8f 4f       	sbci	r24, 0xFF	; 255
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	99 23       	and	r25, r25
    1c96:	a9 f0       	breq	.+42     	; 0x1cc2 <__floatsisf+0x40>
    1c98:	f9 2f       	mov	r31, r25
    1c9a:	96 e9       	ldi	r25, 0x96	; 150
    1c9c:	bb 27       	eor	r27, r27
    1c9e:	93 95       	inc	r25
    1ca0:	f6 95       	lsr	r31
    1ca2:	87 95       	ror	r24
    1ca4:	77 95       	ror	r23
    1ca6:	67 95       	ror	r22
    1ca8:	b7 95       	ror	r27
    1caa:	f1 11       	cpse	r31, r1
    1cac:	f8 cf       	rjmp	.-16     	; 0x1c9e <__floatsisf+0x1c>
    1cae:	fa f4       	brpl	.+62     	; 0x1cee <__floatsisf+0x6c>
    1cb0:	bb 0f       	add	r27, r27
    1cb2:	11 f4       	brne	.+4      	; 0x1cb8 <__floatsisf+0x36>
    1cb4:	60 ff       	sbrs	r22, 0
    1cb6:	1b c0       	rjmp	.+54     	; 0x1cee <__floatsisf+0x6c>
    1cb8:	6f 5f       	subi	r22, 0xFF	; 255
    1cba:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc0:	16 c0       	rjmp	.+44     	; 0x1cee <__floatsisf+0x6c>
    1cc2:	88 23       	and	r24, r24
    1cc4:	11 f0       	breq	.+4      	; 0x1cca <__floatsisf+0x48>
    1cc6:	96 e9       	ldi	r25, 0x96	; 150
    1cc8:	11 c0       	rjmp	.+34     	; 0x1cec <__floatsisf+0x6a>
    1cca:	77 23       	and	r23, r23
    1ccc:	21 f0       	breq	.+8      	; 0x1cd6 <__floatsisf+0x54>
    1cce:	9e e8       	ldi	r25, 0x8E	; 142
    1cd0:	87 2f       	mov	r24, r23
    1cd2:	76 2f       	mov	r23, r22
    1cd4:	05 c0       	rjmp	.+10     	; 0x1ce0 <__floatsisf+0x5e>
    1cd6:	66 23       	and	r22, r22
    1cd8:	71 f0       	breq	.+28     	; 0x1cf6 <__floatsisf+0x74>
    1cda:	96 e8       	ldi	r25, 0x86	; 134
    1cdc:	86 2f       	mov	r24, r22
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	2a f0       	brmi	.+10     	; 0x1cee <__floatsisf+0x6c>
    1ce4:	9a 95       	dec	r25
    1ce6:	66 0f       	add	r22, r22
    1ce8:	77 1f       	adc	r23, r23
    1cea:	88 1f       	adc	r24, r24
    1cec:	da f7       	brpl	.-10     	; 0x1ce4 <__floatsisf+0x62>
    1cee:	88 0f       	add	r24, r24
    1cf0:	96 95       	lsr	r25
    1cf2:	87 95       	ror	r24
    1cf4:	97 f9       	bld	r25, 7
    1cf6:	08 95       	ret

00001cf8 <__fp_cmp>:
    1cf8:	99 0f       	add	r25, r25
    1cfa:	00 08       	sbc	r0, r0
    1cfc:	55 0f       	add	r21, r21
    1cfe:	aa 0b       	sbc	r26, r26
    1d00:	e0 e8       	ldi	r30, 0x80	; 128
    1d02:	fe ef       	ldi	r31, 0xFE	; 254
    1d04:	16 16       	cp	r1, r22
    1d06:	17 06       	cpc	r1, r23
    1d08:	e8 07       	cpc	r30, r24
    1d0a:	f9 07       	cpc	r31, r25
    1d0c:	c0 f0       	brcs	.+48     	; 0x1d3e <__fp_cmp+0x46>
    1d0e:	12 16       	cp	r1, r18
    1d10:	13 06       	cpc	r1, r19
    1d12:	e4 07       	cpc	r30, r20
    1d14:	f5 07       	cpc	r31, r21
    1d16:	98 f0       	brcs	.+38     	; 0x1d3e <__fp_cmp+0x46>
    1d18:	62 1b       	sub	r22, r18
    1d1a:	73 0b       	sbc	r23, r19
    1d1c:	84 0b       	sbc	r24, r20
    1d1e:	95 0b       	sbc	r25, r21
    1d20:	39 f4       	brne	.+14     	; 0x1d30 <__fp_cmp+0x38>
    1d22:	0a 26       	eor	r0, r26
    1d24:	61 f0       	breq	.+24     	; 0x1d3e <__fp_cmp+0x46>
    1d26:	23 2b       	or	r18, r19
    1d28:	24 2b       	or	r18, r20
    1d2a:	25 2b       	or	r18, r21
    1d2c:	21 f4       	brne	.+8      	; 0x1d36 <__fp_cmp+0x3e>
    1d2e:	08 95       	ret
    1d30:	0a 26       	eor	r0, r26
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <__fp_cmp+0x3e>
    1d34:	a1 40       	sbci	r26, 0x01	; 1
    1d36:	a6 95       	lsr	r26
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	81 1d       	adc	r24, r1
    1d3c:	81 1d       	adc	r24, r1
    1d3e:	08 95       	ret

00001d40 <__fp_inf>:
    1d40:	97 f9       	bld	r25, 7
    1d42:	9f 67       	ori	r25, 0x7F	; 127
    1d44:	80 e8       	ldi	r24, 0x80	; 128
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	08 95       	ret

00001d4c <__fp_nan>:
    1d4c:	9f ef       	ldi	r25, 0xFF	; 255
    1d4e:	80 ec       	ldi	r24, 0xC0	; 192
    1d50:	08 95       	ret

00001d52 <__fp_powser>:
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	1f 93       	push	r17
    1d58:	0f 93       	push	r16
    1d5a:	ff 92       	push	r15
    1d5c:	ef 92       	push	r14
    1d5e:	df 92       	push	r13
    1d60:	7b 01       	movw	r14, r22
    1d62:	8c 01       	movw	r16, r24
    1d64:	68 94       	set
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <__fp_powser+0x20>
    1d68:	da 2e       	mov	r13, r26
    1d6a:	ef 01       	movw	r28, r30
    1d6c:	24 d1       	rcall	.+584    	; 0x1fb6 <__mulsf3x>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e8 94       	clt
    1d72:	a5 91       	lpm	r26, Z+
    1d74:	25 91       	lpm	r18, Z+
    1d76:	35 91       	lpm	r19, Z+
    1d78:	45 91       	lpm	r20, Z+
    1d7a:	55 91       	lpm	r21, Z+
    1d7c:	ae f3       	brts	.-22     	; 0x1d68 <__fp_powser+0x16>
    1d7e:	ef 01       	movw	r28, r30
    1d80:	5d de       	rcall	.-838    	; 0x1a3c <__addsf3x>
    1d82:	fe 01       	movw	r30, r28
    1d84:	97 01       	movw	r18, r14
    1d86:	a8 01       	movw	r20, r16
    1d88:	da 94       	dec	r13
    1d8a:	79 f7       	brne	.-34     	; 0x1d6a <__fp_powser+0x18>
    1d8c:	df 90       	pop	r13
    1d8e:	ef 90       	pop	r14
    1d90:	ff 90       	pop	r15
    1d92:	0f 91       	pop	r16
    1d94:	1f 91       	pop	r17
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <__fp_pscA>:
    1d9c:	00 24       	eor	r0, r0
    1d9e:	0a 94       	dec	r0
    1da0:	16 16       	cp	r1, r22
    1da2:	17 06       	cpc	r1, r23
    1da4:	18 06       	cpc	r1, r24
    1da6:	09 06       	cpc	r0, r25
    1da8:	08 95       	ret

00001daa <__fp_pscB>:
    1daa:	00 24       	eor	r0, r0
    1dac:	0a 94       	dec	r0
    1dae:	12 16       	cp	r1, r18
    1db0:	13 06       	cpc	r1, r19
    1db2:	14 06       	cpc	r1, r20
    1db4:	05 06       	cpc	r0, r21
    1db6:	08 95       	ret

00001db8 <__fp_round>:
    1db8:	09 2e       	mov	r0, r25
    1dba:	03 94       	inc	r0
    1dbc:	00 0c       	add	r0, r0
    1dbe:	11 f4       	brne	.+4      	; 0x1dc4 <__fp_round+0xc>
    1dc0:	88 23       	and	r24, r24
    1dc2:	52 f0       	brmi	.+20     	; 0x1dd8 <__fp_round+0x20>
    1dc4:	bb 0f       	add	r27, r27
    1dc6:	40 f4       	brcc	.+16     	; 0x1dd8 <__fp_round+0x20>
    1dc8:	bf 2b       	or	r27, r31
    1dca:	11 f4       	brne	.+4      	; 0x1dd0 <__fp_round+0x18>
    1dcc:	60 ff       	sbrs	r22, 0
    1dce:	04 c0       	rjmp	.+8      	; 0x1dd8 <__fp_round+0x20>
    1dd0:	6f 5f       	subi	r22, 0xFF	; 255
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	08 95       	ret

00001dda <__fp_split3>:
    1dda:	57 fd       	sbrc	r21, 7
    1ddc:	90 58       	subi	r25, 0x80	; 128
    1dde:	44 0f       	add	r20, r20
    1de0:	55 1f       	adc	r21, r21
    1de2:	59 f0       	breq	.+22     	; 0x1dfa <__fp_splitA+0x10>
    1de4:	5f 3f       	cpi	r21, 0xFF	; 255
    1de6:	71 f0       	breq	.+28     	; 0x1e04 <__fp_splitA+0x1a>
    1de8:	47 95       	ror	r20

00001dea <__fp_splitA>:
    1dea:	88 0f       	add	r24, r24
    1dec:	97 fb       	bst	r25, 7
    1dee:	99 1f       	adc	r25, r25
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <__fp_splitA+0x20>
    1df2:	9f 3f       	cpi	r25, 0xFF	; 255
    1df4:	79 f0       	breq	.+30     	; 0x1e14 <__fp_splitA+0x2a>
    1df6:	87 95       	ror	r24
    1df8:	08 95       	ret
    1dfa:	12 16       	cp	r1, r18
    1dfc:	13 06       	cpc	r1, r19
    1dfe:	14 06       	cpc	r1, r20
    1e00:	55 1f       	adc	r21, r21
    1e02:	f2 cf       	rjmp	.-28     	; 0x1de8 <__fp_split3+0xe>
    1e04:	46 95       	lsr	r20
    1e06:	f1 df       	rcall	.-30     	; 0x1dea <__fp_splitA>
    1e08:	08 c0       	rjmp	.+16     	; 0x1e1a <__fp_splitA+0x30>
    1e0a:	16 16       	cp	r1, r22
    1e0c:	17 06       	cpc	r1, r23
    1e0e:	18 06       	cpc	r1, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	f1 cf       	rjmp	.-30     	; 0x1df6 <__fp_splitA+0xc>
    1e14:	86 95       	lsr	r24
    1e16:	71 05       	cpc	r23, r1
    1e18:	61 05       	cpc	r22, r1
    1e1a:	08 94       	sec
    1e1c:	08 95       	ret

00001e1e <__fp_zero>:
    1e1e:	e8 94       	clt

00001e20 <__fp_szero>:
    1e20:	bb 27       	eor	r27, r27
    1e22:	66 27       	eor	r22, r22
    1e24:	77 27       	eor	r23, r23
    1e26:	cb 01       	movw	r24, r22
    1e28:	97 f9       	bld	r25, 7
    1e2a:	08 95       	ret

00001e2c <__gesf2>:
    1e2c:	65 df       	rcall	.-310    	; 0x1cf8 <__fp_cmp>
    1e2e:	08 f4       	brcc	.+2      	; 0x1e32 <__gesf2+0x6>
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	08 95       	ret

00001e34 <inverse>:
    1e34:	9b 01       	movw	r18, r22
    1e36:	ac 01       	movw	r20, r24
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	80 e8       	ldi	r24, 0x80	; 128
    1e3e:	9f e3       	ldi	r25, 0x3F	; 63
    1e40:	54 ce       	rjmp	.-856    	; 0x1aea <__divsf3>
    1e42:	7e cf       	rjmp	.-260    	; 0x1d40 <__fp_inf>
    1e44:	5b c1       	rjmp	.+694    	; 0x20fc <__fp_mpack>

00001e46 <ldexp>:
    1e46:	d1 df       	rcall	.-94     	; 0x1dea <__fp_splitA>
    1e48:	e8 f3       	brcs	.-6      	; 0x1e44 <inverse+0x10>
    1e4a:	99 23       	and	r25, r25
    1e4c:	d9 f3       	breq	.-10     	; 0x1e44 <inverse+0x10>
    1e4e:	94 0f       	add	r25, r20
    1e50:	51 1d       	adc	r21, r1
    1e52:	bb f3       	brvs	.-18     	; 0x1e42 <inverse+0xe>
    1e54:	91 50       	subi	r25, 0x01	; 1
    1e56:	50 40       	sbci	r21, 0x00	; 0
    1e58:	94 f0       	brlt	.+36     	; 0x1e7e <ldexp+0x38>
    1e5a:	59 f0       	breq	.+22     	; 0x1e72 <ldexp+0x2c>
    1e5c:	88 23       	and	r24, r24
    1e5e:	32 f0       	brmi	.+12     	; 0x1e6c <ldexp+0x26>
    1e60:	66 0f       	add	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	88 1f       	adc	r24, r24
    1e66:	91 50       	subi	r25, 0x01	; 1
    1e68:	50 40       	sbci	r21, 0x00	; 0
    1e6a:	c1 f7       	brne	.-16     	; 0x1e5c <ldexp+0x16>
    1e6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e6e:	51 05       	cpc	r21, r1
    1e70:	44 f7       	brge	.-48     	; 0x1e42 <inverse+0xe>
    1e72:	88 0f       	add	r24, r24
    1e74:	91 1d       	adc	r25, r1
    1e76:	96 95       	lsr	r25
    1e78:	87 95       	ror	r24
    1e7a:	97 f9       	bld	r25, 7
    1e7c:	08 95       	ret
    1e7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e80:	ac f0       	brlt	.+42     	; 0x1eac <ldexp+0x66>
    1e82:	98 3e       	cpi	r25, 0xE8	; 232
    1e84:	9c f0       	brlt	.+38     	; 0x1eac <ldexp+0x66>
    1e86:	bb 27       	eor	r27, r27
    1e88:	86 95       	lsr	r24
    1e8a:	77 95       	ror	r23
    1e8c:	67 95       	ror	r22
    1e8e:	b7 95       	ror	r27
    1e90:	08 f4       	brcc	.+2      	; 0x1e94 <ldexp+0x4e>
    1e92:	b1 60       	ori	r27, 0x01	; 1
    1e94:	93 95       	inc	r25
    1e96:	c1 f7       	brne	.-16     	; 0x1e88 <ldexp+0x42>
    1e98:	bb 0f       	add	r27, r27
    1e9a:	58 f7       	brcc	.-42     	; 0x1e72 <ldexp+0x2c>
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <ldexp+0x5c>
    1e9e:	60 ff       	sbrs	r22, 0
    1ea0:	e8 cf       	rjmp	.-48     	; 0x1e72 <ldexp+0x2c>
    1ea2:	6f 5f       	subi	r22, 0xFF	; 255
    1ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	e3 cf       	rjmp	.-58     	; 0x1e72 <ldexp+0x2c>
    1eac:	b9 cf       	rjmp	.-142    	; 0x1e20 <__fp_szero>
    1eae:	0e f0       	brts	.+2      	; 0x1eb2 <ldexp+0x6c>
    1eb0:	25 c1       	rjmp	.+586    	; 0x20fc <__fp_mpack>
    1eb2:	4c cf       	rjmp	.-360    	; 0x1d4c <__fp_nan>
    1eb4:	68 94       	set
    1eb6:	44 cf       	rjmp	.-376    	; 0x1d40 <__fp_inf>

00001eb8 <log>:
    1eb8:	98 df       	rcall	.-208    	; 0x1dea <__fp_splitA>
    1eba:	c8 f3       	brcs	.-14     	; 0x1eae <ldexp+0x68>
    1ebc:	99 23       	and	r25, r25
    1ebe:	d1 f3       	breq	.-12     	; 0x1eb4 <ldexp+0x6e>
    1ec0:	c6 f3       	brts	.-16     	; 0x1eb2 <ldexp+0x6c>
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	1f 93       	push	r17
    1ec8:	0f 93       	push	r16
    1eca:	ff 92       	push	r15
    1ecc:	c9 2f       	mov	r28, r25
    1ece:	dd 27       	eor	r29, r29
    1ed0:	88 23       	and	r24, r24
    1ed2:	2a f0       	brmi	.+10     	; 0x1ede <log+0x26>
    1ed4:	21 97       	sbiw	r28, 0x01	; 1
    1ed6:	66 0f       	add	r22, r22
    1ed8:	77 1f       	adc	r23, r23
    1eda:	88 1f       	adc	r24, r24
    1edc:	da f7       	brpl	.-10     	; 0x1ed4 <log+0x1c>
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f eb       	ldi	r21, 0xBF	; 191
    1ee6:	9f e3       	ldi	r25, 0x3F	; 63
    1ee8:	88 39       	cpi	r24, 0x98	; 152
    1eea:	20 f0       	brcs	.+8      	; 0x1ef4 <log+0x3c>
    1eec:	80 3e       	cpi	r24, 0xE0	; 224
    1eee:	30 f0       	brcs	.+12     	; 0x1efc <log+0x44>
    1ef0:	21 96       	adiw	r28, 0x01	; 1
    1ef2:	8f 77       	andi	r24, 0x7F	; 127
    1ef4:	92 dd       	rcall	.-1244   	; 0x1a1a <__addsf3>
    1ef6:	e6 ec       	ldi	r30, 0xC6	; 198
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <log+0x4a>
    1efc:	8e dd       	rcall	.-1252   	; 0x1a1a <__addsf3>
    1efe:	e3 ef       	ldi	r30, 0xF3	; 243
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	27 df       	rcall	.-434    	; 0x1d52 <__fp_powser>
    1f04:	8b 01       	movw	r16, r22
    1f06:	be 01       	movw	r22, r28
    1f08:	ec 01       	movw	r28, r24
    1f0a:	fb 2e       	mov	r15, r27
    1f0c:	6f 57       	subi	r22, 0x7F	; 127
    1f0e:	71 09       	sbc	r23, r1
    1f10:	75 95       	asr	r23
    1f12:	77 1f       	adc	r23, r23
    1f14:	88 0b       	sbc	r24, r24
    1f16:	99 0b       	sbc	r25, r25
    1f18:	b4 de       	rcall	.-664    	; 0x1c82 <__floatsisf>
    1f1a:	28 e1       	ldi	r18, 0x18	; 24
    1f1c:	32 e7       	ldi	r19, 0x72	; 114
    1f1e:	41 e3       	ldi	r20, 0x31	; 49
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	49 d0       	rcall	.+146    	; 0x1fb6 <__mulsf3x>
    1f24:	af 2d       	mov	r26, r15
    1f26:	98 01       	movw	r18, r16
    1f28:	ae 01       	movw	r20, r28
    1f2a:	ff 90       	pop	r15
    1f2c:	0f 91       	pop	r16
    1f2e:	1f 91       	pop	r17
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	83 dd       	rcall	.-1274   	; 0x1a3c <__addsf3x>
    1f36:	40 cf       	rjmp	.-384    	; 0x1db8 <__fp_round>

00001f38 <modf>:
    1f38:	fa 01       	movw	r30, r20
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	aa 0f       	add	r26, r26
    1f3e:	bb 1f       	adc	r27, r27
    1f40:	9b 01       	movw	r18, r22
    1f42:	ac 01       	movw	r20, r24
    1f44:	bf 57       	subi	r27, 0x7F	; 127
    1f46:	28 f4       	brcc	.+10     	; 0x1f52 <modf+0x1a>
    1f48:	22 27       	eor	r18, r18
    1f4a:	33 27       	eor	r19, r19
    1f4c:	44 27       	eor	r20, r20
    1f4e:	50 78       	andi	r21, 0x80	; 128
    1f50:	1f c0       	rjmp	.+62     	; 0x1f90 <modf+0x58>
    1f52:	b7 51       	subi	r27, 0x17	; 23
    1f54:	88 f4       	brcc	.+34     	; 0x1f78 <modf+0x40>
    1f56:	ab 2f       	mov	r26, r27
    1f58:	00 24       	eor	r0, r0
    1f5a:	46 95       	lsr	r20
    1f5c:	37 95       	ror	r19
    1f5e:	27 95       	ror	r18
    1f60:	01 1c       	adc	r0, r1
    1f62:	a3 95       	inc	r26
    1f64:	d2 f3       	brmi	.-12     	; 0x1f5a <modf+0x22>
    1f66:	00 20       	and	r0, r0
    1f68:	69 f0       	breq	.+26     	; 0x1f84 <modf+0x4c>
    1f6a:	22 0f       	add	r18, r18
    1f6c:	33 1f       	adc	r19, r19
    1f6e:	44 1f       	adc	r20, r20
    1f70:	b3 95       	inc	r27
    1f72:	da f3       	brmi	.-10     	; 0x1f6a <modf+0x32>
    1f74:	0d d0       	rcall	.+26     	; 0x1f90 <modf+0x58>
    1f76:	50 cd       	rjmp	.-1376   	; 0x1a18 <__subsf3>
    1f78:	61 30       	cpi	r22, 0x01	; 1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	a0 e8       	ldi	r26, 0x80	; 128
    1f7e:	8a 07       	cpc	r24, r26
    1f80:	b9 46       	sbci	r27, 0x69	; 105
    1f82:	30 f4       	brcc	.+12     	; 0x1f90 <modf+0x58>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	66 27       	eor	r22, r22
    1f8a:	77 27       	eor	r23, r23
    1f8c:	88 27       	eor	r24, r24
    1f8e:	90 78       	andi	r25, 0x80	; 128
    1f90:	30 96       	adiw	r30, 0x00	; 0
    1f92:	21 f0       	breq	.+8      	; 0x1f9c <modf+0x64>
    1f94:	20 83       	st	Z, r18
    1f96:	31 83       	std	Z+1, r19	; 0x01
    1f98:	42 83       	std	Z+2, r20	; 0x02
    1f9a:	53 83       	std	Z+3, r21	; 0x03
    1f9c:	08 95       	ret

00001f9e <__mulsf3>:
    1f9e:	0b d0       	rcall	.+22     	; 0x1fb6 <__mulsf3x>
    1fa0:	0b cf       	rjmp	.-490    	; 0x1db8 <__fp_round>
    1fa2:	fc de       	rcall	.-520    	; 0x1d9c <__fp_pscA>
    1fa4:	28 f0       	brcs	.+10     	; 0x1fb0 <__mulsf3+0x12>
    1fa6:	01 df       	rcall	.-510    	; 0x1daa <__fp_pscB>
    1fa8:	18 f0       	brcs	.+6      	; 0x1fb0 <__mulsf3+0x12>
    1faa:	95 23       	and	r25, r21
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <__mulsf3+0x12>
    1fae:	c8 ce       	rjmp	.-624    	; 0x1d40 <__fp_inf>
    1fb0:	cd ce       	rjmp	.-614    	; 0x1d4c <__fp_nan>
    1fb2:	11 24       	eor	r1, r1
    1fb4:	35 cf       	rjmp	.-406    	; 0x1e20 <__fp_szero>

00001fb6 <__mulsf3x>:
    1fb6:	11 df       	rcall	.-478    	; 0x1dda <__fp_split3>
    1fb8:	a0 f3       	brcs	.-24     	; 0x1fa2 <__mulsf3+0x4>

00001fba <__mulsf3_pse>:
    1fba:	95 9f       	mul	r25, r21
    1fbc:	d1 f3       	breq	.-12     	; 0x1fb2 <__mulsf3+0x14>
    1fbe:	95 0f       	add	r25, r21
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	55 1f       	adc	r21, r21
    1fc4:	62 9f       	mul	r22, r18
    1fc6:	f0 01       	movw	r30, r0
    1fc8:	72 9f       	mul	r23, r18
    1fca:	bb 27       	eor	r27, r27
    1fcc:	f0 0d       	add	r31, r0
    1fce:	b1 1d       	adc	r27, r1
    1fd0:	63 9f       	mul	r22, r19
    1fd2:	aa 27       	eor	r26, r26
    1fd4:	f0 0d       	add	r31, r0
    1fd6:	b1 1d       	adc	r27, r1
    1fd8:	aa 1f       	adc	r26, r26
    1fda:	64 9f       	mul	r22, r20
    1fdc:	66 27       	eor	r22, r22
    1fde:	b0 0d       	add	r27, r0
    1fe0:	a1 1d       	adc	r26, r1
    1fe2:	66 1f       	adc	r22, r22
    1fe4:	82 9f       	mul	r24, r18
    1fe6:	22 27       	eor	r18, r18
    1fe8:	b0 0d       	add	r27, r0
    1fea:	a1 1d       	adc	r26, r1
    1fec:	62 1f       	adc	r22, r18
    1fee:	73 9f       	mul	r23, r19
    1ff0:	b0 0d       	add	r27, r0
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	62 1f       	adc	r22, r18
    1ff6:	83 9f       	mul	r24, r19
    1ff8:	a0 0d       	add	r26, r0
    1ffa:	61 1d       	adc	r22, r1
    1ffc:	22 1f       	adc	r18, r18
    1ffe:	74 9f       	mul	r23, r20
    2000:	33 27       	eor	r19, r19
    2002:	a0 0d       	add	r26, r0
    2004:	61 1d       	adc	r22, r1
    2006:	23 1f       	adc	r18, r19
    2008:	84 9f       	mul	r24, r20
    200a:	60 0d       	add	r22, r0
    200c:	21 1d       	adc	r18, r1
    200e:	82 2f       	mov	r24, r18
    2010:	76 2f       	mov	r23, r22
    2012:	6a 2f       	mov	r22, r26
    2014:	11 24       	eor	r1, r1
    2016:	9f 57       	subi	r25, 0x7F	; 127
    2018:	50 40       	sbci	r21, 0x00	; 0
    201a:	8a f0       	brmi	.+34     	; 0x203e <__mulsf3_pse+0x84>
    201c:	e1 f0       	breq	.+56     	; 0x2056 <__mulsf3_pse+0x9c>
    201e:	88 23       	and	r24, r24
    2020:	4a f0       	brmi	.+18     	; 0x2034 <__mulsf3_pse+0x7a>
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	bb 1f       	adc	r27, r27
    2028:	66 1f       	adc	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	88 1f       	adc	r24, r24
    202e:	91 50       	subi	r25, 0x01	; 1
    2030:	50 40       	sbci	r21, 0x00	; 0
    2032:	a9 f7       	brne	.-22     	; 0x201e <__mulsf3_pse+0x64>
    2034:	9e 3f       	cpi	r25, 0xFE	; 254
    2036:	51 05       	cpc	r21, r1
    2038:	70 f0       	brcs	.+28     	; 0x2056 <__mulsf3_pse+0x9c>
    203a:	82 ce       	rjmp	.-764    	; 0x1d40 <__fp_inf>
    203c:	f1 ce       	rjmp	.-542    	; 0x1e20 <__fp_szero>
    203e:	5f 3f       	cpi	r21, 0xFF	; 255
    2040:	ec f3       	brlt	.-6      	; 0x203c <__mulsf3_pse+0x82>
    2042:	98 3e       	cpi	r25, 0xE8	; 232
    2044:	dc f3       	brlt	.-10     	; 0x203c <__mulsf3_pse+0x82>
    2046:	86 95       	lsr	r24
    2048:	77 95       	ror	r23
    204a:	67 95       	ror	r22
    204c:	b7 95       	ror	r27
    204e:	f7 95       	ror	r31
    2050:	e7 95       	ror	r30
    2052:	9f 5f       	subi	r25, 0xFF	; 255
    2054:	c1 f7       	brne	.-16     	; 0x2046 <__mulsf3_pse+0x8c>
    2056:	fe 2b       	or	r31, r30
    2058:	88 0f       	add	r24, r24
    205a:	91 1d       	adc	r25, r1
    205c:	96 95       	lsr	r25
    205e:	87 95       	ror	r24
    2060:	97 f9       	bld	r25, 7
    2062:	08 95       	ret

00002064 <pow>:
    2064:	fa 01       	movw	r30, r20
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	30 96       	adiw	r30, 0x00	; 0
    206c:	21 05       	cpc	r18, r1
    206e:	31 05       	cpc	r19, r1
    2070:	99 f1       	breq	.+102    	; 0x20d8 <pow+0x74>
    2072:	61 15       	cp	r22, r1
    2074:	71 05       	cpc	r23, r1
    2076:	61 f4       	brne	.+24     	; 0x2090 <pow+0x2c>
    2078:	80 38       	cpi	r24, 0x80	; 128
    207a:	bf e3       	ldi	r27, 0x3F	; 63
    207c:	9b 07       	cpc	r25, r27
    207e:	49 f1       	breq	.+82     	; 0x20d2 <pow+0x6e>
    2080:	68 94       	set
    2082:	90 38       	cpi	r25, 0x80	; 128
    2084:	81 05       	cpc	r24, r1
    2086:	61 f0       	breq	.+24     	; 0x20a0 <pow+0x3c>
    2088:	80 38       	cpi	r24, 0x80	; 128
    208a:	bf ef       	ldi	r27, 0xFF	; 255
    208c:	9b 07       	cpc	r25, r27
    208e:	41 f0       	breq	.+16     	; 0x20a0 <pow+0x3c>
    2090:	99 23       	and	r25, r25
    2092:	42 f5       	brpl	.+80     	; 0x20e4 <pow+0x80>
    2094:	ff 3f       	cpi	r31, 0xFF	; 255
    2096:	e1 05       	cpc	r30, r1
    2098:	31 05       	cpc	r19, r1
    209a:	21 05       	cpc	r18, r1
    209c:	11 f1       	breq	.+68     	; 0x20e2 <pow+0x7e>
    209e:	e8 94       	clt
    20a0:	08 94       	sec
    20a2:	e7 95       	ror	r30
    20a4:	d9 01       	movw	r26, r18
    20a6:	aa 23       	and	r26, r26
    20a8:	29 f4       	brne	.+10     	; 0x20b4 <pow+0x50>
    20aa:	ab 2f       	mov	r26, r27
    20ac:	be 2f       	mov	r27, r30
    20ae:	f8 5f       	subi	r31, 0xF8	; 248
    20b0:	d0 f3       	brcs	.-12     	; 0x20a6 <pow+0x42>
    20b2:	10 c0       	rjmp	.+32     	; 0x20d4 <pow+0x70>
    20b4:	ff 5f       	subi	r31, 0xFF	; 255
    20b6:	70 f4       	brcc	.+28     	; 0x20d4 <pow+0x70>
    20b8:	a6 95       	lsr	r26
    20ba:	e0 f7       	brcc	.-8      	; 0x20b4 <pow+0x50>
    20bc:	f7 39       	cpi	r31, 0x97	; 151
    20be:	50 f0       	brcs	.+20     	; 0x20d4 <pow+0x70>
    20c0:	19 f0       	breq	.+6      	; 0x20c8 <pow+0x64>
    20c2:	ff 3a       	cpi	r31, 0xAF	; 175
    20c4:	38 f4       	brcc	.+14     	; 0x20d4 <pow+0x70>
    20c6:	9f 77       	andi	r25, 0x7F	; 127
    20c8:	9f 93       	push	r25
    20ca:	0c d0       	rcall	.+24     	; 0x20e4 <pow+0x80>
    20cc:	0f 90       	pop	r0
    20ce:	07 fc       	sbrc	r0, 7
    20d0:	90 58       	subi	r25, 0x80	; 128
    20d2:	08 95       	ret
    20d4:	3e f0       	brts	.+14     	; 0x20e4 <pow+0x80>
    20d6:	3a ce       	rjmp	.-908    	; 0x1d4c <__fp_nan>
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	80 e8       	ldi	r24, 0x80	; 128
    20de:	9f e3       	ldi	r25, 0x3F	; 63
    20e0:	08 95       	ret
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	9f 77       	andi	r25, 0x7F	; 127
    20e6:	5f 93       	push	r21
    20e8:	4f 93       	push	r20
    20ea:	3f 93       	push	r19
    20ec:	2f 93       	push	r18
    20ee:	e4 de       	rcall	.-568    	; 0x1eb8 <log>
    20f0:	2f 91       	pop	r18
    20f2:	3f 91       	pop	r19
    20f4:	4f 91       	pop	r20
    20f6:	5f 91       	pop	r21
    20f8:	52 df       	rcall	.-348    	; 0x1f9e <__mulsf3>
    20fa:	64 cd       	rjmp	.-1336   	; 0x1bc4 <exp>

000020fc <__fp_mpack>:
    20fc:	9f 3f       	cpi	r25, 0xFF	; 255
    20fe:	31 f0       	breq	.+12     	; 0x210c <__fp_mpack_finite+0xc>

00002100 <__fp_mpack_finite>:
    2100:	91 50       	subi	r25, 0x01	; 1
    2102:	20 f4       	brcc	.+8      	; 0x210c <__fp_mpack_finite+0xc>
    2104:	87 95       	ror	r24
    2106:	77 95       	ror	r23
    2108:	67 95       	ror	r22
    210a:	b7 95       	ror	r27
    210c:	88 0f       	add	r24, r24
    210e:	91 1d       	adc	r25, r1
    2110:	96 95       	lsr	r25
    2112:	87 95       	ror	r24
    2114:	97 f9       	bld	r25, 7
    2116:	08 95       	ret

00002118 <__udivmodhi4>:
    2118:	aa 1b       	sub	r26, r26
    211a:	bb 1b       	sub	r27, r27
    211c:	51 e1       	ldi	r21, 0x11	; 17
    211e:	07 c0       	rjmp	.+14     	; 0x212e <__udivmodhi4_ep>

00002120 <__udivmodhi4_loop>:
    2120:	aa 1f       	adc	r26, r26
    2122:	bb 1f       	adc	r27, r27
    2124:	a6 17       	cp	r26, r22
    2126:	b7 07       	cpc	r27, r23
    2128:	10 f0       	brcs	.+4      	; 0x212e <__udivmodhi4_ep>
    212a:	a6 1b       	sub	r26, r22
    212c:	b7 0b       	sbc	r27, r23

0000212e <__udivmodhi4_ep>:
    212e:	88 1f       	adc	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	5a 95       	dec	r21
    2134:	a9 f7       	brne	.-22     	; 0x2120 <__udivmodhi4_loop>
    2136:	80 95       	com	r24
    2138:	90 95       	com	r25
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	08 95       	ret

00002140 <__tablejump2__>:
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31

00002144 <__tablejump__>:
    2144:	05 90       	lpm	r0, Z+
    2146:	f4 91       	lpm	r31, Z
    2148:	e0 2d       	mov	r30, r0
    214a:	09 94       	ijmp

0000214c <sprintf>:
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	2e 97       	sbiw	r28, 0x0e	; 14
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	0d 89       	ldd	r16, Y+21	; 0x15
    2166:	1e 89       	ldd	r17, Y+22	; 0x16
    2168:	86 e0       	ldi	r24, 0x06	; 6
    216a:	8c 83       	std	Y+4, r24	; 0x04
    216c:	1a 83       	std	Y+2, r17	; 0x02
    216e:	09 83       	std	Y+1, r16	; 0x01
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	9f e7       	ldi	r25, 0x7F	; 127
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	ae 01       	movw	r20, r28
    217a:	47 5e       	subi	r20, 0xE7	; 231
    217c:	5f 4f       	sbci	r21, 0xFF	; 255
    217e:	6f 89       	ldd	r22, Y+23	; 0x17
    2180:	78 8d       	ldd	r23, Y+24	; 0x18
    2182:	ce 01       	movw	r24, r28
    2184:	01 96       	adiw	r24, 0x01	; 1
    2186:	10 d0       	rcall	.+32     	; 0x21a8 <vfprintf>
    2188:	ef 81       	ldd	r30, Y+7	; 0x07
    218a:	f8 85       	ldd	r31, Y+8	; 0x08
    218c:	e0 0f       	add	r30, r16
    218e:	f1 1f       	adc	r31, r17
    2190:	10 82       	st	Z, r1
    2192:	2e 96       	adiw	r28, 0x0e	; 14
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	08 95       	ret

000021a8 <vfprintf>:
    21a8:	2f 92       	push	r2
    21aa:	3f 92       	push	r3
    21ac:	4f 92       	push	r4
    21ae:	5f 92       	push	r5
    21b0:	6f 92       	push	r6
    21b2:	7f 92       	push	r7
    21b4:	8f 92       	push	r8
    21b6:	9f 92       	push	r9
    21b8:	af 92       	push	r10
    21ba:	bf 92       	push	r11
    21bc:	cf 92       	push	r12
    21be:	df 92       	push	r13
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	2c 97       	sbiw	r28, 0x0c	; 12
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	7c 01       	movw	r14, r24
    21de:	6b 01       	movw	r12, r22
    21e0:	8a 01       	movw	r16, r20
    21e2:	fc 01       	movw	r30, r24
    21e4:	17 82       	std	Z+7, r1	; 0x07
    21e6:	16 82       	std	Z+6, r1	; 0x06
    21e8:	83 81       	ldd	r24, Z+3	; 0x03
    21ea:	81 ff       	sbrs	r24, 1
    21ec:	b0 c1       	rjmp	.+864    	; 0x254e <vfprintf+0x3a6>
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	4c 01       	movw	r8, r24
    21f4:	f7 01       	movw	r30, r14
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	f6 01       	movw	r30, r12
    21fa:	93 fd       	sbrc	r25, 3
    21fc:	85 91       	lpm	r24, Z+
    21fe:	93 ff       	sbrs	r25, 3
    2200:	81 91       	ld	r24, Z+
    2202:	6f 01       	movw	r12, r30
    2204:	88 23       	and	r24, r24
    2206:	09 f4       	brne	.+2      	; 0x220a <vfprintf+0x62>
    2208:	9e c1       	rjmp	.+828    	; 0x2546 <vfprintf+0x39e>
    220a:	85 32       	cpi	r24, 0x25	; 37
    220c:	39 f4       	brne	.+14     	; 0x221c <vfprintf+0x74>
    220e:	93 fd       	sbrc	r25, 3
    2210:	85 91       	lpm	r24, Z+
    2212:	93 ff       	sbrs	r25, 3
    2214:	81 91       	ld	r24, Z+
    2216:	6f 01       	movw	r12, r30
    2218:	85 32       	cpi	r24, 0x25	; 37
    221a:	21 f4       	brne	.+8      	; 0x2224 <vfprintf+0x7c>
    221c:	b7 01       	movw	r22, r14
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	ed d1       	rcall	.+986    	; 0x25fc <fputc>
    2222:	e8 cf       	rjmp	.-48     	; 0x21f4 <vfprintf+0x4c>
    2224:	51 2c       	mov	r5, r1
    2226:	31 2c       	mov	r3, r1
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	20 32       	cpi	r18, 0x20	; 32
    222c:	a0 f4       	brcc	.+40     	; 0x2256 <vfprintf+0xae>
    222e:	8b 32       	cpi	r24, 0x2B	; 43
    2230:	69 f0       	breq	.+26     	; 0x224c <vfprintf+0xa4>
    2232:	30 f4       	brcc	.+12     	; 0x2240 <vfprintf+0x98>
    2234:	80 32       	cpi	r24, 0x20	; 32
    2236:	59 f0       	breq	.+22     	; 0x224e <vfprintf+0xa6>
    2238:	83 32       	cpi	r24, 0x23	; 35
    223a:	69 f4       	brne	.+26     	; 0x2256 <vfprintf+0xae>
    223c:	20 61       	ori	r18, 0x10	; 16
    223e:	2c c0       	rjmp	.+88     	; 0x2298 <vfprintf+0xf0>
    2240:	8d 32       	cpi	r24, 0x2D	; 45
    2242:	39 f0       	breq	.+14     	; 0x2252 <vfprintf+0xaa>
    2244:	80 33       	cpi	r24, 0x30	; 48
    2246:	39 f4       	brne	.+14     	; 0x2256 <vfprintf+0xae>
    2248:	21 60       	ori	r18, 0x01	; 1
    224a:	26 c0       	rjmp	.+76     	; 0x2298 <vfprintf+0xf0>
    224c:	22 60       	ori	r18, 0x02	; 2
    224e:	24 60       	ori	r18, 0x04	; 4
    2250:	23 c0       	rjmp	.+70     	; 0x2298 <vfprintf+0xf0>
    2252:	28 60       	ori	r18, 0x08	; 8
    2254:	21 c0       	rjmp	.+66     	; 0x2298 <vfprintf+0xf0>
    2256:	27 fd       	sbrc	r18, 7
    2258:	27 c0       	rjmp	.+78     	; 0x22a8 <vfprintf+0x100>
    225a:	30 ed       	ldi	r19, 0xD0	; 208
    225c:	38 0f       	add	r19, r24
    225e:	3a 30       	cpi	r19, 0x0A	; 10
    2260:	78 f4       	brcc	.+30     	; 0x2280 <vfprintf+0xd8>
    2262:	26 ff       	sbrs	r18, 6
    2264:	06 c0       	rjmp	.+12     	; 0x2272 <vfprintf+0xca>
    2266:	fa e0       	ldi	r31, 0x0A	; 10
    2268:	5f 9e       	mul	r5, r31
    226a:	30 0d       	add	r19, r0
    226c:	11 24       	eor	r1, r1
    226e:	53 2e       	mov	r5, r19
    2270:	13 c0       	rjmp	.+38     	; 0x2298 <vfprintf+0xf0>
    2272:	8a e0       	ldi	r24, 0x0A	; 10
    2274:	38 9e       	mul	r3, r24
    2276:	30 0d       	add	r19, r0
    2278:	11 24       	eor	r1, r1
    227a:	33 2e       	mov	r3, r19
    227c:	20 62       	ori	r18, 0x20	; 32
    227e:	0c c0       	rjmp	.+24     	; 0x2298 <vfprintf+0xf0>
    2280:	8e 32       	cpi	r24, 0x2E	; 46
    2282:	21 f4       	brne	.+8      	; 0x228c <vfprintf+0xe4>
    2284:	26 fd       	sbrc	r18, 6
    2286:	5f c1       	rjmp	.+702    	; 0x2546 <vfprintf+0x39e>
    2288:	20 64       	ori	r18, 0x40	; 64
    228a:	06 c0       	rjmp	.+12     	; 0x2298 <vfprintf+0xf0>
    228c:	8c 36       	cpi	r24, 0x6C	; 108
    228e:	11 f4       	brne	.+4      	; 0x2294 <vfprintf+0xec>
    2290:	20 68       	ori	r18, 0x80	; 128
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <vfprintf+0xf0>
    2294:	88 36       	cpi	r24, 0x68	; 104
    2296:	41 f4       	brne	.+16     	; 0x22a8 <vfprintf+0x100>
    2298:	f6 01       	movw	r30, r12
    229a:	93 fd       	sbrc	r25, 3
    229c:	85 91       	lpm	r24, Z+
    229e:	93 ff       	sbrs	r25, 3
    22a0:	81 91       	ld	r24, Z+
    22a2:	6f 01       	movw	r12, r30
    22a4:	81 11       	cpse	r24, r1
    22a6:	c1 cf       	rjmp	.-126    	; 0x222a <vfprintf+0x82>
    22a8:	98 2f       	mov	r25, r24
    22aa:	9f 7d       	andi	r25, 0xDF	; 223
    22ac:	95 54       	subi	r25, 0x45	; 69
    22ae:	93 30       	cpi	r25, 0x03	; 3
    22b0:	28 f4       	brcc	.+10     	; 0x22bc <vfprintf+0x114>
    22b2:	0c 5f       	subi	r16, 0xFC	; 252
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	ff e3       	ldi	r31, 0x3F	; 63
    22b8:	f9 83       	std	Y+1, r31	; 0x01
    22ba:	0d c0       	rjmp	.+26     	; 0x22d6 <vfprintf+0x12e>
    22bc:	83 36       	cpi	r24, 0x63	; 99
    22be:	31 f0       	breq	.+12     	; 0x22cc <vfprintf+0x124>
    22c0:	83 37       	cpi	r24, 0x73	; 115
    22c2:	71 f0       	breq	.+28     	; 0x22e0 <vfprintf+0x138>
    22c4:	83 35       	cpi	r24, 0x53	; 83
    22c6:	09 f0       	breq	.+2      	; 0x22ca <vfprintf+0x122>
    22c8:	57 c0       	rjmp	.+174    	; 0x2378 <vfprintf+0x1d0>
    22ca:	21 c0       	rjmp	.+66     	; 0x230e <vfprintf+0x166>
    22cc:	f8 01       	movw	r30, r16
    22ce:	80 81       	ld	r24, Z
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	0e 5f       	subi	r16, 0xFE	; 254
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	44 24       	eor	r4, r4
    22d8:	43 94       	inc	r4
    22da:	51 2c       	mov	r5, r1
    22dc:	54 01       	movw	r10, r8
    22de:	14 c0       	rjmp	.+40     	; 0x2308 <vfprintf+0x160>
    22e0:	38 01       	movw	r6, r16
    22e2:	f2 e0       	ldi	r31, 0x02	; 2
    22e4:	6f 0e       	add	r6, r31
    22e6:	71 1c       	adc	r7, r1
    22e8:	f8 01       	movw	r30, r16
    22ea:	a0 80       	ld	r10, Z
    22ec:	b1 80       	ldd	r11, Z+1	; 0x01
    22ee:	26 ff       	sbrs	r18, 6
    22f0:	03 c0       	rjmp	.+6      	; 0x22f8 <vfprintf+0x150>
    22f2:	65 2d       	mov	r22, r5
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <vfprintf+0x154>
    22f8:	6f ef       	ldi	r22, 0xFF	; 255
    22fa:	7f ef       	ldi	r23, 0xFF	; 255
    22fc:	c5 01       	movw	r24, r10
    22fe:	2c 87       	std	Y+12, r18	; 0x0c
    2300:	72 d1       	rcall	.+740    	; 0x25e6 <strnlen>
    2302:	2c 01       	movw	r4, r24
    2304:	83 01       	movw	r16, r6
    2306:	2c 85       	ldd	r18, Y+12	; 0x0c
    2308:	2f 77       	andi	r18, 0x7F	; 127
    230a:	22 2e       	mov	r2, r18
    230c:	16 c0       	rjmp	.+44     	; 0x233a <vfprintf+0x192>
    230e:	38 01       	movw	r6, r16
    2310:	f2 e0       	ldi	r31, 0x02	; 2
    2312:	6f 0e       	add	r6, r31
    2314:	71 1c       	adc	r7, r1
    2316:	f8 01       	movw	r30, r16
    2318:	a0 80       	ld	r10, Z
    231a:	b1 80       	ldd	r11, Z+1	; 0x01
    231c:	26 ff       	sbrs	r18, 6
    231e:	03 c0       	rjmp	.+6      	; 0x2326 <vfprintf+0x17e>
    2320:	65 2d       	mov	r22, r5
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	02 c0       	rjmp	.+4      	; 0x232a <vfprintf+0x182>
    2326:	6f ef       	ldi	r22, 0xFF	; 255
    2328:	7f ef       	ldi	r23, 0xFF	; 255
    232a:	c5 01       	movw	r24, r10
    232c:	2c 87       	std	Y+12, r18	; 0x0c
    232e:	50 d1       	rcall	.+672    	; 0x25d0 <strnlen_P>
    2330:	2c 01       	movw	r4, r24
    2332:	2c 85       	ldd	r18, Y+12	; 0x0c
    2334:	20 68       	ori	r18, 0x80	; 128
    2336:	22 2e       	mov	r2, r18
    2338:	83 01       	movw	r16, r6
    233a:	23 fc       	sbrc	r2, 3
    233c:	19 c0       	rjmp	.+50     	; 0x2370 <vfprintf+0x1c8>
    233e:	83 2d       	mov	r24, r3
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	48 16       	cp	r4, r24
    2344:	59 06       	cpc	r5, r25
    2346:	a0 f4       	brcc	.+40     	; 0x2370 <vfprintf+0x1c8>
    2348:	b7 01       	movw	r22, r14
    234a:	80 e2       	ldi	r24, 0x20	; 32
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	56 d1       	rcall	.+684    	; 0x25fc <fputc>
    2350:	3a 94       	dec	r3
    2352:	f5 cf       	rjmp	.-22     	; 0x233e <vfprintf+0x196>
    2354:	f5 01       	movw	r30, r10
    2356:	27 fc       	sbrc	r2, 7
    2358:	85 91       	lpm	r24, Z+
    235a:	27 fe       	sbrs	r2, 7
    235c:	81 91       	ld	r24, Z+
    235e:	5f 01       	movw	r10, r30
    2360:	b7 01       	movw	r22, r14
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	4b d1       	rcall	.+662    	; 0x25fc <fputc>
    2366:	31 10       	cpse	r3, r1
    2368:	3a 94       	dec	r3
    236a:	f1 e0       	ldi	r31, 0x01	; 1
    236c:	4f 1a       	sub	r4, r31
    236e:	51 08       	sbc	r5, r1
    2370:	41 14       	cp	r4, r1
    2372:	51 04       	cpc	r5, r1
    2374:	79 f7       	brne	.-34     	; 0x2354 <vfprintf+0x1ac>
    2376:	de c0       	rjmp	.+444    	; 0x2534 <vfprintf+0x38c>
    2378:	84 36       	cpi	r24, 0x64	; 100
    237a:	11 f0       	breq	.+4      	; 0x2380 <vfprintf+0x1d8>
    237c:	89 36       	cpi	r24, 0x69	; 105
    237e:	31 f5       	brne	.+76     	; 0x23cc <vfprintf+0x224>
    2380:	f8 01       	movw	r30, r16
    2382:	27 ff       	sbrs	r18, 7
    2384:	07 c0       	rjmp	.+14     	; 0x2394 <vfprintf+0x1ec>
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	0c 5f       	subi	r16, 0xFC	; 252
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <vfprintf+0x1fc>
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	88 27       	eor	r24, r24
    239a:	77 fd       	sbrc	r23, 7
    239c:	80 95       	com	r24
    239e:	98 2f       	mov	r25, r24
    23a0:	0e 5f       	subi	r16, 0xFE	; 254
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	2f 76       	andi	r18, 0x6F	; 111
    23a6:	b2 2e       	mov	r11, r18
    23a8:	97 ff       	sbrs	r25, 7
    23aa:	09 c0       	rjmp	.+18     	; 0x23be <vfprintf+0x216>
    23ac:	90 95       	com	r25
    23ae:	80 95       	com	r24
    23b0:	70 95       	com	r23
    23b2:	61 95       	neg	r22
    23b4:	7f 4f       	sbci	r23, 0xFF	; 255
    23b6:	8f 4f       	sbci	r24, 0xFF	; 255
    23b8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ba:	20 68       	ori	r18, 0x80	; 128
    23bc:	b2 2e       	mov	r11, r18
    23be:	2a e0       	ldi	r18, 0x0A	; 10
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	a4 01       	movw	r20, r8
    23c4:	4d d1       	rcall	.+666    	; 0x2660 <__ultoa_invert>
    23c6:	a8 2e       	mov	r10, r24
    23c8:	a8 18       	sub	r10, r8
    23ca:	43 c0       	rjmp	.+134    	; 0x2452 <vfprintf+0x2aa>
    23cc:	85 37       	cpi	r24, 0x75	; 117
    23ce:	29 f4       	brne	.+10     	; 0x23da <vfprintf+0x232>
    23d0:	2f 7e       	andi	r18, 0xEF	; 239
    23d2:	b2 2e       	mov	r11, r18
    23d4:	2a e0       	ldi	r18, 0x0A	; 10
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	25 c0       	rjmp	.+74     	; 0x2424 <vfprintf+0x27c>
    23da:	f2 2f       	mov	r31, r18
    23dc:	f9 7f       	andi	r31, 0xF9	; 249
    23de:	bf 2e       	mov	r11, r31
    23e0:	8f 36       	cpi	r24, 0x6F	; 111
    23e2:	c1 f0       	breq	.+48     	; 0x2414 <vfprintf+0x26c>
    23e4:	18 f4       	brcc	.+6      	; 0x23ec <vfprintf+0x244>
    23e6:	88 35       	cpi	r24, 0x58	; 88
    23e8:	79 f0       	breq	.+30     	; 0x2408 <vfprintf+0x260>
    23ea:	ad c0       	rjmp	.+346    	; 0x2546 <vfprintf+0x39e>
    23ec:	80 37       	cpi	r24, 0x70	; 112
    23ee:	19 f0       	breq	.+6      	; 0x23f6 <vfprintf+0x24e>
    23f0:	88 37       	cpi	r24, 0x78	; 120
    23f2:	21 f0       	breq	.+8      	; 0x23fc <vfprintf+0x254>
    23f4:	a8 c0       	rjmp	.+336    	; 0x2546 <vfprintf+0x39e>
    23f6:	2f 2f       	mov	r18, r31
    23f8:	20 61       	ori	r18, 0x10	; 16
    23fa:	b2 2e       	mov	r11, r18
    23fc:	b4 fe       	sbrs	r11, 4
    23fe:	0d c0       	rjmp	.+26     	; 0x241a <vfprintf+0x272>
    2400:	8b 2d       	mov	r24, r11
    2402:	84 60       	ori	r24, 0x04	; 4
    2404:	b8 2e       	mov	r11, r24
    2406:	09 c0       	rjmp	.+18     	; 0x241a <vfprintf+0x272>
    2408:	24 ff       	sbrs	r18, 4
    240a:	0a c0       	rjmp	.+20     	; 0x2420 <vfprintf+0x278>
    240c:	9f 2f       	mov	r25, r31
    240e:	96 60       	ori	r25, 0x06	; 6
    2410:	b9 2e       	mov	r11, r25
    2412:	06 c0       	rjmp	.+12     	; 0x2420 <vfprintf+0x278>
    2414:	28 e0       	ldi	r18, 0x08	; 8
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <vfprintf+0x27c>
    241a:	20 e1       	ldi	r18, 0x10	; 16
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <vfprintf+0x27c>
    2420:	20 e1       	ldi	r18, 0x10	; 16
    2422:	32 e0       	ldi	r19, 0x02	; 2
    2424:	f8 01       	movw	r30, r16
    2426:	b7 fe       	sbrs	r11, 7
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <vfprintf+0x290>
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	0c 5f       	subi	r16, 0xFC	; 252
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	06 c0       	rjmp	.+12     	; 0x2444 <vfprintf+0x29c>
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 5f       	subi	r16, 0xFE	; 254
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	a4 01       	movw	r20, r8
    2446:	0c d1       	rcall	.+536    	; 0x2660 <__ultoa_invert>
    2448:	a8 2e       	mov	r10, r24
    244a:	a8 18       	sub	r10, r8
    244c:	fb 2d       	mov	r31, r11
    244e:	ff 77       	andi	r31, 0x7F	; 127
    2450:	bf 2e       	mov	r11, r31
    2452:	b6 fe       	sbrs	r11, 6
    2454:	0b c0       	rjmp	.+22     	; 0x246c <vfprintf+0x2c4>
    2456:	2b 2d       	mov	r18, r11
    2458:	2e 7f       	andi	r18, 0xFE	; 254
    245a:	a5 14       	cp	r10, r5
    245c:	50 f4       	brcc	.+20     	; 0x2472 <vfprintf+0x2ca>
    245e:	b4 fe       	sbrs	r11, 4
    2460:	0a c0       	rjmp	.+20     	; 0x2476 <vfprintf+0x2ce>
    2462:	b2 fc       	sbrc	r11, 2
    2464:	08 c0       	rjmp	.+16     	; 0x2476 <vfprintf+0x2ce>
    2466:	2b 2d       	mov	r18, r11
    2468:	2e 7e       	andi	r18, 0xEE	; 238
    246a:	05 c0       	rjmp	.+10     	; 0x2476 <vfprintf+0x2ce>
    246c:	7a 2c       	mov	r7, r10
    246e:	2b 2d       	mov	r18, r11
    2470:	03 c0       	rjmp	.+6      	; 0x2478 <vfprintf+0x2d0>
    2472:	7a 2c       	mov	r7, r10
    2474:	01 c0       	rjmp	.+2      	; 0x2478 <vfprintf+0x2d0>
    2476:	75 2c       	mov	r7, r5
    2478:	24 ff       	sbrs	r18, 4
    247a:	0d c0       	rjmp	.+26     	; 0x2496 <vfprintf+0x2ee>
    247c:	fe 01       	movw	r30, r28
    247e:	ea 0d       	add	r30, r10
    2480:	f1 1d       	adc	r31, r1
    2482:	80 81       	ld	r24, Z
    2484:	80 33       	cpi	r24, 0x30	; 48
    2486:	11 f4       	brne	.+4      	; 0x248c <vfprintf+0x2e4>
    2488:	29 7e       	andi	r18, 0xE9	; 233
    248a:	09 c0       	rjmp	.+18     	; 0x249e <vfprintf+0x2f6>
    248c:	22 ff       	sbrs	r18, 2
    248e:	06 c0       	rjmp	.+12     	; 0x249c <vfprintf+0x2f4>
    2490:	73 94       	inc	r7
    2492:	73 94       	inc	r7
    2494:	04 c0       	rjmp	.+8      	; 0x249e <vfprintf+0x2f6>
    2496:	82 2f       	mov	r24, r18
    2498:	86 78       	andi	r24, 0x86	; 134
    249a:	09 f0       	breq	.+2      	; 0x249e <vfprintf+0x2f6>
    249c:	73 94       	inc	r7
    249e:	23 fd       	sbrc	r18, 3
    24a0:	12 c0       	rjmp	.+36     	; 0x24c6 <vfprintf+0x31e>
    24a2:	20 ff       	sbrs	r18, 0
    24a4:	06 c0       	rjmp	.+12     	; 0x24b2 <vfprintf+0x30a>
    24a6:	5a 2c       	mov	r5, r10
    24a8:	73 14       	cp	r7, r3
    24aa:	18 f4       	brcc	.+6      	; 0x24b2 <vfprintf+0x30a>
    24ac:	53 0c       	add	r5, r3
    24ae:	57 18       	sub	r5, r7
    24b0:	73 2c       	mov	r7, r3
    24b2:	73 14       	cp	r7, r3
    24b4:	60 f4       	brcc	.+24     	; 0x24ce <vfprintf+0x326>
    24b6:	b7 01       	movw	r22, r14
    24b8:	80 e2       	ldi	r24, 0x20	; 32
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	2c 87       	std	Y+12, r18	; 0x0c
    24be:	9e d0       	rcall	.+316    	; 0x25fc <fputc>
    24c0:	73 94       	inc	r7
    24c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    24c4:	f6 cf       	rjmp	.-20     	; 0x24b2 <vfprintf+0x30a>
    24c6:	73 14       	cp	r7, r3
    24c8:	10 f4       	brcc	.+4      	; 0x24ce <vfprintf+0x326>
    24ca:	37 18       	sub	r3, r7
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <vfprintf+0x328>
    24ce:	31 2c       	mov	r3, r1
    24d0:	24 ff       	sbrs	r18, 4
    24d2:	11 c0       	rjmp	.+34     	; 0x24f6 <vfprintf+0x34e>
    24d4:	b7 01       	movw	r22, r14
    24d6:	80 e3       	ldi	r24, 0x30	; 48
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	2c 87       	std	Y+12, r18	; 0x0c
    24dc:	8f d0       	rcall	.+286    	; 0x25fc <fputc>
    24de:	2c 85       	ldd	r18, Y+12	; 0x0c
    24e0:	22 ff       	sbrs	r18, 2
    24e2:	16 c0       	rjmp	.+44     	; 0x2510 <vfprintf+0x368>
    24e4:	21 ff       	sbrs	r18, 1
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <vfprintf+0x346>
    24e8:	88 e5       	ldi	r24, 0x58	; 88
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <vfprintf+0x34a>
    24ee:	88 e7       	ldi	r24, 0x78	; 120
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	b7 01       	movw	r22, r14
    24f4:	0c c0       	rjmp	.+24     	; 0x250e <vfprintf+0x366>
    24f6:	82 2f       	mov	r24, r18
    24f8:	86 78       	andi	r24, 0x86	; 134
    24fa:	51 f0       	breq	.+20     	; 0x2510 <vfprintf+0x368>
    24fc:	21 fd       	sbrc	r18, 1
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <vfprintf+0x35c>
    2500:	80 e2       	ldi	r24, 0x20	; 32
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <vfprintf+0x35e>
    2504:	8b e2       	ldi	r24, 0x2B	; 43
    2506:	27 fd       	sbrc	r18, 7
    2508:	8d e2       	ldi	r24, 0x2D	; 45
    250a:	b7 01       	movw	r22, r14
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	76 d0       	rcall	.+236    	; 0x25fc <fputc>
    2510:	a5 14       	cp	r10, r5
    2512:	30 f4       	brcc	.+12     	; 0x2520 <vfprintf+0x378>
    2514:	b7 01       	movw	r22, r14
    2516:	80 e3       	ldi	r24, 0x30	; 48
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	70 d0       	rcall	.+224    	; 0x25fc <fputc>
    251c:	5a 94       	dec	r5
    251e:	f8 cf       	rjmp	.-16     	; 0x2510 <vfprintf+0x368>
    2520:	aa 94       	dec	r10
    2522:	f4 01       	movw	r30, r8
    2524:	ea 0d       	add	r30, r10
    2526:	f1 1d       	adc	r31, r1
    2528:	80 81       	ld	r24, Z
    252a:	b7 01       	movw	r22, r14
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	66 d0       	rcall	.+204    	; 0x25fc <fputc>
    2530:	a1 10       	cpse	r10, r1
    2532:	f6 cf       	rjmp	.-20     	; 0x2520 <vfprintf+0x378>
    2534:	33 20       	and	r3, r3
    2536:	09 f4       	brne	.+2      	; 0x253a <vfprintf+0x392>
    2538:	5d ce       	rjmp	.-838    	; 0x21f4 <vfprintf+0x4c>
    253a:	b7 01       	movw	r22, r14
    253c:	80 e2       	ldi	r24, 0x20	; 32
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	5d d0       	rcall	.+186    	; 0x25fc <fputc>
    2542:	3a 94       	dec	r3
    2544:	f7 cf       	rjmp	.-18     	; 0x2534 <vfprintf+0x38c>
    2546:	f7 01       	movw	r30, r14
    2548:	86 81       	ldd	r24, Z+6	; 0x06
    254a:	97 81       	ldd	r25, Z+7	; 0x07
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <vfprintf+0x3aa>
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	9f ef       	ldi	r25, 0xFF	; 255
    2552:	2c 96       	adiw	r28, 0x0c	; 12
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	bf 90       	pop	r11
    2570:	af 90       	pop	r10
    2572:	9f 90       	pop	r9
    2574:	8f 90       	pop	r8
    2576:	7f 90       	pop	r7
    2578:	6f 90       	pop	r6
    257a:	5f 90       	pop	r5
    257c:	4f 90       	pop	r4
    257e:	3f 90       	pop	r3
    2580:	2f 90       	pop	r2
    2582:	08 95       	ret

00002584 <__eerd_block_m128>:
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22

00002588 <__eerd_blraw_m128>:
    2588:	fc 01       	movw	r30, r24
    258a:	e1 99       	sbic	0x1c, 1	; 28
    258c:	fe cf       	rjmp	.-4      	; 0x258a <__eerd_blraw_m128+0x2>
    258e:	06 c0       	rjmp	.+12     	; 0x259c <__eerd_blraw_m128+0x14>
    2590:	ff bb       	out	0x1f, r31	; 31
    2592:	ee bb       	out	0x1e, r30	; 30
    2594:	e0 9a       	sbi	0x1c, 0	; 28
    2596:	31 96       	adiw	r30, 0x01	; 1
    2598:	0d b2       	in	r0, 0x1d	; 29
    259a:	0d 92       	st	X+, r0
    259c:	41 50       	subi	r20, 0x01	; 1
    259e:	50 40       	sbci	r21, 0x00	; 0
    25a0:	b8 f7       	brcc	.-18     	; 0x2590 <__eerd_blraw_m128+0x8>
    25a2:	08 95       	ret

000025a4 <__eewr_block_m128>:
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <__eewr_block_m128+0xa>
    25aa:	2d 91       	ld	r18, X+
    25ac:	05 d0       	rcall	.+10     	; 0x25b8 <__eewr_r18_m128>
    25ae:	41 50       	subi	r20, 0x01	; 1
    25b0:	50 40       	sbci	r21, 0x00	; 0
    25b2:	d8 f7       	brcc	.-10     	; 0x25aa <__eewr_block_m128+0x6>
    25b4:	08 95       	ret

000025b6 <__eewr_byte_m128>:
    25b6:	26 2f       	mov	r18, r22

000025b8 <__eewr_r18_m128>:
    25b8:	e1 99       	sbic	0x1c, 1	; 28
    25ba:	fe cf       	rjmp	.-4      	; 0x25b8 <__eewr_r18_m128>
    25bc:	9f bb       	out	0x1f, r25	; 31
    25be:	8e bb       	out	0x1e, r24	; 30
    25c0:	2d bb       	out	0x1d, r18	; 29
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	e2 9a       	sbi	0x1c, 2	; 28
    25c8:	e1 9a       	sbi	0x1c, 1	; 28
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	08 95       	ret

000025d0 <strnlen_P>:
    25d0:	fc 01       	movw	r30, r24
    25d2:	05 90       	lpm	r0, Z+
    25d4:	61 50       	subi	r22, 0x01	; 1
    25d6:	70 40       	sbci	r23, 0x00	; 0
    25d8:	01 10       	cpse	r0, r1
    25da:	d8 f7       	brcc	.-10     	; 0x25d2 <strnlen_P+0x2>
    25dc:	80 95       	com	r24
    25de:	90 95       	com	r25
    25e0:	8e 0f       	add	r24, r30
    25e2:	9f 1f       	adc	r25, r31
    25e4:	08 95       	ret

000025e6 <strnlen>:
    25e6:	fc 01       	movw	r30, r24
    25e8:	61 50       	subi	r22, 0x01	; 1
    25ea:	70 40       	sbci	r23, 0x00	; 0
    25ec:	01 90       	ld	r0, Z+
    25ee:	01 10       	cpse	r0, r1
    25f0:	d8 f7       	brcc	.-10     	; 0x25e8 <strnlen+0x2>
    25f2:	80 95       	com	r24
    25f4:	90 95       	com	r25
    25f6:	8e 0f       	add	r24, r30
    25f8:	9f 1f       	adc	r25, r31
    25fa:	08 95       	ret

000025fc <fputc>:
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	18 2f       	mov	r17, r24
    2606:	09 2f       	mov	r16, r25
    2608:	eb 01       	movw	r28, r22
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	81 fd       	sbrc	r24, 1
    260e:	03 c0       	rjmp	.+6      	; 0x2616 <fputc+0x1a>
    2610:	8f ef       	ldi	r24, 0xFF	; 255
    2612:	9f ef       	ldi	r25, 0xFF	; 255
    2614:	20 c0       	rjmp	.+64     	; 0x2656 <fputc+0x5a>
    2616:	82 ff       	sbrs	r24, 2
    2618:	10 c0       	rjmp	.+32     	; 0x263a <fputc+0x3e>
    261a:	4e 81       	ldd	r20, Y+6	; 0x06
    261c:	5f 81       	ldd	r21, Y+7	; 0x07
    261e:	2c 81       	ldd	r18, Y+4	; 0x04
    2620:	3d 81       	ldd	r19, Y+5	; 0x05
    2622:	42 17       	cp	r20, r18
    2624:	53 07       	cpc	r21, r19
    2626:	7c f4       	brge	.+30     	; 0x2646 <fputc+0x4a>
    2628:	e8 81       	ld	r30, Y
    262a:	f9 81       	ldd	r31, Y+1	; 0x01
    262c:	9f 01       	movw	r18, r30
    262e:	2f 5f       	subi	r18, 0xFF	; 255
    2630:	3f 4f       	sbci	r19, 0xFF	; 255
    2632:	39 83       	std	Y+1, r19	; 0x01
    2634:	28 83       	st	Y, r18
    2636:	10 83       	st	Z, r17
    2638:	06 c0       	rjmp	.+12     	; 0x2646 <fputc+0x4a>
    263a:	e8 85       	ldd	r30, Y+8	; 0x08
    263c:	f9 85       	ldd	r31, Y+9	; 0x09
    263e:	81 2f       	mov	r24, r17
    2640:	09 95       	icall
    2642:	89 2b       	or	r24, r25
    2644:	29 f7       	brne	.-54     	; 0x2610 <fputc+0x14>
    2646:	2e 81       	ldd	r18, Y+6	; 0x06
    2648:	3f 81       	ldd	r19, Y+7	; 0x07
    264a:	2f 5f       	subi	r18, 0xFF	; 255
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	3f 83       	std	Y+7, r19	; 0x07
    2650:	2e 83       	std	Y+6, r18	; 0x06
    2652:	81 2f       	mov	r24, r17
    2654:	90 2f       	mov	r25, r16
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	1f 91       	pop	r17
    265c:	0f 91       	pop	r16
    265e:	08 95       	ret

00002660 <__ultoa_invert>:
    2660:	fa 01       	movw	r30, r20
    2662:	aa 27       	eor	r26, r26
    2664:	28 30       	cpi	r18, 0x08	; 8
    2666:	51 f1       	breq	.+84     	; 0x26bc <__ultoa_invert+0x5c>
    2668:	20 31       	cpi	r18, 0x10	; 16
    266a:	81 f1       	breq	.+96     	; 0x26cc <__ultoa_invert+0x6c>
    266c:	e8 94       	clt
    266e:	6f 93       	push	r22
    2670:	6e 7f       	andi	r22, 0xFE	; 254
    2672:	6e 5f       	subi	r22, 0xFE	; 254
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	8f 4f       	sbci	r24, 0xFF	; 255
    2678:	9f 4f       	sbci	r25, 0xFF	; 255
    267a:	af 4f       	sbci	r26, 0xFF	; 255
    267c:	b1 e0       	ldi	r27, 0x01	; 1
    267e:	3e d0       	rcall	.+124    	; 0x26fc <__ultoa_invert+0x9c>
    2680:	b4 e0       	ldi	r27, 0x04	; 4
    2682:	3c d0       	rcall	.+120    	; 0x26fc <__ultoa_invert+0x9c>
    2684:	67 0f       	add	r22, r23
    2686:	78 1f       	adc	r23, r24
    2688:	89 1f       	adc	r24, r25
    268a:	9a 1f       	adc	r25, r26
    268c:	a1 1d       	adc	r26, r1
    268e:	68 0f       	add	r22, r24
    2690:	79 1f       	adc	r23, r25
    2692:	8a 1f       	adc	r24, r26
    2694:	91 1d       	adc	r25, r1
    2696:	a1 1d       	adc	r26, r1
    2698:	6a 0f       	add	r22, r26
    269a:	71 1d       	adc	r23, r1
    269c:	81 1d       	adc	r24, r1
    269e:	91 1d       	adc	r25, r1
    26a0:	a1 1d       	adc	r26, r1
    26a2:	20 d0       	rcall	.+64     	; 0x26e4 <__ultoa_invert+0x84>
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <__ultoa_invert+0x48>
    26a6:	68 94       	set
    26a8:	3f 91       	pop	r19
    26aa:	2a e0       	ldi	r18, 0x0A	; 10
    26ac:	26 9f       	mul	r18, r22
    26ae:	11 24       	eor	r1, r1
    26b0:	30 19       	sub	r19, r0
    26b2:	30 5d       	subi	r19, 0xD0	; 208
    26b4:	31 93       	st	Z+, r19
    26b6:	de f6       	brtc	.-74     	; 0x266e <__ultoa_invert+0xe>
    26b8:	cf 01       	movw	r24, r30
    26ba:	08 95       	ret
    26bc:	46 2f       	mov	r20, r22
    26be:	47 70       	andi	r20, 0x07	; 7
    26c0:	40 5d       	subi	r20, 0xD0	; 208
    26c2:	41 93       	st	Z+, r20
    26c4:	b3 e0       	ldi	r27, 0x03	; 3
    26c6:	0f d0       	rcall	.+30     	; 0x26e6 <__ultoa_invert+0x86>
    26c8:	c9 f7       	brne	.-14     	; 0x26bc <__ultoa_invert+0x5c>
    26ca:	f6 cf       	rjmp	.-20     	; 0x26b8 <__ultoa_invert+0x58>
    26cc:	46 2f       	mov	r20, r22
    26ce:	4f 70       	andi	r20, 0x0F	; 15
    26d0:	40 5d       	subi	r20, 0xD0	; 208
    26d2:	4a 33       	cpi	r20, 0x3A	; 58
    26d4:	18 f0       	brcs	.+6      	; 0x26dc <__ultoa_invert+0x7c>
    26d6:	49 5d       	subi	r20, 0xD9	; 217
    26d8:	31 fd       	sbrc	r19, 1
    26da:	40 52       	subi	r20, 0x20	; 32
    26dc:	41 93       	st	Z+, r20
    26de:	02 d0       	rcall	.+4      	; 0x26e4 <__ultoa_invert+0x84>
    26e0:	a9 f7       	brne	.-22     	; 0x26cc <__ultoa_invert+0x6c>
    26e2:	ea cf       	rjmp	.-44     	; 0x26b8 <__ultoa_invert+0x58>
    26e4:	b4 e0       	ldi	r27, 0x04	; 4
    26e6:	a6 95       	lsr	r26
    26e8:	97 95       	ror	r25
    26ea:	87 95       	ror	r24
    26ec:	77 95       	ror	r23
    26ee:	67 95       	ror	r22
    26f0:	ba 95       	dec	r27
    26f2:	c9 f7       	brne	.-14     	; 0x26e6 <__ultoa_invert+0x86>
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	61 05       	cpc	r22, r1
    26f8:	71 05       	cpc	r23, r1
    26fa:	08 95       	ret
    26fc:	9b 01       	movw	r18, r22
    26fe:	ac 01       	movw	r20, r24
    2700:	0a 2e       	mov	r0, r26
    2702:	06 94       	lsr	r0
    2704:	57 95       	ror	r21
    2706:	47 95       	ror	r20
    2708:	37 95       	ror	r19
    270a:	27 95       	ror	r18
    270c:	ba 95       	dec	r27
    270e:	c9 f7       	brne	.-14     	; 0x2702 <__ultoa_invert+0xa2>
    2710:	62 0f       	add	r22, r18
    2712:	73 1f       	adc	r23, r19
    2714:	84 1f       	adc	r24, r20
    2716:	95 1f       	adc	r25, r21
    2718:	a0 1d       	adc	r26, r0
    271a:	08 95       	ret

0000271c <_exit>:
    271c:	f8 94       	cli

0000271e <__stop_program>:
    271e:	ff cf       	rjmp	.-2      	; 0x271e <__stop_program>
